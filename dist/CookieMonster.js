(()=>{"use strict";var __webpack_modules__={753:()=>{eval("\n;// CONCATENATED MODULE: ./src/Data/Moddata.js\n/** Data related directly to Cookie Monster */\n\nconst VersionMajor = '2.031';\nconst VersionMinor = '5';\n\n/** Information about Cookie Monster to be displayed in the info section */\nconst ModDescription = (/* unused pure expression or super */ null && (`<div class=\"listing\">\n <a href=\"https://github.com/Aktanusa/CookieMonster\" target=\"blank\">Cookie Monster</a>\n offers a wide range of tools and statistics to enhance your game experience.\n It is not a cheat interface â€“ although it does offer helpers for golden cookies and such, everything can be toggled off at will to only leave how much information you want.</br>\n Progess on new updates and all previous release notes can be found on the GitHub page linked above!</br>\n Please also report any bugs you may find over there!</br>\n </div>\n `));\n\n/** Latest releasenotes of Cookie Monster to be displayed in the info section */\nconst LatestReleaseNotes = (/* unused pure expression or super */ null && (`<div class=\"listing\">\n <b>The latest update (v 2.031.4) has introduced the following features:</b></br>\n - Added a changelog to the info tab and notification indicating a new version</br>\n - Warnings in tooltips are now based on the income after buying the upgrade</br>\n - A new warning and stat for Conjure Baked Goods in combination with Frenzy has been added</br>\n - User can now set a custom tooltip warning (\"x times cps\") in the settings</br>\n - Garden plots with plants that give cookies on harvest now display a tooltip with current and maximum reward</br>\n - The Harvest All button in the Garden now has a tooltip displaying the current reward </br>\n - The Ascend button can now display additional info (this can be turned off in the settings) </br>\n - The statistics page now displays the Heavenly Chips per second</br>\n - The statistics page now displays the CPS needed for the next level in Chain Cookies</br>\n - The statistics page now displays the cookies needed for optimal rewards for garden plants</br>\n - You can now set a Heavenly Chips target in the settings which will be counted down to in the statistics page</br>\n - The color picker in the settings has been updated to its latest version</br>\n - The overlay of seconds/percentage of timers is now toggle able and more readable</br>\n - You can now toggle to disable bulk-buying from buying less than the selected amount (i.e., buying 7 of a building by pressing the buy 10 when you don't have enough for 10)</br>\n - CookieMonster now uses the Modding API provided by the base game</br>\n - There is a new option that allows the decoupling of the base game volume setting and the volumes of sounds created by the mod</br>\n - The tab title now displays a \"!\" if a Golden Cookie or Reindeer can spawn</br>\n - PP calculation can now be set to: 1) Exclude the 1st, 2nd or 3rd most optimal building (if you never want to buy that it), 2) Always consider optimal buildings that cost below \"xx seconds of CPS\" (toggleable in the settings), 3) Ignore any building or upgrade that is not purchasable at the moment</br>\n </br>\n <b>This update fixes the following bugs:</b></br>\n - Minigames with enhanced tooltips will now also show these if the minigames were not loaded when CookieMonster was loaded</br>\n - Sound, Flashes and Notifications will no longer play when the mod is initializing</br>\n - The color picker should now update its display consistently</br>\n - Fixed some typo's</br>\n - Fixed a game breaking bug when the player had not purchased any upgrades</br>\n - Fixed a number of console errors thrown by CM</br>\n - Fixed the integration with mods that provide additional content, they should now no longer break CookieMonster</br>\n - The Timer bar will now disappear correctly when the Golden Switch has been activated</br>\n - Fixed errors in the calculation of the Chain Cookies and Wrinkler stats</br>\n - Fixed buy warnings showing incorrectly</br>\n </div>\n `));\n\n;// CONCATENATED MODULE: ./src/Cache/CPS/GetCPSBuffMult.js\n/**\n * This function returns the current CPS buff\n * @returns {number}\tmult\tThe multiplier\n */\nfunction GetCPSBuffMult() {\n\tlet mult = 1;\n\tfor (const i of Object.keys(Game.buffs)) {\n\t\tif (typeof Game.buffs[i].multCpS !== 'undefined') mult *= Game.buffs[i].multCpS;\n\t}\n\treturn mult;\n}\n;// CONCATENATED MODULE: ./src/Cache/VariablesAndData.js\n/* eslint-disable prefer-const */\n\nlet CacheDragonAura = 0;\nlet CacheDragonAura2 = 0;\nlet CacheLastDragonLevel = 0;\nlet CacheCostDragonUpgrade = 0;\nlet WrinklersTotal = 0;\nlet WrinklersNormal = 0;\nlet WrinklersFattest = [0, null];\nlet CacheLucky = 0;\nlet CacheLuckyReward = 0;\nlet CacheLuckyWrathReward = 0;\nlet CacheLuckyFrenzy = 0;\nlet CacheLuckyRewardFrenzy = 0;\nlet CacheLuckyWrathRewardFrenzy = 0;\nlet CacheConjure = 0;\nlet CacheConjureReward = 0;\nlet CacheEdifice = 0;\nlet CacheEdificeBuilding = 0;\nlet CacheNoGoldSwitchCookiesPS = 0;\nlet VariablesAndData_CacheDragonsFortuneMultAdjustment = 1;\nlet VariablesAndData_CacheGoldenCookiesMult = 1;\nlet VariablesAndData_CacheWrathCookiesMult = 1;\n\n;// CONCATENATED MODULE: ./src/Cache/Stats/Stats.js\n/* eslint-disable no-unused-vars */\n/** Functions related to Caching stats */\n\n\n\n\n\n/**\n * This functions caches variables related to the stats page\n */\nfunction CacheStatsCookies() {\n\tCacheLucky = (CacheNoGoldSwitchCookiesPS * 900) / 0.15;\n\tCacheLucky *= VariablesAndData_CacheDragonsFortuneMultAdjustment;\n\tconst cpsBuffMult = GetCPSBuffMult();\n\tif (cpsBuffMult > 0) CacheLucky /= cpsBuffMult;\n\telse CacheLucky = 0;\n\tCacheLuckyReward = VariablesAndData_CacheGoldenCookiesMult * (CacheLucky * 0.15) + 13;\n\tCacheLuckyWrathReward = VariablesAndData_CacheWrathCookiesMult * (CacheLucky * 0.15) + 13;\n\tCacheLuckyFrenzy = CacheLucky * 7;\n\tCacheLuckyRewardFrenzy = VariablesAndData_CacheGoldenCookiesMult * (CacheLuckyFrenzy * 0.15) + 13;\n\tCacheLuckyWrathRewardFrenzy = VariablesAndData_CacheWrathCookiesMult * (CacheLuckyFrenzy * 0.15) + 13;\n\tCacheConjure = CacheLucky * 2;\n\tCacheConjureReward = CacheConjure * 0.15;\n\n\tCacheEdifice = 0;\n\tlet max = 0;\n\tlet n = 0;\n\tfor (const i of Object.keys(Game.Objects)) {\n\t\tif (Game.Objects[i].amount > max) max = Game.Objects[i].amount;\n\t\tif (Game.Objects[i].amount > 0) n++;\n\t}\n\tfor (const i of Object.keys(Game.Objects)) {\n\t\tif ((Game.Objects[i].amount < max || n === 1)\n\t\t\t&& Game.Objects[i].amount < 400\n\t\t\t&& Game.Objects[i].price * 2 > CacheEdifice) {\n\t\t\tCacheEdifice = Game.Objects[i].price * 2;\n\t\t\tCacheEdificeBuilding = i;\n\t\t}\n\t}\n}\n\n/**\n * This functions calculates the multipliers of Golden and Wrath cookie rewards\n */\nfunction CacheGoldenAndWrathCookiesMults() {\n\tlet goldenMult = 1;\n\tlet wrathMult = 1;\n\tlet mult = 1;\n\n\t// Factor auras and upgrade in mults\n\tif (SimHas('Green yeast digestives')) mult *= 1.01;\n\tif (SimHas('Dragon fang')) mult *= 1.03;\n\n\tgoldenMult *= 1 + Game.auraMult('Ancestral Metamorphosis') * 0.1;\n\tgoldenMult *= Game.eff('goldenCookieGain');\n\twrathMult *= 1 + Game.auraMult('Unholy Dominion') * 0.1;\n\twrathMult *= Game.eff('wrathCookieGain');\n\n\t// Calculate final golden and wrath multipliers\n\tCacheGoldenCookiesMult = mult * goldenMult;\n\tCacheWrathCookiesMult = mult * wrathMult;\n\n\t// Calculate Dragon's Fortune multiplier adjustment:\n\t// If Dragon's Fortune (or Reality Bending) aura is active and there are currently no golden cookies,\n\t// compute a multiplier adjustment to apply on the current CPS to simulate 1 golden cookie on screen.\n\t// Otherwise, the aura effect will be factored in the base CPS making the multiplier not requiring adjustment.\n\tCacheDragonsFortuneMultAdjustment = 1;\n\tif (Game.shimmerTypes.golden.n === 0) {\n\t\tCacheDragonsFortuneMultAdjustment *= 1 + Game.auraMult('Dragon\\'s Fortune') * 1.23;\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/VariablesAndData.js\n/**\n * Section: Variables used in Disp functions */\n\nlet DispCSS;\n\n/**\n * These are variables used to create DOM object names and id (e.g., 'CMTextTooltip)\n */\nconst VariablesAndData_ColorTextPre = 'CMText';\nconst VariablesAndData_ColorBackPre = 'CMBack';\nconst VariablesAndData_ColorBorderPre = 'CMBorder';\n\n/**\n * These are variables which can be set in the options by the user to standardize colours throughout CookieMonster\n */\nconst VariablesAndData_ColorBlue = 'Blue';\nconst ColorGreen = 'Green';\nconst VariablesAndData_ColorYellow = 'Yellow';\nconst ColorOrange = 'Orange';\nconst VariablesAndData_ColorRed = 'Red';\nconst VariablesAndData_ColorPurple = 'Purple';\nconst VariablesAndData_ColorGray = 'Gray';\nconst ColorPink = 'Pink';\nconst ColorBrown = 'Brown';\nconst Colors = [VariablesAndData_ColorGray, VariablesAndData_ColorBlue, ColorGreen, VariablesAndData_ColorYellow, ColorOrange, VariablesAndData_ColorRed, VariablesAndData_ColorPurple, ColorPink, ColorBrown];\n\n/**\n * This list is used to make some very basic tooltips.\n * It is used by CM.Main.DelayInit() in the call of CM.Disp.CreateSimpleTooltip()\n * @item\t{string}\tplaceholder\n * @item\t{string}\ttext\n * @item\t{string}\tminWidth\n */\nconst TooltipText = [\n\t['GoldCookTooltipPlaceholder', 'Calculated with Golden Switch off', '200px'],\n\t['GoldCookDragonsFortuneTooltipPlaceholder', 'Calculated with Golden Switch off and at least one golden cookie on-screen', '240px'],\n\t['PrestMaxTooltipPlaceholder', 'The MAX prestige is calculated with the cookies gained from popping all wrinklers with Skruuia god in Diamond slot, selling all stock market goods, selling all buildings with Earth Shatterer and Reality Bending auras, and buying Chocolate egg', '320px'],\n\t['NextPrestTooltipPlaceholder', 'Calculated with cookies gained from wrinklers and Chocolate egg', '200px'],\n\t['HeavenChipMaxTooltipPlaceholder', 'The MAX heavenly chips is calculated with the cookies gained from popping all wrinklers with Skruuia god in Diamond slot, selling all stock market goods, selling all buildings with Earth Shatterer and Reality Bending auras, and buying Chocolate egg', '330px'],\n\t['ResetTooltipPlaceholder', 'The bonus income you would get from new prestige levels unlocked at 100% of its potential and from ascension achievements if you have the same buildings/upgrades after reset', '370px'],\n\t['ChoEggTooltipPlaceholder', 'The amount of cookies you would get from popping all wrinklers with Skruuia god in Diamond slot, selling all stock market goods, selling all buildings with Earth Shatterer and Reality Bending auras, and then buying Chocolate egg', '300px'],\n\t['ChainNextLevelPlaceholder', 'Cheated cookies might break this formula', '250px'],\n];\n\n/**\n * This array is used to give certain timers specific colours\n */\nconst BuffColors = {\n\tFrenzy: VariablesAndData_ColorYellow, 'Dragon Harvest': ColorBrown, 'Elder frenzy': ColorGreen, Clot: VariablesAndData_ColorRed, 'Click frenzy': VariablesAndData_ColorBlue, Dragonflight: ColorPink,\n};\n\n/**\n * This array is used to track GC timers\n */\nconst GCTimers = {};\n\n/**\n * These arrays are used in the stats page to show\n * average cookies per {CM.Disp.cookieTimes/CM.Disp.clickTimes} seconds\n */\nconst CookieTimes = (/* unused pure expression or super */ null && ([10, 15, 30, 60, 300, 600, 900, 1800]));\nconst ClickTimes = (/* unused pure expression or super */ null && ([1, 5, 10, 15, 30]));\n\n/**\n * This array is used to store whether a Wrinkler tooltip is being shown or not\n * [i] = 1 means tooltip is being shown, [i] = 0 means hidden\n * It is used by CM.Disp.CheckWrinklerTooltip() and CM.Main.AddWrinklerAreaDetect()\n */\nconst TooltipWrinklerBeingShown = (/* unused pure expression or super */ null && ([]));\n\n/**\n * These are variables used by the functions that create tooltips for wrinklers\n * See CM.Disp.CheckWrinklerTooltip(), CM.Disp.UpdateWrinklerTooltip() and CM.Main.AddWrinklerAreaDetect()\n */\nconst TooltipWrinklerArea = 0;\nconst TooltipWrinkler = (/* unused pure expression or super */ null && (-1));\n\n/**\n * Used to store the number of cookies to be displayed in the tab-title\n */\nconst Title = '';\n\n/**\n * These are variables used to create various displays when the game is loaded on the \"sell all\" screen\n */\nconst LastTargetBotBar = 1;\nconst LastTargetBuildings = 1;\nconst LastTargetTooltipBuilding = 1;\n\n;// CONCATENATED MODULE: ./src/Disp/BuildingsUpgrades/UpgradeBar.js\n\n\n/**\n * This function creates the legend for the upgrade bar\n * @returns\t{object}\tlegend\tThe legend-object to be added\n */\nfunction CreateUpgradeBarLegend() {\n\tconst legend = document.createElement('div');\n\tlegend.style.minWidth = '330px';\n\tlegend.style.marginBottom = '4px';\n\tconst title = document.createElement('div');\n\ttitle.className = 'name';\n\ttitle.style.marginBottom = '4px';\n\ttitle.textContent = 'Legend';\n\tlegend.appendChild(title);\n\n\tconst legendLine = function (color, text) {\n\t\tconst div = document.createElement('div');\n\t\tdiv.style.verticalAlign = 'middle';\n\t\tconst span = document.createElement('span');\n\t\tspan.className = VariablesAndData_ColorBackPre + color;\n\t\tspan.style.display = 'inline-block';\n\t\tspan.style.height = '10px';\n\t\tspan.style.width = '10px';\n\t\tspan.style.marginRight = '4px';\n\t\tdiv.appendChild(span);\n\t\tdiv.appendChild(document.createTextNode(text));\n\t\treturn div;\n\t};\n\n\tlegend.appendChild(legendLine(VariablesAndData_ColorBlue, 'Better than best PP building'));\n\tlegend.appendChild(legendLine(ColorGreen, 'Same as best PP building'));\n\tlegend.appendChild(legendLine(VariablesAndData_ColorYellow, 'Between best and worst PP buildings closer to best'));\n\tlegend.appendChild(legendLine(ColorOrange, 'Between best and worst PP buildings closer to worst'));\n\tlegend.appendChild(legendLine(VariablesAndData_ColorRed, 'Same as worst PP building'));\n\tlegend.appendChild(legendLine(VariablesAndData_ColorPurple, 'Worse than worst PP building'));\n\tlegend.appendChild(legendLine(VariablesAndData_ColorGray, 'Negative or infinity PP'));\n\treturn legend;\n}\n\n/**\n * This function creates the upgrade bar above the upgrade-section in the right section of the screen\n */\nfunction CreateUpgradeBar() {\n\tconst UpgradeBar = document.createElement('div');\n\tUpgradeBar.id = 'CMUpgradeBar';\n\tUpgradeBar.style.width = '100%';\n\tUpgradeBar.style.backgroundColor = 'black';\n\tUpgradeBar.style.textAlign = 'center';\n\tUpgradeBar.style.fontWeight = 'bold';\n\tUpgradeBar.style.display = 'none';\n\tUpgradeBar.style.zIndex = '21';\n\tUpgradeBar.onmouseout = function () { Game.tooltip.hide(); };\n\n\tconst placeholder = document.createElement('div');\n\tplaceholder.appendChild(CreateUpgradeBarLegend());\n\tUpgradeBar.onmouseover = function () { Game.tooltip.draw(this, escape(placeholder.innerHTML), 'store'); };\n\n\tconst upgradeNumber = function (id, color) {\n\t\tconst span = document.createElement('span');\n\t\tspan.id = id;\n\t\tspan.className = VariablesAndData_ColorTextPre + color;\n\t\tspan.style.width = '14.28571428571429%';\n\t\tspan.style.display = 'inline-block';\n\t\tspan.textContent = '0';\n\t\treturn span;\n\t};\n\tUpgradeBar.appendChild(upgradeNumber('CMUpgradeBarBlue', VariablesAndData_ColorBlue));\n\tUpgradeBar.appendChild(upgradeNumber('CMUpgradeBarGreen', ColorGreen));\n\tUpgradeBar.appendChild(upgradeNumber('CMUpgradeBarYellow', VariablesAndData_ColorYellow));\n\tUpgradeBar.appendChild(upgradeNumber('CMUpgradeBarOrange', ColorOrange));\n\tUpgradeBar.appendChild(upgradeNumber('CMUpgradeBarRed', VariablesAndData_ColorRed));\n\tUpgradeBar.appendChild(upgradeNumber('CMUpgradeBarPurple', VariablesAndData_ColorPurple));\n\tUpgradeBar.appendChild(upgradeNumber('CMUpgradeBarGray', VariablesAndData_ColorGray));\n\n\tl('upgrades').parentNode.insertBefore(UpgradeBar, l('upgrades').parentNode.childNodes[3]);\n}\n\n;// CONCATENATED MODULE: ./src/Disp/InfoBars/CreateDOMElements.js\n/** Functions to create various DOM elements used by the Bars */\n\n\n\n/**\n * This function creates an indivudual timer for the timer bar\n * @param\t{string}\t\t\t\t\tid\t\t\t\t\tAn id to identify the timer\n * @param\t{string}\t\t\t\t\tname\t\t\t\tThe title of the timer\n * @param\t[{{string}, {string}}, ...]\tbars ([id, color])\tThe id and colours of individual parts of the timer\n */\nfunction CreateTimerBar(id, name, bars) {\n\tconst timerBar = document.createElement('div');\n\ttimerBar.id = id;\n\ttimerBar.style.height = '12px';\n\ttimerBar.style.margin = '0px 10px';\n\ttimerBar.style.position = 'relative';\n\n\tconst div = document.createElement('div');\n\tdiv.style.width = '100%';\n\tdiv.style.height = '10px';\n\tdiv.style.margin = 'auto';\n\tdiv.style.position = 'absolute';\n\tdiv.style.left = '0px';\n\tdiv.style.top = '0px';\n\tdiv.style.right = '0px';\n\tdiv.style.bottom = '0px';\n\n\tconst type = document.createElement('span');\n\ttype.style.display = 'inline-block';\n\ttype.style.textAlign = 'right';\n\ttype.style.fontSize = '10px';\n\ttype.style.width = '108px';\n\ttype.style.marginRight = '5px';\n\ttype.style.verticalAlign = 'text-top';\n\ttype.textContent = name;\n\tdiv.appendChild(type);\n\n\tfor (let i = 0; i < bars.length; i++) {\n\t\tconst colorBar = document.createElement('span');\n\t\tcolorBar.id = bars[i].id;\n\t\tcolorBar.style.display = 'inline-block';\n\t\tcolorBar.style.height = '10px';\n\t\tcolorBar.style.verticalAlign = 'text-top';\n\t\tcolorBar.style.textAlign = 'center';\n\t\tif (bars.length - 1 === i) {\n\t\t\tcolorBar.style.borderTopRightRadius = '10px';\n\t\t\tcolorBar.style.borderBottomRightRadius = '10px';\n\t\t}\n\t\tif (typeof bars[i].color !== 'undefined') {\n\t\t\tcolorBar.className = CM.Disp.colorBackPre + bars[i].color;\n\t\t}\n\t\tdiv.appendChild(colorBar);\n\t}\n\n\tconst timer = document.createElement('span');\n\ttimer.id = `${id}Time`;\n\ttimer.style.marginLeft = '5px';\n\ttimer.style.verticalAlign = 'text-top';\n\tdiv.appendChild(timer);\n\n\ttimerBar.appendChild(div);\n\n\treturn timerBar;\n}\n\n/**\n * This function extends the bottom bar (created by CM.Disp.CreateBotBar) with a column for the given building.\n * This function is called by CM.Disp.CreateBotBar on initialization of Cookie Monster,\n * and also in CM.Sim.CopyData if a new building (added by another mod) is discovered.\n * @param\t{string}\tbuildingName\tObjectname to be added (e.g., \"Cursor\")\n */\nfunction CreateBotBarBuildingColumn(buildingName) {\n\tif (l('CMBotBar') !== null) {\n\t\tconst type = l('CMBotBar').firstChild.firstChild.childNodes[0];\n\t\tconst bonus = l('CMBotBar').firstChild.firstChild.childNodes[1];\n\t\tconst pp = l('CMBotBar').firstChild.firstChild.childNodes[2];\n\t\tconst time = l('CMBotBar').firstChild.firstChild.childNodes[3];\n\n\t\tconst i = buildingName;\n\t\tconst header = type.appendChild(document.createElement('td'));\n\t\theader.appendChild(document.createTextNode(`${i.indexOf(' ') !== -1 ? i.substring(0, i.indexOf(' ')) : i} (`));\n\n\t\tconst span = header.appendChild(document.createElement('span'));\n\t\tspan.className = VariablesAndData_ColorTextPre + VariablesAndData_ColorBlue;\n\n\t\theader.appendChild(document.createTextNode(')'));\n\t\tbonus.appendChild(document.createElement('td'));\n\t\tpp.appendChild(document.createElement('td'));\n\t\ttime.appendChild(document.createElement('td'));\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/InfoBars/BottomBar.js\n/** Functions related to the Bottom Bar */\n\n\n\n\n\n\n/**\n * This function creates the bottom bar and appends it to l('wrapper')\n */\nfunction CreateBotBar() {\n\tconst BotBar = document.createElement('div');\n\tBotBar.id = 'CMBotBar';\n\tBotBar.style.height = '69px';\n\tBotBar.style.width = '100%';\n\tBotBar.style.position = 'absolute';\n\tBotBar.style.display = 'none';\n\tBotBar.style.backgroundColor = '#262224';\n\tBotBar.style.backgroundImage = 'linear-gradient(to bottom, #4d4548, #000000)';\n\tBotBar.style.borderTop = '1px solid black';\n\tBotBar.style.overflow = 'auto';\n\tBotBar.style.textShadow = '-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black';\n\n\tconst table = BotBar.appendChild(document.createElement('table'));\n\ttable.style.width = '100%';\n\ttable.style.textAlign = 'center';\n\ttable.style.whiteSpace = 'nowrap';\n\tconst tbody = table.appendChild(document.createElement('tbody'));\n\n\tconst firstCol = function (text, color) {\n\t\tconst td = document.createElement('td');\n\t\ttd.style.textAlign = 'right';\n\t\ttd.className = VariablesAndData_ColorTextPre + color;\n\t\ttd.textContent = text;\n\t\treturn td;\n\t};\n\tconst type = tbody.appendChild(document.createElement('tr'));\n\ttype.style.fontWeight = 'bold';\n\ttype.appendChild(firstCol(`CM ${VersionMajor}.${VersionMinor}`, VariablesAndData_ColorYellow));\n\tconst bonus = tbody.appendChild(document.createElement('tr'));\n\tbonus.appendChild(firstCol('Bonus Income', VariablesAndData_ColorBlue));\n\tconst pp = tbody.appendChild(document.createElement('tr'));\n\tpp.appendChild(firstCol('Payback Period', VariablesAndData_ColorBlue));\n\tconst time = tbody.appendChild(document.createElement('tr'));\n\ttime.appendChild(firstCol('Time Left', VariablesAndData_ColorBlue));\n\n\tfor (const i of Object.keys(Game.Objects)) {\n\t\tCreateBotBarBuildingColumn(i);\n\t}\n\n\tl('wrapper').appendChild(BotBar);\n}\n\n/**\n * This function updates the bonus-, pp-, and time-rows in the the bottom bar\n */\nfunction UpdateBotBar() {\n\tif (CM.Options.BotBar === 1 && CM.Cache.Objects1 && Game.buyMode === 1) {\n\t\tlet count = 0;\n\t\tfor (const i of Object.keys(CM.Cache.Objects1)) {\n\t\t\tlet target = `Objects${Game.buyBulk}`;\n\t\t\tif (Game.buyMode === 1) {\n\t\t\t\tCM.Disp.LastTargetBotBar = target;\n\t\t\t} else {\n\t\t\t\ttarget = CM.Disp.LastTargetBotBar;\n\t\t\t}\n\t\t\tcount++;\n\t\t\tl('BotBar').firstChild.firstChild.childNodes[0].childNodes[count].childNodes[1].textContent = Game.Objects[i].amount;\n\t\t\tl('BotBar').firstChild.firstChild.childNodes[1].childNodes[count].textContent = Beautify(CM.Cache[target][i].bonus, 2);\n\t\t\tl('BotBar').firstChild.firstChild.childNodes[2].childNodes[count].className = ColorTextPre + CM.Cache[target][i].color;\n\t\t\tl('BotBar').firstChild.firstChild.childNodes[2].childNodes[count].textContent = Beautify(CM.Cache[target][i].pp, 2);\n\t\t\tconst timeColor = GetTimeColor((Game.Objects[i].bulkPrice - (Game.cookies + CM.Disp.GetWrinkConfigBank())) / CM.Disp.GetCPS());\n\t\t\tl('BotBar').firstChild.firstChild.childNodes[3].childNodes[count].className = ColorTextPre + timeColor.color;\n\t\t\tif (timeColor.text === 'Done!' && Game.cookies < Game.Objects[i].bulkPrice) {\n\t\t\t\tl('BotBar').firstChild.firstChild.childNodes[3].childNodes[count].textContent = `${timeColor.text} (with Wrink)`;\n\t\t\t} else l('BotBar').firstChild.firstChild.childNodes[3].childNodes[count].textContent = timeColor.text;\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/InfoBars/TimerBar.js\n/** Functions related to the Timer Bar */\n\n\n\n\n/**\n * This function creates the TimerBar and appends it to l('wrapper')\n */\nfunction TimerBar_CreateTimerBar() {\n\tconst TimerBar = document.createElement('div');\n\tTimerBar.id = 'CMTimerBar';\n\tTimerBar.style.position = 'absolute';\n\tTimerBar.style.display = 'none';\n\tTimerBar.style.height = '0px';\n\tTimerBar.style.fontSize = '10px';\n\tTimerBar.style.fontWeight = 'bold';\n\tTimerBar.style.backgroundColor = 'black';\n\n\t// Create standard Golden Cookie bar\n\tconst CMTimerBarGC = TimerBar_CreateTimerBar('CMTimerBarGC',\n\t\t'Next Cookie',\n\t\t[{ id: 'CMTimerBarGCMinBar', color: VariablesAndData_ColorGray }, { id: 'CMTimerBarGCBar', color: VariablesAndData_ColorPurple }]);\n\tTimerBar.appendChild(CMTimerBarGC);\n\n\t// Create standard Reindeer bar\n\tconst CMTimerBarRen = TimerBar_CreateTimerBar('CMTimerBarRen',\n\t\t'Next Reindeer',\n\t\t[{ id: 'CMTimerBarRenMinBar', color: VariablesAndData_ColorGray }, { id: 'CMTimerBarRenBar', color: ColorOrange }]);\n\tTimerBar.appendChild(CMTimerBarRen);\n\n\tl('wrapper').appendChild(TimerBar);\n}\n\n/**\n * This function updates indivudual timers in the timer bar\n */\nfunction UpdateTimerBar() {\n\tif (CM.Options.TimerBar === 1) {\n\t\t// label width: 113, timer width: 30, div margin: 20\n\t\tconst maxWidthTwoBar = l('TimerBar').offsetWidth - 163;\n\t\t// label width: 113, div margin: 20, calculate timer width at runtime\n\t\tconst maxWidthOneBar = l('TimerBar').offsetWidth - 133;\n\t\tlet numberOfTimers = 0;\n\n\t\t// Regulates visibility of Golden Cookie timer\n\t\tif (Game.shimmerTypes.golden.spawned === 0 && !Game.Has('Golden switch [off]')) {\n\t\t\tl('CMTimerBarGC').style.display = '';\n\t\t\tl('CMTimerBarGCMinBar').style.width = `${Math.round(Math.max(0, Game.shimmerTypes.golden.minTime - Game.shimmerTypes.golden.time) * maxWidthTwoBar / Game.shimmerTypes.golden.maxTime)}px`;\n\t\t\tif (CM.Options.TimerBarOverlay >= 1) l('CMTimerBarGCMinBar').textContent = Math.ceil((Game.shimmerTypes.golden.minTime - Game.shimmerTypes.golden.time) / Game.fps);\n\t\t\telse l('CMTimerBarGCMinBar').textContent = '';\n\t\t\tif (Game.shimmerTypes.golden.minTime === Game.shimmerTypes.golden.maxTime) {\n\t\t\t\tl('CMTimerBarGCMinBar').style.borderTopRightRadius = '10px';\n\t\t\t\tl('CMTimerBarGCMinBar').style.borderBottomRightRadius = '10px';\n\t\t\t} else {\n\t\t\t\tl('CMTimerBarGCMinBar').style.borderTopRightRadius = '';\n\t\t\t\tl('CMTimerBarGCMinBar').style.borderBottomRightRadius = '';\n\t\t\t}\n\t\t\tl('CMTimerBarGCBar').style.width = `${Math.round(Math.min(Game.shimmerTypes.golden.maxTime - Game.shimmerTypes.golden.minTime, Game.shimmerTypes.golden.maxTime - Game.shimmerTypes.golden.time) * maxWidthTwoBar / Game.shimmerTypes.golden.maxTime)}px`;\n\t\t\tif (CM.Options.TimerBarOverlay >= 1) l('CMTimerBarGCBar').textContent = Math.ceil(Math.min(Game.shimmerTypes.golden.maxTime - Game.shimmerTypes.golden.minTime, Game.shimmerTypes.golden.maxTime - Game.shimmerTypes.golden.time) / Game.fps);\n\t\t\telse l('CMTimerBarGCBar').textContent = '';\n\t\t\tl('CMTimerBarGCTime').textContent = Math.ceil((Game.shimmerTypes.golden.maxTime - Game.shimmerTypes.golden.time) / Game.fps);\n\t\t\tnumberOfTimers++;\n\t\t} else l('CMTimerBarGC').style.display = 'none';\n\n\t\t// Regulates visibility of Reindeer timer\n\t\tif (Game.season === 'christmas' && Game.shimmerTypes.reindeer.spawned === 0) {\n\t\t\tl('CMTimerBarRen').style.display = '';\n\t\t\tl('CMTimerBarRenMinBar').style.width = `${Math.round(Math.max(0, Game.shimmerTypes.reindeer.minTime - Game.shimmerTypes.reindeer.time) * maxWidthTwoBar / Game.shimmerTypes.reindeer.maxTime)}px`;\n\t\t\tif (CM.Options.TimerBarOverlay >= 1) l('CMTimerBarRenMinBar').textContent = Math.ceil((Game.shimmerTypes.reindeer.minTime - Game.shimmerTypes.reindeer.time) / Game.fps);\n\t\t\telse l('CMTimerBarRenMinBar').textContent = '';\n\t\t\tl('CMTimerBarRenBar').style.width = `${Math.round(Math.min(Game.shimmerTypes.reindeer.maxTime - Game.shimmerTypes.reindeer.minTime, Game.shimmerTypes.reindeer.maxTime - Game.shimmerTypes.reindeer.time) * maxWidthTwoBar / Game.shimmerTypes.reindeer.maxTime)}px`;\n\t\t\tif (CM.Options.TimerBarOverlay >= 1) l('CMTimerBarRenBar').textContent = Math.ceil(Math.min(Game.shimmerTypes.reindeer.maxTime - Game.shimmerTypes.reindeer.minTime, Game.shimmerTypes.reindeer.maxTime - Game.shimmerTypes.reindeer.time) / Game.fps);\n\t\t\telse l('CMTimerBarRenBar').textContent = '';\n\t\t\tl('CMTimerBarRenTime').textContent = Math.ceil((Game.shimmerTypes.reindeer.maxTime - Game.shimmerTypes.reindeer.time) / Game.fps);\n\t\t\tnumberOfTimers++;\n\t\t} else {\n\t\t\tl('CMTimerBarRen').style.display = 'none';\n\t\t}\n\n\t\t// On every frame all buff-timers are deleted and re-created\n\t\tconst BuffTimerBars = {};\n\t\tfor (const i of Object.keys(Game.buffs)) {\n\t\t\tif (Game.buffs[i]) {\n\t\t\t\tconst timer = TimerBar_CreateTimerBar(Game.buffs[i].name, Game.buffs[i].name, [{ id: `${Game.buffs[i].name}Bar` }]);\n\t\t\t\ttimer.style.display = '';\n\t\t\t\tlet classColor = '';\n\t\t\t\t// Gives specific timers specific colors\n\t\t\t\tif (typeof CM.Disp.buffColors[Game.buffs[i].name] !== 'undefined') {\n\t\t\t\t\tclassColor = CM.Disp.buffColors[Game.buffs[i].name];\n\t\t\t\t} else classColor = ColorPurple;\n\t\t\t\ttimer.lastChild.children[1].className = ColorBackPre + classColor;\n\t\t\t\ttimer.lastChild.children[1].style.color = 'black';\n\t\t\t\tif (CM.Options.TimerBarOverlay === 2) timer.lastChild.children[1].textContent = `${Math.round(100 * (Game.buffs[i].time / Game.buffs[i].maxTime))}%`;\n\t\t\t\telse timer.lastChild.children[1].textContent = '';\n\t\t\t\ttimer.lastChild.children[1].style.width = `${Math.round(Game.buffs[i].time * (maxWidthOneBar - Math.ceil(Game.buffs[i].time / Game.fps).toString().length * 8) / Game.buffs[i].maxTime)}px`;\n\t\t\t\ttimer.lastChild.children[2].textContent = Math.ceil(Game.buffs[i].time / Game.fps);\n\t\t\t\tnumberOfTimers++;\n\t\t\t\tBuffTimerBars[Game.buffs[i].name] = timer;\n\t\t\t}\n\t\t}\n\t\tfor (const i of Object.keys(BuffTimerBars)) {\n\t\t\tl('TimerBar').appendChild(BuffTimerBars[i]);\n\t\t}\n\n\t\tif (numberOfTimers !== 0) {\n\t\t\tl('TimerBar').style.height = `${numberOfTimers * 12 + 2}px`;\n\t\t}\n\t\tif (CM.Disp.LastNumberOfTimers !== numberOfTimers) {\n\t\t\tCM.Disp.LastNumberOfTimers = numberOfTimers;\n\t\t\tUpdateBotTimerBarPosition();\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/HelperFunctions/PopWrinklers.js\n/**\n * This function pops all normal wrinklers\n * It is called by a click of the 'pop all' button created by CM.Disp.AddMenuStats()\n */\nfunction PopAllNormalWrinklers() {\n\tfor (const i of Object.keys(Game.wrinklers)) {\n\t\tif (Game.wrinklers[i].sucked > 0 && Game.wrinklers[i].type === 0) {\n\t\t\tGame.wrinklers[i].hp = 0;\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Initialization/CreateWrinklerButton.js\n\n\n\n/**\n * This function creates two objects at the bottom of the left column that allowing popping of wrinklers\n */\nfunction CreateWrinklerButtons() {\n\tconst popAllA = document.createElement('a');\n\tpopAllA.id = 'PopAllNormalWrinklerButton';\n\tpopAllA.textContent = 'Pop All Normal';\n\tpopAllA.className = 'option';\n\tpopAllA.onclick = function () { PopAllNormalWrinklers(); };\n\tl('sectionLeftExtra').children[0].append(popAllA);\n\tconst popFattestA = document.createElement('a');\n\tpopFattestA.id = 'PopFattestWrinklerButton';\n\tpopFattestA.textContent = 'Pop Single Fattest';\n\tpopFattestA.className = 'option';\n\tpopFattestA.onclick = function () { if (WrinklersFattest[1] !== null) Game.wrinklers[WrinklersFattest[1]].hp = 0; };\n\tl('sectionLeftExtra').children[0].append(popFattestA);\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Initialization/CssArea.js\n\n\n/**\n * This function creates a CSS style that stores certain standard CSS classes used by CookieMonster\n\n */\nfunction CreateCssArea() {\n\tDispCSS = document.createElement('style');\n\tDispCSS.type = 'text/css';\n\n\tdocument.head.appendChild(DispCSS);\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Initialization/UpdateBuildingUpgradeStyle.js\n/**\n * This function updates the style of the building and upgrade sections to make these sortable\n */\nfunction UpdateBuildingUpgradeStyle() {\n\tl('products').style.display = 'grid';\n\tl('storeBulk').style.gridRow = '1/1';\n\n\tl('upgrades').style.display = 'flex';\n\tl('upgrades').style['flex-wrap'] = 'wrap';\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Initialization/WhiteScreen.js\n/**\n * This function creates a white square over the full screen and appends it to l('wrapper')\n */\nfunction CreateWhiteScreen() {\n\tconst WhiteScreen = document.createElement('div');\n\tWhiteScreen.id = 'CMWhiteScreen';\n\tWhiteScreen.style.width = '100%';\n\tWhiteScreen.style.height = '100%';\n\tWhiteScreen.style.backgroundColor = 'white';\n\tWhiteScreen.style.display = 'none';\n\tWhiteScreen.style.zIndex = '9999999999';\n\tWhiteScreen.style.position = 'absolute';\n\tl('wrapper').appendChild(WhiteScreen);\n}\n\n;// CONCATENATED MODULE: ./src/Disp/TabTitle/FavIcon.js\n/**\n * This function creates the Favicon, it is called by CM.Main.DelayInit()\n */\nfunction CreateFavicon() {\n\tconst Favicon = document.createElement('link');\n\tFavicon.id = 'CMFavicon';\n\tFavicon.rel = 'shortcut icon';\n\tFavicon.href = 'https://orteil.dashnet.org/cookieclicker/favicon.ico';\n\tdocument.getElementsByTagName('head')[0].appendChild(Favicon);\n}\n\n/**\n * This function updates the Favicon depending on whether a Golden Cookie has spawned\n * By relying on CM.Cache.spawnedGoldenShimmer it only changes for non-user spawned cookie\n */\nfunction UpdateFavicon() {\n\tif (CM.Options.Favicon === 1 && CM.Main.lastGoldenCookieState > 0) {\n\t\tif (CM.Cache.spawnedGoldenShimmer.wrath) l('CMFavicon').href = 'https://aktanusa.github.io/CookieMonster/favicon/wrathCookie.ico';\n\t\telse l('CMFavicon').href = 'https://aktanusa.github.io/CookieMonster/favicon/goldenCookie.ico';\n\t} else l('CMFavicon').href = 'https://orteil.dashnet.org/cookieclicker/favicon.ico';\n}\n;// CONCATENATED MODULE: ./src/Disp/Tooltips/CreateTooltip.js\n\n\n/** Creates various sections of tooltips */\n\n/**\n * This function appends the sections for Bonus Income, PP and Time left (to achiev) to the tooltip-object\n * The actual data is added by the Update-functions themselves\n * @param\t{object}\ttooltip\t\tObject of a TooltipBox, normally created by a call to CM.Disp.TooltipCreateTooltipBox()\n */\nfunction TooltipCreateCalculationSection(tooltip) {\n\ttooltip.appendChild(TooltipCreateHeader('Bonus Income'));\n\tconst income = document.createElement('div');\n\tincome.style.marginBottom = '4px';\n\tincome.style.color = 'white';\n\tincome.id = 'CMTooltipIncome';\n\ttooltip.appendChild(income);\n\n\ttooltip.appendChild(TooltipCreateHeader('Bonus Cookies per Click'));\n\ttooltip.lastChild.style.display = 'none';\n\tconst click = document.createElement('div');\n\tclick.style.marginBottom = '4px';\n\tclick.style.color = 'white';\n\tclick.style.display = 'none';\n\tclick.id = 'CMTooltipCookiePerClick';\n\ttooltip.appendChild(click);\n\n\ttooltip.appendChild(TooltipCreateHeader('Payback Period'));\n\tconst pp = document.createElement('div');\n\tpp.style.marginBottom = '4px';\n\tpp.id = 'CMTooltipPP';\n\ttooltip.appendChild(pp);\n\n\ttooltip.appendChild(TooltipCreateHeader('Time Left'));\n\tconst time = document.createElement('div');\n\ttime.id = 'CMTooltipTime';\n\ttooltip.appendChild(time);\n\n\tif (CM.Disp.tooltipType === 'b') {\n\t\ttooltip.appendChild(TooltipCreateHeader('Production left till next achievement'));\n\t\ttooltip.lastChild.id = 'CMTooltipProductionHeader'; // Assign a id in order to hid when no achiev's are left\n\t\tconst production = document.createElement('div');\n\t\tproduction.id = 'CMTooltipProduction';\n\t\ttooltip.appendChild(production);\n\t}\n}\n\n/**\n * This function creates a tooltipBox object which contains all CookieMonster added tooltip information.\n * @returns {object}\tdiv\t\tAn object containing the stylized box\n */\nfunction CreateTooltip_TooltipCreateTooltipBox() {\n\tl('tooltip').firstChild.style.paddingBottom = '4px'; // Sets padding on base-tooltip\n\tconst tooltipBox = document.createElement('div');\n\ttooltipBox.style.border = '1px solid';\n\ttooltipBox.style.padding = '4px';\n\ttooltipBox.style.margin = '0px -4px';\n\ttooltipBox.id = 'CMTooltipBorder';\n\ttooltipBox.className = ColorTextPre + ColorGray;\n\treturn tooltipBox;\n}\n\n/**\n * This function creates a header object for tooltips.\n * @param\t{string}\ttext\tTitle of header\n * @returns {object}\tdiv\t\tAn object containing the stylized header\n */\nfunction TooltipCreateHeader(text) {\n\tconst div = document.createElement('div');\n\tdiv.style.fontWeight = 'bold';\n\tdiv.id = `${text}Title`;\n\tdiv.className = ColorTextPre + ColorBlue;\n\tdiv.textContent = text;\n\treturn div;\n}\n\n/**\n * This function creates the tooltip objectm for warnings\n * The object is also removed by CM.Disp.UpdateTooltipWarnings() when type is 's' or 'g'\n * @returns {object}\tTooltipWarn\tThe Warnings-tooltip object\n */\nfunction TooltipCreateWarningSection() {\n\tconst TooltipWarn = document.createElement('div');\n\tTooltipWarn.style.position = 'absolute';\n\tTooltipWarn.style.display = 'block';\n\tTooltipWarn.style.left = 'auto';\n\tTooltipWarn.style.bottom = 'auto';\n\tTooltipWarn.id = 'CMDispTooltipWarningParent';\n\n\tconst create = function (boxId, color, labelTextFront, labelTextBack, deficitId) {\n\t\tconst box = document.createElement('div');\n\t\tbox.id = boxId;\n\t\tbox.style.display = 'none';\n\t\tbox.style.transition = 'opacity 0.1s ease-out';\n\t\tbox.className = ColorBorderPre + color;\n\t\tbox.style.padding = '2px';\n\t\tbox.style.background = '#000 url(img/darkNoise.png)';\n\t\tconst labelDiv = document.createElement('div');\n\t\tbox.appendChild(labelDiv);\n\t\tconst labelSpan = document.createElement('span');\n\t\tlabelSpan.className = ColorTextPre + color;\n\t\tlabelSpan.style.fontWeight = 'bold';\n\t\tlabelSpan.textContent = labelTextFront;\n\t\tlabelDiv.appendChild(labelSpan);\n\t\tlabelDiv.appendChild(document.createTextNode(labelTextBack));\n\t\tconst deficitDiv = document.createElement('div');\n\t\tbox.appendChild(deficitDiv);\n\t\tconst deficitSpan = document.createElement('span');\n\t\tdeficitSpan.id = deficitId;\n\t\tdeficitDiv.appendChild(document.createTextNode('Deficit: '));\n\t\tdeficitDiv.appendChild(deficitSpan);\n\t\treturn box;\n\t};\n\n\tTooltipWarn.appendChild(create('CMDispTooltipWarnLucky', ColorRed, 'Warning: ', 'Purchase of this item will put you under the number of Cookies required for \"Lucky!\"', 'CMDispTooltipWarnLuckyText'));\n\tTooltipWarn.firstChild.style.marginBottom = '4px';\n\tTooltipWarn.appendChild(create('CMDispTooltipWarnLuckyFrenzy', ColorYellow, 'Warning: ', 'Purchase of this item will put you under the number of Cookies required for \"Lucky!\" (Frenzy)', 'CMDispTooltipWarnLuckyFrenzyText'));\n\tTooltipWarn.lastChild.style.marginBottom = '4px';\n\tTooltipWarn.appendChild(create('CMDispTooltipWarnConjure', ColorPurple, 'Warning: ', 'Purchase of this item will put you under the number of Cookies required for \"Conjure Baked Goods\"', 'CMDispTooltipWarnConjureText'));\n\tTooltipWarn.lastChild.style.marginBottom = '4px';\n\tTooltipWarn.appendChild(create('CMDispTooltipWarnConjureFrenzy', ColorPurple, 'Warning: ', 'Purchase of this item will put you under the number of Cookies required for \"Conjure Baked Goods\" (Frenzy)', 'CMDispTooltipWarnConjureFrenzyText'));\n\tTooltipWarn.lastChild.style.marginBottom = '4px';\n\tTooltipWarn.appendChild(create('CMDispTooltipWarnEdifice', ColorPurple, 'Warning: ', 'Purchase of this item will put you under the number of Cookies needed for \"Spontaneous Edifice\" to possibly give you your most expensive building\"', 'CMDispTooltipWarnEdificeText'));\n\tTooltipWarn.lastChild.style.marginBottom = '4px';\n\tTooltipWarn.appendChild(create('CMDispTooltipWarnUser', ColorRed, 'Warning: ', `Purchase of this item will put you under the number of Cookies equal to ${CM.Options.ToolWarnUser} seconds of CPS`, 'CMDispTooltipWarnUserText'));\n\n\treturn TooltipWarn;\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Tooltips/UpdateTooltips.js\n\n\n\n/** Functions that update specific types of tooltips  */\n\n/**\n * This function adds extra info to the Building tooltips\n */\nfunction Building() {\n\tif (CM.Options.TooltipBuildUpgrade === 1 && Game.buyMode === 1) {\n\t\tconst tooltipBox = l('CMTooltipBorder');\n\t\tCreate.TooltipCreateCalculationSection(tooltipBox);\n\n\t\tlet target = `Objects${Game.buyBulk}`;\n\t\tif (Game.buyMode === 1) {\n\t\t\tCM.Disp.LastTargetTooltipBuilding = target;\n\t\t} else {\n\t\t\ttarget = CM.Disp.LastTargetTooltipBuilding;\n\t\t}\n\n\t\tCM.Disp.TooltipPrice = Game.Objects[CM.Disp.tooltipName].bulkPrice;\n\t\tCM.Disp.TooltipBonusIncome = CM.Cache[target][CM.Disp.tooltipName].bonus;\n\n\t\tif (CM.Options.TooltipBuildUpgrade === 1 && Game.buyMode === 1) {\n\t\t\tl('CMTooltipIncome').textContent = Beautify(CM.Disp.TooltipBonusIncome, 2);\n\t\t\tconst increase = Math.round(CM.Disp.TooltipBonusIncome / Game.cookiesPs * 10000);\n\t\t\tif (Number.isFinite(increase) && increase !== 0) {\n\t\t\t\tl('CMTooltipIncome').textContent += ` (${increase / 100}% of income)`;\n\t\t\t}\n\t\t\tl('CMTooltipBorder').className = CM.Disp.colorTextPre + CM.Cache[target][CM.Disp.tooltipName].color;\n\t\t\tl('CMTooltipPP').textContent = Beautify(CM.Cache[target][CM.Disp.tooltipName].pp, 2);\n\t\t\tl('CMTooltipPP').className = CM.Disp.colorTextPre + CM.Cache[target][CM.Disp.tooltipName].color;\n\t\t\tconst timeColor = BeautifyFuncs.GetTimeColor((CM.Disp.TooltipPrice - (Game.cookies + CM.Disp.GetWrinkConfigBank())) / CM.Disp.GetCPS());\n\t\t\tl('CMTooltipTime').textContent = timeColor.text;\n\t\t\tif (timeColor.text === 'Done!' && Game.cookies < CM.Cache[target][CM.Disp.tooltipName].price) {\n\t\t\t\tl('CMTooltipTime').textContent = `${timeColor.text} (with Wrink)`;\n\t\t\t} else l('CMTooltipTime').textContent = timeColor.text;\n\t\t\tl('CMTooltipTime').className = CM.Disp.colorTextPre + timeColor.color;\n\t\t}\n\n\t\t// Add \"production left till next achievement\"-bar\n\t\tl('CMTooltipProductionHeader').style.display = 'none';\n\t\tl('CMTooltipTime').style.marginBottom = '0px';\n\t\tfor (const i of Object.keys(Game.Objects[CM.Disp.tooltipName].productionAchievs)) {\n\t\t\tif (!Game.HasAchiev(Game.Objects[CM.Disp.tooltipName].productionAchievs[i].achiev.name)) {\n\t\t\t\tconst nextProductionAchiev = Game.Objects[CM.Disp.tooltipName].productionAchievs[i];\n\t\t\t\tl('CMTooltipTime').style.marginBottom = '4px';\n\t\t\t\tl('CMTooltipProductionHeader').style.display = '';\n\t\t\t\tl('CMTooltipProduction').className = `ProdAchievement${CM.Disp.tooltipName}`;\n\t\t\t\tl('CMTooltipProduction').textContent = Beautify(nextProductionAchiev.pow - CM.Sim.Objects[CM.Disp.tooltipName].totalCookies, 15);\n\t\t\t\tl('CMTooltipProduction').style.color = 'white';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else l('CMTooltipArea').style.display = 'none';\n}\n\n/**\n * This function adds extra info to the Upgrade tooltips\n */\nfunction Upgrade() {\n\tconst tooltipBox = l('CMTooltipBorder');\n\tCreate.TooltipCreateCalculationSection(tooltipBox);\n\n\tCM.Disp.TooltipBonusIncome = CM.Cache.Upgrades[Game.UpgradesInStore[CM.Disp.tooltipName].name].bonus;\n\tCM.Disp.TooltipPrice = Game.Upgrades[Game.UpgradesInStore[CM.Disp.tooltipName].name].getPrice();\n\tCM.Disp.TooltipBonusMouse = CM.Cache.Upgrades[Game.UpgradesInStore[CM.Disp.tooltipName].name].bonusMouse;\n\n\tif (CM.Options.TooltipBuildUpgrade === 1) {\n\t\tl('CMTooltipIncome').textContent = Beautify(CM.Disp.TooltipBonusIncome, 2);\n\t\tconst increase = Math.round(CM.Disp.TooltipBonusIncome / Game.cookiesPs * 10000);\n\t\t// Don't display certain parts of tooltip if not applicable\n\t\tif (l('CMTooltipIncome').textContent === '0' && (CM.Disp.tooltipType === 'b' || CM.Disp.tooltipType === 'u')) {\n\t\t\tl('Bonus IncomeTitle').style.display = 'none';\n\t\t\tl('CMTooltipIncome').style.display = 'none';\n\t\t\tl('Payback PeriodTitle').style.display = 'none';\n\t\t\tl('CMTooltipPP').style.display = 'none';\n\t\t} else {\n\t\t\tif (Number.isFinite(increase) && increase !== 0) {\n\t\t\t\tl('CMTooltipIncome').textContent += ` (${increase / 100}% of income)`;\n\t\t\t}\n\t\t\tl('CMTooltipBorder').className = CM.Disp.colorTextPre + CM.Cache.Upgrades[Game.UpgradesInStore[CM.Disp.tooltipName].name].color;\n\t\t\t// If clicking power upgrade\n\t\t\tif (CM.Disp.TooltipBonusMouse) {\n\t\t\t\tl('CMTooltipCookiePerClick').textContent = Beautify(CM.Disp.TooltipBonusMouse);\n\t\t\t\tl('CMTooltipCookiePerClick').style.display = 'block';\n\t\t\t\tl('CMTooltipCookiePerClick').previousSibling.style.display = 'block';\n\t\t\t}\n\t\t\t// If only a clicking power upgrade change PP to click-based period\n\t\t\tif (CM.Disp.TooltipBonusIncome === 0 && CM.Disp.TooltipBonusMouse) {\n\t\t\t\tl('CMTooltipPP').textContent = `${Beautify(CM.Disp.TooltipPrice / CM.Disp.TooltipBonusMouse)} Clicks`;\n\t\t\t\tl('CMTooltipPP').style.color = 'white';\n\t\t\t} else {\n\t\t\t\tl('CMTooltipPP').textContent = Beautify(CM.Cache.Upgrades[Game.UpgradesInStore[CM.Disp.tooltipName].name].pp, 2);\n\t\t\t\tl('CMTooltipPP').className = CM.Disp.colorTextPre + CM.Cache.Upgrades[Game.UpgradesInStore[CM.Disp.tooltipName].name].color;\n\t\t\t}\n\t\t}\n\t\tconst timeColor = BeautifyFuncs.GetTimeColor((CM.Disp.TooltipPrice - (Game.cookies + CM.Disp.GetWrinkConfigBank())) / CM.Disp.GetCPS());\n\t\tl('CMTooltipTime').textContent = timeColor.text;\n\t\tif (timeColor.text === 'Done!' && Game.cookies < Game.UpgradesInStore[CM.Disp.tooltipName].getPrice()) {\n\t\t\tl('CMTooltipTime').textContent = `${timeColor.text} (with Wrink)`;\n\t\t} else l('CMTooltipTime').textContent = timeColor.text;\n\t\tl('CMTooltipTime').className = CM.Disp.colorTextPre + timeColor.color;\n\n\t\t// Add extra info to Chocolate egg tooltip\n\t\tif (Game.UpgradesInStore[CM.Disp.tooltipName].name === 'Chocolate egg') {\n\t\t\tl('CMTooltipBorder').lastChild.style.marginBottom = '4px';\n\t\t\tl('CMTooltipBorder').appendChild(Create.TooltipCreateHeader('Cookies to be gained (Currently/Max)'));\n\t\t\tconst chocolate = document.createElement('div');\n\t\t\tchocolate.style.color = 'white';\n\t\t\tchocolate.textContent = `${BeautifyFuncs.Beautify(Game.cookies * 0.05)} / ${BeautifyFuncs.Beautify(CM.Cache.lastChoEgg)}`;\n\t\t\tl('CMTooltipBorder').appendChild(chocolate);\n\t\t}\n\t} else l('CMTooltipArea').style.display = 'none';\n}\n\n/**\n * This function adds extra info to the Sugar Lump tooltip\n * It adds to the additional information to l('CMTooltipArea')\n */\nfunction SugarLump() {\n\tif (CM.Options.TooltipLump === 1) {\n\t\tconst tooltipBox = l('CMTooltipBorder');\n\n\t\ttooltipBox.appendChild(Create.TooltipCreateHeader('Current Sugar Lump'));\n\n\t\tconst lumpType = document.createElement('div');\n\t\tlumpType.id = 'CMTooltipTime';\n\t\ttooltipBox.appendChild(lumpType);\n\t\tconst lumpColor = CM.Disp.GetLumpColor(Game.lumpCurrentType);\n\t\tlumpType.textContent = lumpColor.text;\n\t\tlumpType.className = CM.Disp.colorTextPre + lumpColor.color;\n\t} else l('CMTooltipArea').style.display = 'none';\n}\n\n/**\n * This function adds extra info to the Grimoire tooltips\n * It adds to the additional information to l('CMTooltipArea')\n */\nfunction Grimoire() {\n\tconst minigame = Game.Objects['Wizard tower'].minigame;\n\tconst spellCost = minigame.getSpellCost(minigame.spellsById[CM.Disp.tooltipName]);\n\n\tif (CM.Options.TooltipGrim === 1 && spellCost <= minigame.magicM) {\n\t\tconst tooltipBox = l('CMTooltipBorder');\n\n\t\t// Time left till enough magic for spell\n\t\ttooltipBox.appendChild(Create.TooltipCreateHeader('Time Left'));\n\t\tconst time = document.createElement('div');\n\t\ttime.id = 'CMTooltipTime';\n\t\ttooltipBox.appendChild(time);\n\t\tconst timeColor = BeautifyFuncs.GetTimeColor(CM.Disp.CalculateGrimoireRefillTime(minigame.magic, minigame.magicM, spellCost));\n\t\ttime.textContent = timeColor.text;\n\t\ttime.className = CM.Disp.colorTextPre + timeColor.color;\n\n\t\t// Time left untill magic spent is recovered\n\t\tif (spellCost <= minigame.magic) {\n\t\t\ttooltipBox.appendChild(Create.TooltipCreateHeader('Recover Time'));\n\t\t\tconst recover = document.createElement('div');\n\t\t\trecover.id = 'CMTooltipRecover';\n\t\t\ttooltipBox.appendChild(recover);\n\t\t\tconst recoverColor = BeautifyFuncs.GetTimeColor(CM.Disp.CalculateGrimoireRefillTime(Math.max(0, minigame.magic - spellCost), minigame.magicM, minigame.magic));\n\t\t\trecover.textContent = recoverColor.text;\n\t\t\trecover.className = CM.Disp.colorTextPre + recoverColor.color;\n\t\t}\n\n\t\t// Extra information on cookies gained when spell is Conjure Baked Goods (Name === 0)\n\t\tif (CM.Disp.tooltipName === '0') {\n\t\t\ttooltipBox.appendChild(Create.TooltipCreateHeader('Cookies to be gained/lost'));\n\t\t\tconst conjure = document.createElement('div');\n\t\t\tconjure.id = 'x';\n\t\t\ttooltipBox.appendChild(conjure);\n\t\t\tconst reward = document.createElement('span');\n\t\t\treward.style.color = '#33FF00';\n\t\t\treward.textContent = Beautify(Math.min((Game.cookies + CM.Disp.GetWrinkConfigBank()) * 0.15, CM.Cache.NoGoldSwitchCookiesPS * 60 * 30), 2);\n\t\t\tconjure.appendChild(reward);\n\t\t\tconst seperator = document.createElement('span');\n\t\t\tseperator.textContent = ' / ';\n\t\t\tconjure.appendChild(seperator);\n\t\t\tconst loss = document.createElement('span');\n\t\t\tloss.style.color = 'red';\n\t\t\tloss.textContent = Beautify((CM.Cache.NoGoldSwitchCookiesPS * 60 * 15), 2);\n\t\t\tconjure.appendChild(loss);\n\t\t}\n\n\t\tl('CMTooltipArea').appendChild(tooltipBox);\n\t} else l('CMTooltipArea').style.display = 'none';\n}\n\n/**\n * This function adds extra info to the Garden plots tooltips\n * It adds to the additional information to l('CMTooltipArea')\n */\nfunction GardenPlots() {\n\tconst minigame = Game.Objects.Farm.minigame;\n\tif (CM.Options.TooltipPlots && minigame.plot[CM.Disp.tooltipName[1]][CM.Disp.tooltipName[0]][0] !== 0) {\n\t\tconst mature = minigame.plot[CM.Disp.tooltipName[1]][CM.Disp.tooltipName[0]][1] > minigame.plantsById[minigame.plot[CM.Disp.tooltipName[1]][CM.Disp.tooltipName[0]][0] - 1].matureBase;\n\t\tconst plantName = minigame.plantsById[minigame.plot[CM.Disp.tooltipName[1]][CM.Disp.tooltipName[0]][0] - 1].name;\n\t\tl('CMTooltipBorder').appendChild(Create.TooltipCreateHeader('Reward (Current / Maximum)'));\n\t\tconst reward = document.createElement('div');\n\t\treward.id = 'CMTooltipPlantReward';\n\t\tl('CMTooltipBorder').appendChild(reward);\n\t\tif (plantName === 'Bakeberry') {\n\t\t\tl('CMTooltipPlantReward').textContent = `${mature ? BeautifyFuncs.Beautify(Math.min(Game.cookies * 0.03, Game.cookiesPs * 60 * 30)) : '0'} / ${BeautifyFuncs.Beautify(Game.cookiesPs * 60 * 30)}`;\n\t\t} else if (plantName === 'Chocoroot' || plantName === 'White chocoroot') {\n\t\t\tl('CMTooltipPlantReward').textContent = `${mature ? BeautifyFuncs.Beautify(Math.min(Game.cookies * 0.03, Game.cookiesPs * 60 * 3)) : '0'} / ${BeautifyFuncs.Beautify(Game.cookiesPs * 60 * 3)}`;\n\t\t} else if (plantName === 'Queenbeet') {\n\t\t\tl('CMTooltipPlantReward').textContent = `${mature ? BeautifyFuncs.Beautify(Math.min(Game.cookies * 0.04, Game.cookiesPs * 60 * 60)) : '0'} / ${BeautifyFuncs.Beautify(Game.cookiesPs * 60 * 60)}`;\n\t\t} else if (plantName === 'Duketater') {\n\t\t\tl('CMTooltipPlantReward').textContent = `${mature ? BeautifyFuncs.Beautify(Math.min(Game.cookies * 0.08, Game.cookiesPs * 60 * 120)) : '0'} / ${BeautifyFuncs.Beautify(Game.cookiesPs * 60 * 120)}`;\n\t\t} else l('CMTooltipArea').style.display = 'none';\n\t} else l('CMTooltipArea').style.display = 'none';\n}\n\n/**\n * This function adds extra info to the Garden Harvest All tooltip\n * It is called when the Harvest All tooltip is created or refreshed by CM.Disp.UpdateTooltip()\n * It adds to the additional information to l('CMTooltipArea')\n */\nfunction HarvestAll() {\n\tconst minigame = Game.Objects.Farm.minigame;\n\tif (CM.Options.TooltipLump) {\n\t\tl('CMTooltipBorder').appendChild(Create.TooltipCreateHeader('Cookies gained from harvesting:'));\n\t\tlet totalGain = 0;\n\t\tlet mortal = 0;\n\t\tif (Game.keys[16] && Game.keys[17]) mortal = 1;\n\t\tfor (let y = 0; y < 6; y++) {\n\t\t\tfor (let x = 0; x < 6; x++) {\n\t\t\t\tif (minigame.plot[y][x][0] >= 1) {\n\t\t\t\t\tconst tile = minigame.plot[y][x];\n\t\t\t\t\tconst me = minigame.plantsById[tile[0] - 1];\n\t\t\t\t\tconst plantName = me.name;\n\n\t\t\t\t\tlet count = true;\n\t\t\t\t\tif (mortal && me.immortal) count = false;\n\t\t\t\t\tif (tile[1] < me.matureBase) count = false;\n\t\t\t\t\tif (count && plantName === 'Bakeberry') {\n\t\t\t\t\t\ttotalGain += Math.min(Game.cookies * 0.03, Game.cookiesPs * 60 * 30);\n\t\t\t\t\t} else if (count && plantName === 'Chocoroot' || plantName === 'White chocoroot') {\n\t\t\t\t\t\ttotalGain += Math.min(Game.cookies * 0.03, Game.cookiesPs * 60 * 3);\n\t\t\t\t\t} else if (count && plantName === 'Queenbeet') {\n\t\t\t\t\t\ttotalGain += Math.min(Game.cookies * 0.04, Game.cookiesPs * 60 * 60);\n\t\t\t\t\t} else if (count && plantName === 'Duketater') {\n\t\t\t\t\t\ttotalGain += Math.min(Game.cookies * 0.08, Game.cookiesPs * 60 * 120);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tl('CMTooltipBorder').appendChild(document.createTextNode(BeautifyFuncs.Beautify(totalGain)));\n\t} else l('CMTooltipArea').style.display = 'none';\n}\n\n/**\n * This function updates the warnings section of the building and upgrade tooltips\n * It is called by CM.Disp.UpdateTooltip()\n */\nfunction Warnings() {\n\tif (CM.Disp.tooltipType === 'b' || CM.Disp.tooltipType === 'u') {\n\t\tif (document.getElementById('CMDispTooltipWarningParent') === null) {\n\t\t\tl('tooltipAnchor').appendChild(Create.TooltipCreateWarningSection());\n\t\t\tCM.Disp.ToggleToolWarnPos();\n\t\t}\n\n\t\tif (CM.Options.ToolWarnPos === 0) l('CMDispTooltipWarningParent').style.right = '0px';\n\t\telse l('CMDispTooltipWarningParent').style.top = `${l('tooltip').offsetHeight}px`;\n\n\t\tl('CMDispTooltipWarningParent').style.width = `${l('tooltip').offsetWidth - 6}px`;\n\n\t\tconst amount = (Game.cookies + CM.Disp.GetWrinkConfigBank()) - CM.Disp.TooltipPrice;\n\t\tconst bonusIncomeUsed = CM.Options.ToolWarnBon ? CM.Disp.TooltipBonusIncome : 0;\n\t\tlet limitLucky = CM.Cache.Lucky;\n\t\tif (CM.Options.ToolWarnBon === 1) {\n\t\t\tlet bonusNoFren = CM.Disp.TooltipBonusIncome;\n\t\t\tbonusNoFren /= CM.Cache.getCPSBuffMult();\n\t\t\tlimitLucky += ((bonusNoFren * 60 * 15) / 0.15);\n\t\t}\n\n\t\tif (CM.Options.ToolWarnLucky === 1) {\n\t\t\tif (amount < limitLucky && (CM.Disp.tooltipType !== 'b' || Game.buyMode === 1)) {\n\t\t\t\tl('CMDispTooltipWarnLucky').style.display = '';\n\t\t\t\tl('CMDispTooltipWarnLuckyText').textContent = `${Beautify(limitLucky - amount)} (${BeautifyFuncs.FormatTime((limitLucky - amount) / (CM.Disp.GetCPS() + bonusIncomeUsed))})`;\n\t\t\t} else l('CMDispTooltipWarnLucky').style.display = 'none';\n\t\t} else l('CMDispTooltipWarnLucky').style.display = 'none';\n\n\t\tif (CM.Options.ToolWarnLuckyFrenzy === 1) {\n\t\t\tconst limitLuckyFrenzy = limitLucky * 7;\n\t\t\tif (amount < limitLuckyFrenzy && (CM.Disp.tooltipType !== 'b' || Game.buyMode === 1)) {\n\t\t\t\tl('CMDispTooltipWarnLuckyFrenzy').style.display = '';\n\t\t\t\tl('CMDispTooltipWarnLuckyFrenzyText').textContent = `${Beautify(limitLuckyFrenzy - amount)} (${BeautifyFuncs.FormatTime((limitLuckyFrenzy - amount) / (CM.Disp.GetCPS() + bonusIncomeUsed))})`;\n\t\t\t} else l('CMDispTooltipWarnLuckyFrenzy').style.display = 'none';\n\t\t} else l('CMDispTooltipWarnLuckyFrenzy').style.display = 'none';\n\n\t\tif (CM.Options.ToolWarnConjure === 1) {\n\t\t\tconst limitConjure = limitLucky * 2;\n\t\t\tif ((amount < limitConjure) && (CM.Disp.tooltipType !== 'b' || Game.buyMode === 1)) {\n\t\t\t\tl('CMDispTooltipWarnConjure').style.display = '';\n\t\t\t\tl('CMDispTooltipWarnConjureText').textContent = `${Beautify(limitConjure - amount)} (${BeautifyFuncs.FormatTime((limitConjure - amount) / (CM.Disp.GetCPS() + bonusIncomeUsed))})`;\n\t\t\t} else l('CMDispTooltipWarnConjure').style.display = 'none';\n\t\t} else l('CMDispTooltipWarnConjure').style.display = 'none';\n\n\t\tif (CM.Options.ToolWarnConjureFrenzy === 1) {\n\t\t\tconst limitConjureFrenzy = limitLucky * 2 * 7;\n\t\t\tif ((amount < limitConjureFrenzy) && (CM.Disp.tooltipType !== 'b' || Game.buyMode === 1)) {\n\t\t\t\tl('CMDispTooltipWarnConjureFrenzy').style.display = '';\n\t\t\t\tl('CMDispTooltipWarnConjureFrenzyText').textContent = `${Beautify(limitConjureFrenzy - amount)} (${BeautifyFuncs.FormatTime((limitConjureFrenzy - amount) / (CM.Disp.GetCPS() + bonusIncomeUsed))})`;\n\t\t\t} else l('CMDispTooltipWarnConjureFrenzy').style.display = 'none';\n\t\t} else l('CMDispTooltipWarnConjureFrenzy').style.display = 'none';\n\n\t\tif (CM.Options.ToolWarnEdifice === 1 && Game.Objects['Wizard tower'].minigameLoaded) {\n\t\t\tif (CM.Cache.Edifice && amount < CM.Cache.Edifice && (CM.Disp.tooltipType !== 'b' || Game.buyMode === 1)) {\n\t\t\t\tl('CMDispTooltipWarnEdifice').style.display = '';\n\t\t\t\tl('CMDispTooltipWarnEdificeText').textContent = `${Beautify(CM.Cache.Edifice - amount)} (${BeautifyFuncs.FormatTime((CM.Cache.Edifice - amount) / (CM.Disp.GetCPS() + bonusIncomeUsed))})`;\n\t\t\t} else l('CMDispTooltipWarnEdifice').style.display = 'none';\n\t\t} else l('CMDispTooltipWarnEdifice').style.display = 'none';\n\n\t\tif (CM.Options.ToolWarnUser > 0) {\n\t\t\tif (amount < CM.Options.ToolWarnUser * CM.Disp.GetCPS() && (CM.Disp.tooltipType !== 'b' || Game.buyMode === 1)) {\n\t\t\t\tl('CMDispTooltipWarnUser').style.display = '';\n\t\t\t\t// Need to update tooltip text dynamically\n\t\t\t\tl('CMDispTooltipWarnUser').children[0].textContent = `Purchase of this item will put you under the number of Cookies equal to ${CM.Options.ToolWarnUser} seconds of CPS`;\n\t\t\t\tl('CMDispTooltipWarnUserText').textContent = `${Beautify(CM.Options.ToolWarnUser * CM.Disp.GetCPS() - amount)} (${BeautifyFuncs.FormatTime((CM.Options.ToolWarnUser * CM.Disp.GetCPS() - amount) / (CM.Disp.GetCPS() + bonusIncomeUsed))})`;\n\t\t\t} else l('CMDispTooltipWarnUser').style.display = 'none';\n\t\t} else l('CMDispTooltipWarnUser').style.display = 'none';\n\t} else if (l('CMDispTooltipWarningParent') !== null) {\n\t\tl('CMDispTooltipWarningParent').remove();\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Tooltips/Tooltip.js\n\n\n\n/** All general functions related to creating and updating tooltips */\n\n/**\n * This function creates some very basic tooltips, (e.g., the tooltips in the stats page)\n * The tooltips are created with CM.Disp[placeholder].appendChild(desc)\n * @param\t{string}\tplaceholder\tThe name used to later refer and spawn the tooltip\n * @param\t{string}\ttext\t\tThe text of the tooltip\n * @param\t{string}\tminWidth\tThe minimum width of the tooltip\n */\nfunction CreateSimpleTooltip(placeholder, text, minWidth) {\n\tconst Tooltip = document.createElement('div');\n\tTooltip.id = placeholder;\n\tconst desc = document.createElement('div');\n\tdesc.style.minWidth = minWidth;\n\tdesc.style.marginBottom = '4px';\n\tconst div = document.createElement('div');\n\tdiv.style.textAlign = 'left';\n\tdiv.textContent = text;\n\tdesc.appendChild(div);\n\tTooltip.appendChild(desc);\n}\n\n/**\n * This function enhance the standard tooltips by creating and changing l('tooltip')\n * The function is called by .onmouseover events that have replaced original code to use CM.Disp.Tooltip()\n * @param\t{string}\ttype\t\t\t\t\tType of tooltip (b, u, s or g)\n * @param\t{string}\tname\t\t\t\t\tName of the object/item the tooltip relates to\n * @returns {string}\tl('tooltip').innerHTML\tThe HTML of the l('tooltip')-object\n */\nfunction CreateTooltip(type, name) {\n\tif (type === 'b') { // Buildings\n\t\tl('tooltip').innerHTML = Game.Objects[name].tooltip();\n\t\t// Adds amortization info to the list of info per building\n\t\tif (CM.Options.TooltipAmor === 1) {\n\t\t\tconst buildPrice = CM.Sim.BuildingGetPrice(Game.Objects[name], Game.Objects[name].basePrice, 0, Game.Objects[name].free, Game.Objects[name].amount);\n\t\t\tconst amortizeAmount = buildPrice - Game.Objects[name].totalCookies;\n\t\t\tif (amortizeAmount > 0) {\n\t\t\t\tl('tooltip').innerHTML = l('tooltip').innerHTML\n\t\t\t\t\t.split('so far</div>')\n\t\t\t\t\t.join(`so far<br/>&bull; <b>${Beautify(amortizeAmount)}</b> ${Math.floor(amortizeAmount) === 1 ? 'cookie' : 'cookies'} left to amortize (${CM.Disp.GetTimeColor((buildPrice - Game.Objects[name].totalCookies) / (Game.Objects[name].storedTotalCps * Game.globalCpsMult)).text})</div>`);\n\t\t\t}\n\t\t}\n\t\tif (Game.buyMode === -1) {\n\t\t\t/*\n             * Fix sell price displayed in the object tooltip.\n             *\n             * The buildings sell price displayed by the game itself (without any mod) is incorrect.\n             * The following line of code fixes this issue, and can be safely removed when the game gets fixed.\n             *\n             * This issue is extensively detailed here: https://github.com/Aktanusa/CookieMonster/issues/359#issuecomment-735658262\n             */\n\t\t\tl('tooltip').innerHTML = l('tooltip').innerHTML.split(Beautify(Game.Objects[name].bulkPrice)).join(Beautify(CM.Sim.BuildingSell(Game.Objects[name], Game.Objects[name].basePrice, Game.Objects[name].amount, Game.Objects[name].free, Game.buyBulk, 1)));\n\t\t}\n\t} else if (type === 'u') { // Upgrades\n\t\tif (!Game.UpgradesInStore[name]) return '';\n\t\tl('tooltip').innerHTML = Game.crateTooltip(Game.UpgradesInStore[name], 'store');\n\t} else if (type === 's') l('tooltip').innerHTML = Game.lumpTooltip(); // Sugar Lumps\n\telse if (type === 'g') l('tooltip').innerHTML = Game.Objects['Wizard tower'].minigame.spellTooltip(name)(); // Grimoire\n\telse if (type === 'p') l('tooltip').innerHTML = Game.ObjectsById[2].minigame.tileTooltip(name[0], name[1])(); // Garden plots\n\telse if (type === 'ha') l('tooltip').innerHTML = Game.ObjectsById[2].minigame.toolTooltip(1)(); // Harvest all button in garden\n\n\t// Adds area for extra tooltip-sections\n\tif ((type === 'b' && Game.buyMode === 1) || type === 'u' || type === 's' || type === 'g' || (type === 'p' && !Game.keys[16]) || type === 'ha') {\n\t\tconst area = document.createElement('div');\n\t\tarea.id = 'CMTooltipArea';\n\t\tl('tooltip').appendChild(area);\n\t}\n\n\t// Sets global variables used by CM.Disp.UpdateTooltip()\n\tCM.Disp.tooltipType = type;\n\tCM.Disp.tooltipName = name;\n\n\tUpdateTooltips();\n\n\treturn l('tooltip').innerHTML;\n}\n\n/**\n * This function updates the sections of the tooltips created by CookieMonster\n */\nfunction UpdateTooltips() {\n\tCM.Sim.CopyData();\n\tif (l('tooltipAnchor').style.display !== 'none' && l('CMTooltipArea')) {\n\t\tl('CMTooltipArea').innerHTML = '';\n\t\tconst tooltipBox = TooltipCreateTooltipBox();\n\t\tl('CMTooltipArea').appendChild(tooltipBox);\n\n\t\tif (CM.Disp.tooltipType === 'b') {\n\t\t\tUpdateTooltip.Building();\n\t\t} else if (CM.Disp.tooltipType === 'u') {\n\t\t\tUpdateTooltip.Upgrade();\n\t\t} else if (CM.Disp.tooltipType === 's') {\n\t\t\tUpdateTooltip.SugarLump();\n\t\t} else if (CM.Disp.tooltipType === 'g') {\n\t\t\tUpdateTooltip.Grimoire();\n\t\t} else if (CM.Disp.tooltipType === 'p') {\n\t\t\tUpdateTooltip.GardenPlots();\n\t\t} else if (CM.Disp.tooltipType === 'ha') {\n\t\t\tUpdateTooltip.HarvestAll();\n\t\t}\n\t\tUpdateTooltip.Warnings();\n\t} else if (l('CMTooltipArea') === null) { // Remove warnings if its a basic tooltip\n\t\tif (l('CMDispTooltipWarningParent') !== null) {\n\t\t\tl('CMDispTooltipWarningParent').remove();\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Sim/VariablesAndData.js\n/* eslint-disable prefer-const */\n/** All variables used by simulation functions */\n\nlet SimObjects = [];\nlet SimUpgrades = [];\nlet SimAchievements = [];\nlet SimUpgradesOwned;\nlet SimPledges;\nlet SimAchievementsOwned;\nlet SimHeavenlyPower;\nlet SimPrestige;\nlet SimDragonAura;\nlet SimDragonAura2;\nlet SimDoSims;\n\n/** Functions replaced to check Sim data */\nlet VariablesAndData_SimHas;\nlet SimHasAchiev;\nlet SimHasAura;\nlet SimGetHeavenlyMultiplier;\nlet SimAuraMult;\nlet SimEff;\nlet SimGetTieredCpsMult;\n\n;// CONCATENATED MODULE: ./src/Sim/CreateSimFunctions/ReplaceFunction.js\n\n\n/**\n * This functions helps create functions that check sim data\n * For example, instead of Game.Has, a function that has gone through CM.Sim.ReplaceFunction will use CM.Sim.Has()\n * Subsequently the function rather than checking Game.Upgrades, will check CM.Sim.Upgrades\n *\n * It is called by CM.Sim.ReplaceRelevantFunctions()\n * @param\t{function}\tfuncToBeReplaced\tFunction to be replaced\n * @returns {string}\t\t\t\t\t\tThe function in string form with only calls to CM.Sim\n */\nfunction ReplaceFunction(funcToBeReplaced) {\n\treturn funcToBeReplaced.toString()\n\t\t.split('Game.Upgrades[') // Include '[' to not replace Game.UpgradesByPool\n\t\t.join('CM.Sim.Upgrades[')\n\t\t.split('Game.Achievements')\n\t\t.join(SimAchievements)\n\t\t.split('Game.Has')\n\t\t.join(VariablesAndData_SimHas)\n\t\t.split('Game.dragonAura]')\n\t\t.join('CM.Sim.dragonAura]')\n\t\t.split('Game.dragonAura2]')\n\t\t.join('CM.Sim.dragonAura2]')\n\t\t.split('Game.auraMult')\n\t\t.join(SimAuraMult)\n\t\t.split('Game.hasGod')\n\t\t.join('CM.Sim.hasGod')\n\t\t.split('Game.effs') // Replaces code in the Pantheon minigame\n\t\t.join('CM.Sim.effs')\n\t\t.split('Game.Objects')\n\t\t.join(SimObjects)\n\t\t.split('Game.GetTieredCpsMult') // Replace in .cps of building objects\n\t\t.join(SimGetTieredCpsMult)\n\t\t.split('Game.eff') // Replace in .cps of building objects\n\t\t.join(SimEff);\n\t// .split('syn.buildingTie1.amount')\n\t// .join('CM.Sim.Objects[syn.buildingTie1.name].amount')\n\t// .split('syn.buildingTie2.amount')\n\t// .join('CM.Sim.Objects[syn.buildingTie2.name].amount')\n}\n\n;// CONCATENATED MODULE: ./src/Sim/CreateSimFunctions/CreateSimFunctions.js\n/* eslint-disable no-unused-vars */\n\n\n\n/**\n * This functions creates all functions by CM.Sim to check the current Sim Data instead of Game data\n * It follows naming of the vanilla functions\n */\nfunction CreateSimFunctions() {\n\tVariablesAndData_SimHas = new Function(`return ${ReplaceFunction(Game.Has)}`)();\n\tSimHasAchiev = new Function(`return ${ReplaceFunction(Game.HasAchiev)}`)();\n\tSimHasAura = new Function(`return ${ReplaceFunction(Game.hasAura)}`)();\n\tdebugger\n\tSimGetHeavenlyMultiplier = new Function(`return ${ReplaceFunction(Game.GetHeavenlyMultiplier)}`)();\n\tSimAuraMult = new Function(`return ${ReplaceFunction(Game.auraMult)}`)();\n\tSimEff = new Function(`return ${ReplaceFunction(Game.eff)}`)();\n\tSimGetTieredCpsMult = new Function(`return ${ReplaceFunction(Game.GetTieredCpsMult)}`)();\n}\n\n;// CONCATENATED MODULE: ./src/Cache/Dragon/CacheDragonAuras.js\n/* eslint-disable no-unused-vars */\n\n\n/**\n * This functions caches the currently selected Dragon Auras\n */\nfunction CacheDragonAuras() {\n\tCacheDragonAura = Game.dragonAura;\n\tCacheDragonAura2 = Game.dragonAura2;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/InitializeData/InitAchievement.js\n/**\n * This function constructs an object with the static properties of an achievement\n * @param\t{string}\tachievementName\tName of the Achievement\n * @returns {Object}\tyou\t\t\t\tThe static object\n */\nfunction InitAchievement(achievementName) {\n\tconst me = Game.Achievements[achievementName];\n\tconst you = {};\n\tyou.name = me.name;\n\treturn you;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/InitializeData/InitialBuildingData.js\n\n\n/**\n * This function constructs an object with the static properties of a building,\n * but with a 'cps' method changed to check sim data\n *\n * @param\t{string}\tbuildingName\tName of the building\n * @returns {Object}\tyou\t\t\t\tThe static object\n */\nfunction InitialBuildingData(buildingName) {\n\tconst me = Game.Objects[buildingName];\n\tconst you = {};\n\tyou.cps = new Function(`return ${ReplaceFunction(me.cps)}`)();\n\t// Below is needed for above eval, specifically for the GetTieredCpsMult function\n\tyou.baseCps = me.baseCps;\n\tyou.name = me.name;\n\tyou.tieredUpgrades = me.tieredUpgrades;\n\tyou.synergies = me.synergies;\n\tyou.fortune = me.fortune;\n\tyou.grandma = me.grandma;\n\tyou.baseCPS = me.baseCps;\n\tyou.id = me.id;\n\tyou.vanilla = me.vanilla;\n\treturn you;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/InitializeData/InitUpgrade.js\n\n\n/**\n * This function constructs an object with the static properties of an upgrade\n * @param\t{string}\tupgradeName\t\tName of the Upgrade\n * @returns {Object}\tyou\t\t\t\tThe static object\n */\nfunction InitUpgrade(upgradeName) {\n\tconst me = Game.Upgrades[upgradeName];\n\tconst you = {};\n\t// Some upgrades have a function for .power (notably the valentine cookies)\n\tyou.power = me.power;\n\tif (typeof (me.power) === 'function') {\n\t\tme.power = new Function(`return ${ReplaceFunction(me.power)}`)();\n\t}\n\tyou.pool = me.pool;\n\tyou.name = me.name;\n\treturn you;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/CopyData/CopyData.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n\n/**\n * This function copies all relevant data and therefore sets a new iteration of the \"sim data\"\n * It is called at the start of any function that simulates certain behaviour or actions\n */\nfunction CopyData() {\n\t// Other variables\n\tSimUpgradesOwned = Game.UpgradesOwned;\n\tSimPledges = Game.pledges;\n\tSimAchievementsOwned = Game.AchievementsOwned;\n\tSimHeavenlyPower = Game.heavenlyPower;\n\tSimPrestige = Game.prestige;\n\n\t// Buildings\n\tfor (const i of Object.keys(Game.Objects)) {\n\t\tconst me = Game.Objects[i];\n\t\tlet you = SimObjects[i];\n\t\tif (you === undefined) { // New building!\n\t\t\tSimObjects[i] = InitialBuildingData(i);\n\t\t\tyou = SimObjects[i];\n\t\t\tCreateBotBarBuildingColumn(i); // Add new building to the bottom bar\n\t\t}\n\t\tyou.amount = me.amount;\n\t\tyou.level = me.level;\n\t\tyou.totalCookies = me.totalCookies;\n\t\tyou.basePrice = me.basePrice;\n\t\tyou.free = me.free;\n\t\tif (me.minigameLoaded) {\n\t\t\tyou.minigameLoaded = me.minigameLoaded;\n\t\t\tyou.minigame = me.minigame;\n\t\t}\n\t}\n\n\t// Upgrades\n\tfor (const i of Object.keys(Game.Upgrades)) {\n\t\tconst me = Game.Upgrades[i];\n\t\tlet you = SimUpgrades[i];\n\t\tif (you === undefined) {\n\t\t\tSimUpgrades[i] = InitUpgrade(i);\n\t\t\tyou = SimUpgrades[i];\n\t\t}\n\t\tyou.bought = me.bought;\n\t}\n\n\t// Achievements\n\tfor (const i of Object.keys(Game.Achievements)) {\n\t\tconst me = Game.Achievements[i];\n\t\tlet you = SimAchievements[i];\n\t\tif (you === undefined) {\n\t\t\tSimAchievements[i] = InitAchievement(i);\n\t\t\tyou = SimAchievements[i];\n\t\t}\n\t\tyou.won = me.won;\n\t}\n\n\t// Auras\n\tCacheDragonAuras();\n\tSimDragonAura = CacheDragonAura;\n\tSimDragonAura2 = CacheDragonAura2;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/InitializeData/InitData.js\n/** Functions used to create static objects of Buildings, Upgrades and Achievements */\n\n\n\n\n\n\n\n/**\n * This function creates static objects for Buildings, Upgrades and Achievements\n */\nfunction InitData() {\n\t// Buildings\n\tSimObjects = [];\n\tfor (const i of Object.keys(Game.Objects)) {\n\t\tSimObjects[i] = InitialBuildingData(i);\n\t}\n\n\t// Upgrades\n\tSimUpgrades = [];\n\tfor (const i of Object.keys(Game.Upgrades)) {\n\t\tSimUpgrades[i] = InitUpgrade(i);\n\t}\n\n\t// Achievements\n\tSimAchievements = [];\n\tfor (const i of Object.keys(Game.Achievements)) {\n\t\tSimAchievements[i] = InitAchievement(i);\n\t}\n\tCopyData();\n}\n\n;// CONCATENATED MODULE: ./src/Main/VariablesAndData.js\n/* eslint-disable prefer-const */\n\nlet LastModCount;\nlet TooltipBuildBackup = (/* unused pure expression or super */ null && ([]));\nlet TooltipLumpBackup;\nlet TooltipGrimoireBackup = (/* unused pure expression or super */ null && ([]));\nlet BackupGrimoireLaunch;\nlet BackupGrimoireLaunchMod;\nlet BackupGrimoireDraw;\nlet HasReplaceNativeGrimoireLaunch;\nlet HasReplaceNativeGrimoireDraw;\nlet LoadMinigames;\n\n;// CONCATENATED MODULE: ./src/Main/Initialization.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Initialization loop of Cookie Monster\n */\nfunction InitializeCookieMonster() {\n\t// Create CM.Sim functions\n\tCreateSimFunctions();\n\n\tInitData();\n\tCacheStatsCookies();\n\n\t// Stored to check if we need to re-initiliaze data\n\tLastModCount = Object.keys(Game.mods).length;\n\n\t// Creating visual elements\n\tCreateCssArea();\n\tCreateBotBar();\n\tTimerBar_CreateTimerBar();\n\tCreateUpgradeBar();\n\tCreateWhiteScreen();\n\tCreateFavicon();\n\tfor (const i of Object.keys(TooltipText)) {\n\t\tCreateSimpleTooltip(TooltipText[i][0], TooltipText[i][1], TooltipText[i][2]);\n\t}\n\tCreateWrinklerButtons();\n\tUpdateBuildingUpgradeStyle();\n\t/**\n\tCM.Main.ReplaceTooltips();\n\tCM.Main.AddWrinklerAreaDetect();\n\n\t// Replace native functions\n\tCM.Main.ReplaceNative();\n\tCM.Main.ReplaceNativeGrimoire();\n\tGame.CalculateGains();\n\n\tCM.Config.LoadConfig(); // Must be after all things are created!\n\tCM.Disp.lastAscendState = Game.OnAscend;\n\n\tif (Game.prefs.popups) Game.Popup(`Cookie Monster version ${VersionMajor}.${VersionMinor} loaded!`);\n\telse Game.Notify(`Cookie Monster version ${VersionMajor}.${VersionMinor} loaded!`, '', '', 1, 1);\n\n\tGame.Win('Third-party');\n\t*/\n}\n\n;// CONCATENATED MODULE: ./src/InitSaveLoad/init.js\n\n\n\n/** Variable that shows if Cookie Moonster is initzializing */\nlet isInitializing = false;\n\n/**\n  * This creates a init function for the CM object. Per Game code/comments:\n  * \"this function is called as soon as the mod is registered\n  * declare hooks here\"\n  * It starts the further initialization of CookieMonster and registers hooks\n  */\nfunction init() {\n\tisInitializing = true;\n\tlet proceed = true;\n\tif (Game.version !== Number(VersionMajor)) {\n\t\tproceed = confirm(`Cookie Monster version ${VersionMajor}.${VersionMinor} is meant for Game version ${VersionMajor}.  Loading a different version may cause errors.  Do you still want to load Cookie Monster?`);\n\t}\n\tif (proceed) {\n\t\tInitializeCookieMonster();\n\t\t//Game.registerHook('draw', CM.Disp.Draw);\n\t\t//Game.registerHook('logic', CM.Main.Loop);\n\t\tisInitializing = false;\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/CookieMonster.js\n\n\nconst CookieMonster_CM = {\n\tinit: init,\n};\n\nGame.registerMod('CookieMonster', CookieMonster_CM);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///753\n")}},__webpack_exports__={};__webpack_modules__[753]()})();