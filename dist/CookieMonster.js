(()=>{"use strict";var __webpack_modules__={992:()=>{eval("\n;// CONCATENATED MODULE: ./src/Data/Moddata.js\n/** Data related directly to Cookie Monster */\n\nconst VersionMajor = '2.031';\nconst VersionMinor = '5';\n\n/** Information about Cookie Monster to be displayed in the info section */\nconst ModDescription = `<div class=\"listing\">\n <a href=\"https://github.com/Aktanusa/CookieMonster\" target=\"blank\">Cookie Monster</a>\n offers a wide range of tools and statistics to enhance your game experience.\n It is not a cheat interface â€“ although it does offer helpers for golden cookies and such, everything can be toggled off at will to only leave how much information you want.</br>\n Progess on new updates and all previous release notes can be found on the GitHub page linked above!</br>\n Please also report any bugs you may find over there!</br>\n </div>\n `;\n\n/** Latest releasenotes of Cookie Monster to be displayed in the info section */\nconst LatestReleaseNotes = `<div class=\"listing\">\n <b>The latest update (v 2.031.4) has introduced the following features:</b></br>\n - Added a changelog to the info tab and notification indicating a new version</br>\n - Warnings in tooltips are now based on the income after buying the upgrade</br>\n - A new warning and stat for Conjure Baked Goods in combination with Frenzy has been added</br>\n - User can now set a custom tooltip warning (\"x times cps\") in the settings</br>\n - Garden plots with plants that give cookies on harvest now display a tooltip with current and maximum reward</br>\n - The Harvest All button in the Garden now has a tooltip displaying the current reward </br>\n - The Ascend button can now display additional info (this can be turned off in the settings) </br>\n - The statistics page now displays the Heavenly Chips per second</br>\n - The statistics page now displays the CPS needed for the next level in Chain Cookies</br>\n - The statistics page now displays the cookies needed for optimal rewards for garden plants</br>\n - You can now set a Heavenly Chips target in the settings which will be counted down to in the statistics page</br>\n - The color picker in the settings has been updated to its latest version</br>\n - The overlay of seconds/percentage of timers is now toggle able and more readable</br>\n - You can now toggle to disable bulk-buying from buying less than the selected amount (i.e., buying 7 of a building by pressing the buy 10 when you don't have enough for 10)</br>\n - CookieMonster now uses the Modding API provided by the base game</br>\n - There is a new option that allows the decoupling of the base game volume setting and the volumes of sounds created by the mod</br>\n - The tab title now displays a \"!\" if a Golden Cookie or Reindeer can spawn</br>\n - PP calculation can now be set to: 1) Exclude the 1st, 2nd or 3rd most optimal building (if you never want to buy that it), 2) Always consider optimal buildings that cost below \"xx seconds of CPS\" (toggleable in the settings), 3) Ignore any building or upgrade that is not purchasable at the moment</br>\n </br>\n <b>This update fixes the following bugs:</b></br>\n - Minigames with enhanced tooltips will now also show these if the minigames were not loaded when CookieMonster was loaded</br>\n - Sound, Flashes and Notifications will no longer play when the mod is initializing</br>\n - The color picker should now update its display consistently</br>\n - Fixed some typo's</br>\n - Fixed a game breaking bug when the player had not purchased any upgrades</br>\n - Fixed a number of console errors thrown by CM</br>\n - Fixed the integration with mods that provide additional content, they should now no longer break CookieMonster</br>\n - The Timer bar will now disappear correctly when the Golden Switch has been activated</br>\n - Fixed errors in the calculation of the Chain Cookies and Wrinkler stats</br>\n - Fixed buy warnings showing incorrectly</br>\n </div>\n `;\n\n;// CONCATENATED MODULE: ./src/Config/VariablesAndData.js\n/* eslint-disable prefer-const */\n\nlet CMOptions = {};\nconst ConfigPrefix = 'CMConfig';\n\n;// CONCATENATED MODULE: ./src/Cache/VariablesAndData.js\n/* eslint-disable prefer-const */\n\nlet CacheDragonAura = 0;\nlet CacheDragonAura2 = 0;\nlet CacheLastDragonLevel = 0;\nlet CacheCostDragonUpgrade = 0;\nlet WrinklersTotal = 0;\nlet WrinklersNormal = 0;\nlet WrinklersFattest = [0, null];\nlet CacheLucky = 0;\nlet CacheLuckyReward = 0;\nlet CacheLuckyWrathReward = 0;\nlet CacheLuckyFrenzy = 0;\nlet CacheLuckyRewardFrenzy = 0;\nlet CacheLuckyWrathRewardFrenzy = 0;\nlet CacheConjure = 0;\nlet CacheConjureReward = 0;\nlet CacheEdifice = 0;\nlet CacheEdificeBuilding = 0;\nlet CacheNoGoldSwitchCookiesPS = 0;\nlet CacheDragonsFortuneMultAdjustment = 1;\nlet CacheGoldenCookiesMult = 1;\nlet CacheWrathCookiesMult = 1;\n\nlet CacheHCPerSecond = 0;\n\nlet CacheCentEgg = 0;\nlet CacheSeaSpec = 0;\nlet CacheLastChoEgg = 0;\n\nlet CacheObjects1 = {};\nlet CacheObjects10 = {};\nlet CacheObjects100 = {};\n\nlet CacheWrinklersTotal = 0;\nlet CacheWrinklersNormal = 0;\nlet CacheWrinklersFattest = [];\n\nlet CacheAvgCps = 0;\nlet CacheCurrWrinklerCPSMult = 0;\nlet CacheCurrWrinklerCount = 0;\n\nlet CacheUpgrades = {};\n\nlet CacheAverageClicks = {};\n\nlet CacheMissingUpgrades = {};\nlet CacheMissingUpgradesPrestige = {};\nlet CacheMissingUpgradesCookies = {};\n\nlet CacheChainRequired = 0;\nlet CacheChainRequiredNext = 0;\nlet CacheChainMaxReward = [];\nlet CacheChainWrathRequired = 0;\nlet CacheChainWrathRequiredNext = 0;\nlet CacheChainWrathMaxReward = [];\nlet CacheChainFrenzyRequired = 0;\nlet CacheChainFrenzyRequiredNext = 0;\nlet CacheChainFrenzyMaxReward = [];\nlet CacheChainFrenzyWrathRequired = 0;\nlet CacheChainFrenzyWrathRequiredNext = 0;\nlet CacheChainFrenzyWrathMaxReward = [];\n\nlet CacheRealCookiesEarned = 0;\nlet CacheAvgCPSWithChoEgg = 0;\n\nlet CacheSpawnedGoldenShimmer = {};\nlet CacheSeasonPopShimmer = {};\n\nlet CacheTimeTillNextPrestige = 0;\n\nlet CacheMinPP = 0;\nlet CacheMidPP = 0;\nlet CacheMaxPP = 0;\nlet CacheArrayOfPPs = [];\n\nlet CacheGoldenShimmersByID = {};\n\nlet CacheSellForChoEgg = 0;\n\nlet CookiesDiff;\nlet WrinkDiff;\nlet WrinkFattestDiff;\nlet ChoEggDiff;\nlet ClicksDiff;\nlet HeavenlyChipsDiff;\n\nlet CacheLastCPSCheck;\nlet CacheLastCookies;\nlet CacheLastWrinkCookies;\nlet CacheLastWrinkFattestCookies;\nlet CacheLastClicks;\n\nlet CacheAverageGainBank;\nlet CacheAverageGainWrink;\nlet CacheAverageGainWrinkFattest;\nlet CacheAverageGainChoEgg;\nlet CacheAverageCPS;\n\nlet CacheLastHeavenlyCheck;\nlet CacheLastHeavenlyChips;\n\nlet CacheDoRemakeBuildPrices;\n\nlet CacheHadBuildAura;\n\n;// CONCATENATED MODULE: ./src/Sim/VariablesAndData.js\n/* eslint-disable prefer-const */\n/** All variables used by simulation functions */\n\nlet SimObjects = [];\nlet SimUpgrades = [];\nlet SimAchievements = [];\nlet SimBuildingsOwned;\nlet SimUpgradesOwned;\nlet SimPledges;\nlet SimAchievementsOwned;\nlet SimHeavenlyPower;\nlet SimPrestige;\nlet SimDragonAura;\nlet SimDragonAura2;\nlet SimDoSims;\nlet SimEffs;\nlet SimDateCentury;\nlet SimDateAges;\nlet SimCookiesPs;\nlet SimCookiesPsRaw;\n\n;// CONCATENATED MODULE: ./src/Sim/ReplacedGameFunctions/SimAuraMult.js\n\n\n/**\n * This functions creates functions similarly to Game.auraMult but checks Sim Data instead of Game Data\n */\nfunction SimAuraMult(what) {\n\tlet n = 0;\n\tif (Game.dragonAuras[SimDragonAura].name === what || Game.dragonAuras[SimDragonAura2].name === what) n = 1;\n\tif (Game.dragonAuras[SimDragonAura].name === 'Reality Bending' || Game.dragonAuras[SimDragonAura2].name === 'Reality Bending') n += 0.1;\n\treturn n;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/ReplacedGameFunctions/SimGetSellMultiplier.js\n\n\n/**\n * This function calculates the sell multiplier based on current \"sim data\"\n * It is called by CM.Sim.BuildingSell()\n * @returns {number}\tgiveBack\tThe multiplier\n */\nfunction SimGetSellMultiplier() {\n\tlet giveBack = 0.25;\n\tgiveBack *= 1 + SimAuraMult('Earth Shatterer');\n\treturn giveBack;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/ReplacedGameFunctions/SimEff.js\n\n\n/**\n * This functions creates functions similarly to Game.Eff but checks Sim Data instead of Game Data\n */\nfunction SimEff(name, def) {\n\tif (typeof SimEffs[name] === 'undefined') {\n\t\treturn (typeof def === 'undefined' ? 1 : def);\n\t} else return SimEffs[name];\n}\n\n;// CONCATENATED MODULE: ./src/Sim/ReplacedGameFunctions/SimHas.js\n\n\n/**\n * This functions creates functions similarly to Game.Has but checks Sim Data instead of Game Data\n */\nfunction SimHas(what) {\n\tconst it = SimUpgrades[what];\n\tif (Game.ascensionMode === 1 && (it.pool === 'prestige' || it.tier === 'fortune')) return 0;\n\treturn (it ? it.bought : 0);\n}\n\n;// CONCATENATED MODULE: ./src/Sim/ReplacedGameFunctions/SimHasGod.js\n\n\n/**\n * This function checks for the current God level in the sim data\n * It functions similarly to Game.hasGod()\n * @param\t{string}\twhat\tName of the achievement\n */\nfunction SimHasGod(what) {\n\tif (Game.hasGod) {\n\t\tconst god = SimObjects.Temple.minigame.gods[what];\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\tif (SimObjects.Temple.minigame.slot[i] === god.id) {\n\t\t\t\treturn i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/ReplacedGameFunctions/SimModifyBuidlingPrice.js\n\n\n\n\n\n\n/**\n * This function calculates the sell price of a building based on current \"sim data\"\n * @param\t{string}\tbuilding\tName of the building\n * @param\t{number}\tprice\t\tCurrent price of building\n * @returns {number}\tprice\t\tThe modified building price\n */\nfunction SimModifyBuildingPrice(building, price) {\n\tif (SimHas('Season savings')) price *= 0.99;\n\tif (SimHas('Santa\\'s dominion')) price *= 0.99;\n\tif (SimHas('Faberge egg')) price *= 0.99;\n\tif (SimHas('Divine discount')) price *= 0.99;\n\tif (SimHas('Fortune #100')) price *= 0.99;\n\t// if (SimHasAura('Fierce Hoarder')) price *= 0.98;\n\tprice *= 1 - SimAuraMult('Fierce Hoarder') * 0.02;\n\tif (Game.hasBuff('Everything must go')) price *= 0.95;\n\tif (Game.hasBuff('Crafty pixies')) price *= 0.98;\n\tif (Game.hasBuff('Nasty goblins')) price *= 1.02;\n\tif (building.fortune && SimHas(building.fortune.name)) price *= 0.93;\n\tprice *= SimEff('buildingCost');\n\tif (SimObjects.Temple.minigameLoaded) {\n\t\tconst godLvl = SimHasGod('creation');\n\t\tif (godLvl === 1) price *= 0.93;\n\t\telse if (godLvl === 2) price *= 0.95;\n\t\telse if (godLvl === 3) price *= 0.98;\n\t}\n\treturn price;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/SimulationEvents/SellBuilding.js\n\n\n\n/**\n * This function calculates the cookies returned for selling a building\n * Base Game does not do this correctly\n * @param\t{string}\tbuild\t\tName of the building\n * @param\t{number}\tbasePrice\tBase Price of building\n * @param\t{number}\tstart\t\tStarting amount of building\n * @param\t{number}\tfree\t\tFree amount of building\n * @param\t{number}\tincrease\tIncrease of building\n * @param\t{number}\tnoSim\t\t1 of 0 depending on if function is called from CM.Sim\n * @returns {number}\tmoni\t\tTotal price gained\n */\nfunction BuildingSell(build, basePrice, start, free, amount, noSim) {\n\t// Calculate money gains from selling buildings\n\t// If noSim is set, use Game methods to compute price instead of Sim ones.\n\tnoSim = typeof noSim === 'undefined' ? 0 : noSim;\n\tlet moni = 0;\n\tif (amount === -1) amount = start;\n\tif (!amount) amount = Game.buyBulk;\n\tfor (let i = 0; i < amount; i++) {\n\t\tlet price = basePrice * Game.priceIncrease ** Math.max(0, start - free);\n\t\tprice = noSim ? Game.modifyBuildingPrice(build, price) : SimModifyBuildingPrice(build, price);\n\t\tprice = Math.ceil(price);\n\t\tconst giveBack = noSim ? build.getSellMultiplier() : SimGetSellMultiplier();\n\t\tprice = Math.floor(price * giveBack);\n\t\tif (start > 0) {\n\t\t\tmoni += price;\n\t\t\tstart--;\n\t\t}\n\t}\n\treturn moni;\n}\n\n;// CONCATENATED MODULE: ./src/Data/Scales.js\n/** Data related directly to the scales used by Cookie Monster */\n\n/** Array of abbreviations used in the \"Metric\" scale */\nconst metric = ['',\n\t'',\n\t'M',\n\t'G',\n\t'T',\n\t'P',\n\t'E',\n\t'Z',\n\t'Y',\n];\n\n/** Array of abbreviations used in the \"Short\" scale */\nconst shortScale = ['',\n\t'',\n\t'M',\n\t'B',\n\t'Tr',\n\t'Quadr',\n\t'Quint',\n\t'Sext',\n\t'Sept',\n\t'Oct',\n\t'Non',\n\t'Dec',\n\t'Undec',\n\t'Duodec',\n\t'Tredec',\n\t'Quattuordec',\n\t'Quindec',\n\t'Sexdec',\n\t'Septendec',\n\t'Octodec',\n\t'Novemdec',\n\t'Vigint',\n\t'Unvigint',\n\t'Duovigint',\n\t'Trevigint',\n\t'Quattuorvigint',\n];\n\n/** Array of abbreviations used in the \"Abbreviated Short\" scale */\nconst shortScaleAbbreviated = ['',\n\t'K',\n\t'M',\n\t'B',\n\t'T',\n\t'Qa',\n\t'Qi',\n\t'Sx',\n\t'Sp',\n\t'Oc',\n\t'No',\n\t'De',\n\t'UDe',\n\t'DDe',\n\t'TDe',\n\t'QaDe',\n\t'QiDe',\n\t'SxDe',\n\t'SpDe',\n\t'ODe',\n\t'NDe',\n\t'Vi',\n\t'UVi',\n\t'DVi',\n\t'TVi',\n\t'QaVi',\n\t'QiVi',\n\t'SxVi',\n\t'SpVi',\n\t'OVi',\n\t'NVi',\n\t'Tr',\n\t'UTr',\n\t'DTr',\n\t'TTr',\n\t'QaTr',\n\t'QiTr',\n\t'SxTr',\n\t'SpTr',\n\t'OTr',\n\t'NTr',\n\t'Qaa',\n\t'UQa',\n\t'DQa',\n\t'TQa',\n\t'QaQa',\n\t'QiQa',\n\t'SxQa',\n\t'SpQa',\n\t'OQa',\n\t'NQa',\n\t'Qia',\n\t'UQi',\n\t'DQi',\n\t'TQi',\n\t'QaQi',\n\t'QiQi',\n\t'SxQi',\n\t'SpQi',\n\t'OQi',\n\t'NQi',\n\t'Sxa',\n\t'USx',\n\t'DSx',\n\t'TSx',\n\t'QaSx',\n\t'QiSx',\n\t'SxSx',\n\t'SpSx',\n\t'OSx',\n\t'NSx',\n\t'Spa',\n\t'USp',\n\t'DSp',\n\t'TSp',\n\t'QaSp',\n\t'QiSp',\n\t'SxSp',\n\t'SpSp',\n\t'OSp',\n\t'NSp',\n\t'Oco',\n\t'UOc',\n\t'DOc',\n\t'TOc',\n\t'QaOc',\n\t'QiOc',\n\t'SxOc',\n\t'SpOc',\n\t'OOc',\n\t'NOc',\n\t'Noa',\n\t'UNo',\n\t'DNo',\n\t'TNo',\n\t'QaNo',\n\t'QiNo',\n\t'SxNo',\n\t'SpNo',\n\t'ONo',\n\t'NNo',\n\t'Ct',\n\t'UCt',\n];\n\n;// CONCATENATED MODULE: ./src/Main/VariablesAndData.js\n/* eslint-disable prefer-const */\n\nlet LastModCount;\nlet TooltipBuildBackup = [];\nlet TooltipLumpBackup;\nlet TooltipGrimoireBackup = [];\nlet TooltipUpgradeBackup = [];\nlet BackupGrimoireLaunch;\nlet BackupGrimoireLaunchMod;\nlet BackupGrimoireDraw;\nlet HasReplaceNativeGrimoireLaunch;\nlet HasReplaceNativeGrimoireDraw;\nlet LoadMinigames;\nlet BackupFunctions = {};\n\nlet LastSeasonPopupState;\nlet LastTickerFortuneState;\nlet LastGardenNextStep;\nlet LastGoldenCookieState;\nlet LastSpawnedGoldenCookieState;\nlet LastMagicBarFull;\nlet CurrSpawnedGoldenCookieState;\nlet LastWrinklerCount;\n\n;// CONCATENATED MODULE: ./src/Disp/VariablesAndData.js\n/* eslint-disable prefer-const */\n/**\n * Section: Variables used in Disp functions */\n\nlet DispCSS;\n\n/**\n * These are variables used to create DOM object names and id (e.g., 'CMTextTooltip)\n */\nconst ColorTextPre = 'CMText';\nconst ColorBackPre = 'CMBack';\nconst ColorBorderPre = 'CMBorder';\n\n/**\n * These are variables which can be set in the options by the user to standardize colours throughout CookieMonster\n */\nconst ColorBlue = 'Blue';\nconst ColorGreen = 'Green';\nconst ColorYellow = 'Yellow';\nconst ColorOrange = 'Orange';\nconst ColorRed = 'Red';\nconst ColorPurple = 'Purple';\nconst ColorGray = 'Gray';\nconst ColorPink = 'Pink';\nconst ColorBrown = 'Brown';\nconst Colors = [ColorGray, ColorBlue, ColorGreen, ColorYellow, ColorOrange, ColorRed, ColorPurple, ColorPink, ColorBrown];\n\n/**\n * This list is used to make some very basic tooltips.\n * It is used by CM.Main.DelayInit() in the call of CM.Disp.CreateSimpleTooltip()\n * @item\t{string}\tplaceholder\n * @item\t{string}\ttext\n * @item\t{string}\tminWidth\n */\nconst TooltipText = [\n\t['GoldCookTooltipPlaceholder', 'Calculated with Golden Switch off', '200px'],\n\t['GoldCookDragonsFortuneTooltipPlaceholder', 'Calculated with Golden Switch off and at least one golden cookie on-screen', '240px'],\n\t['PrestMaxTooltipPlaceholder', 'The MAX prestige is calculated with the cookies gained from popping all wrinklers with Skruuia god in Diamond slot, selling all stock market goods, selling all buildings with Earth Shatterer and Reality Bending auras, and buying Chocolate egg', '320px'],\n\t['NextPrestTooltipPlaceholder', 'Calculated with cookies gained from wrinklers and Chocolate egg', '200px'],\n\t['HeavenChipMaxTooltipPlaceholder', 'The MAX heavenly chips is calculated with the cookies gained from popping all wrinklers with Skruuia god in Diamond slot, selling all stock market goods, selling all buildings with Earth Shatterer and Reality Bending auras, and buying Chocolate egg', '330px'],\n\t['ResetTooltipPlaceholder', 'The bonus income you would get from new prestige levels unlocked at 100% of its potential and from ascension achievements if you have the same buildings/upgrades after reset', '370px'],\n\t['ChoEggTooltipPlaceholder', 'The amount of cookies you would get from popping all wrinklers with Skruuia god in Diamond slot, selling all stock market goods, selling all buildings with Earth Shatterer and Reality Bending auras, and then buying Chocolate egg', '300px'],\n\t['ChainNextLevelPlaceholder', 'Cheated cookies might break this formula', '250px'],\n];\n\n/**\n * These are variables used by the functions that create tooltips for wrinklers\n * See CM.Disp.CheckWrinklerTooltip(), CM.Disp.UpdateWrinklerTooltip() and CM.Main.AddWrinklerAreaDetect()\n */\nlet TooltipWrinklerArea = 0;\nlet TooltipWrinkler = -1;\n\n/**\n * This array is used to store whether a Wrinkler tooltip is being shown or not\n * [i] = 1 means tooltip is being shown, [i] = 0 means hidden\n * It is used by CM.Disp.CheckWrinklerTooltip() and CM.Main.AddWrinklerAreaDetect()\n */\nlet TooltipWrinklerBeingShown = [];\n\nlet CMLastAscendState;\nlet CMSayTime;\n\n/**\n * These are variables used to create various displays when the game is loaded on the \"sell all\" screen\n */\nlet LastTargetBotBar = 1;\nlet LastTargetBuildings = 1;\nlet LastTargetTooltipBuilding = 1;\n\n/**\n * These arrays are used in the stats page to show\n * average cookies per {CM.Disp.cookieTimes/CM.Disp.clickTimes} seconds\n */\nconst CookieTimes = [10, 15, 30, 60, 300, 600, 900, 1800];\nconst ClickTimes = [1, 5, 10, 15, 30];\n\n/**\n * This array is used to give certain timers specific colours\n */\nconst BuffColors = {\n\tFrenzy: ColorYellow, 'Dragon Harvest': ColorBrown, 'Elder frenzy': ColorGreen, Clot: ColorRed, 'Click frenzy': ColorBlue, Dragonflight: ColorPink,\n};\n\n/**\n * This array is used to track GC timers\n */\nlet GCTimers = {};\n\n/**\n * Used to store the number of cookies to be displayed in the tab-title\n */\nlet Title = '';\n\nlet TooltipPrice;\nlet TooltipBonusIncome;\nlet TooltipType;\nlet TooltipName;\nlet TooltipBonusMouse;\n\nlet LastAscendState;\nlet LastNumberOfTimers;\n\n;// CONCATENATED MODULE: ./src/Disp/BeautifyAndFormatting/BeautifyFormatting.js\n/** General functions to format or beautify strings */\n\n\n\n\n\n\n/**\n * This function returns formats number based on the Scale setting\n * @param\t{number}\tnum\t\tNumber to be beautified\n * @param \t{any}\t\tfloats \tUsed in some scenario's by CM.Backup.Beautify (Game's original function)\n * @param\t{number}\tforced\tUsed to force (type 3) in certains cases\n * @returns\t{string}\t\t\tFormatted number\n */\nfunction BeautifyFormatting_Beautify(num, floats, forced) {\n\tconst decimals = CMOptions.ScaleDecimals + 1;\n\tif (num === Infinity) {\n\t\treturn 'Infinity';\n\t} else if (typeof num === 'undefined') {\n\t\treturn '0';\n\t} else if (CMOptions.Scale === 0) {\n\t\treturn BackupFunctions.Beautify(num, floats);\n\t} else if (Number.isFinite(num)) {\n\t\tlet answer = '';\n\t\tif (num === 0) {\n\t\t\treturn num.toString();\n\t\t} else if (num > 0.001 && num < CMOptions.ScaleCutoff) {\n\t\t\tanswer = num.toFixed(2);\n\t\t\tif (CMOptions.ScaleSeparator) answer = answer.toLocaleString('nl');\n\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\tif (answer[answer.length - 1] === '0' || answer[answer.length - 1] === '.') answer = answer.slice(0, -1);\n\t\t\t}\n\t\t\treturn answer;\n\t\t} else if (CMOptions.Scale === 4 && !forced || forced === 4) { // Scientific notation, 123456789 => 1.235E+8\n\t\t\tanswer = num.toExponential(decimals).toString().replace('e', 'E');\n\t\t} else {\n\t\t\tconst exponential = num.toExponential().toString();\n\t\t\tconst AmountOfTenPowerThree = Math.floor(exponential.slice(exponential.indexOf('e') + 1) / 3);\n\t\t\tanswer = (num / Number(`1e${AmountOfTenPowerThree * 3}`)).toFixed(decimals);\n\t\t\t// answer is now \"xxx.xx\" (e.g., 123456789 would be 123.46)\n\t\t\tif (CMOptions.Scale === 1 && !forced || forced === 1) { // Metric scale, 123456789 => 123.457 M\n\t\t\t\tif (num >= 0.01 && num < Number(`1e${metric.length * 3}`)) {\n\t\t\t\t\tanswer += ` ${metric[AmountOfTenPowerThree]}`;\n\t\t\t\t} else answer = BeautifyFormatting_Beautify(num, 0, 4); // If number is too large or little, revert to scientific notation\n\t\t\t} else if (CMOptions.Scale === 2 && !forced || forced === 2) { // Short scale, 123456789 => 123.457 M\n\t\t\t\tif (num >= 0.01 && num < Number(`1e${shortScale.length * 3}`)) {\n\t\t\t\t\tanswer += ` ${shortScale[AmountOfTenPowerThree]}`;\n\t\t\t\t} else answer = BeautifyFormatting_Beautify(num, 0, 4); // If number is too large or little, revert to scientific notation\n\t\t\t} else if (CMOptions.Scale === 3 && !forced || forced === 3) { // Short scale, 123456789 => 123.457 M\n\t\t\t\tif (num >= 0.01 && num < Number(`1e${shortScaleAbbreviated.length * 3}`)) {\n\t\t\t\t\tanswer += ` ${shortScaleAbbreviated[AmountOfTenPowerThree]}`;\n\t\t\t\t} else answer = BeautifyFormatting_Beautify(num, 0, 4); // If number is too large or little, revert to scientific notation\n\t\t\t} else if (CMOptions.Scale === 5 && !forced || forced === 5) { // Engineering notation, 123456789 => 123.457E+6\n\t\t\t\tanswer += `E${AmountOfTenPowerThree * 3}`;\n\t\t\t}\n\t\t}\n\t\tif (answer === '') {\n\t\t\tconsole.log(`Could not beautify number with CM.Disp.Beautify: ${num}`);\n\t\t\tanswer = BackupFunctions.Beautify(num, floats);\n\t\t}\n\t\tif (CMOptions.ScaleSeparator) answer = answer.replace('.', ',');\n\t\treturn answer;\n\t} else {\n\t\tconsole.log(`Could not beautify number with CM.Disp.Beautify: ${num}`);\n\t\treturn BackupFunctions.Beautify(num, floats);\n\t}\n}\n\n/**\n * This function returns time as a string depending on TimeFormat setting\n * @param  \t{number} \ttime\t\tTime to be formatted\n * @param  \t{number}\tlongFormat \t1 or 0\n * @returns\t{string}\t\t\t\tFormatted time\n */\nfunction FormatTime(time, longFormat) {\n\tif (time === Infinity) return time;\n\ttime = Math.ceil(time);\n\tconst y = Math.floor(time / 31557600);\n\tconst d = Math.floor(time % 31557600 / 86400);\n\tconst h = Math.floor(time % 86400 / 3600);\n\tconst m = Math.floor(time % 3600 / 60);\n\tconst s = Math.floor(time % 60);\n\tlet str = '';\n\tif (CMOptions.TimeFormat) {\n\t\tif (time > 3155760000) return 'XX:XX:XX:XX:XX';\n\t\tstr += `${(y < 10 ? '0' : '') + y}:`;\n\t\tstr += `${(d < 10 ? '0' : '') + d}:`;\n\t\tstr += `${(h < 10 ? '0' : '') + h}:`;\n\t\tstr += `${(m < 10 ? '0' : '') + m}:`;\n\t\tstr += (s < 10 ? '0' : '') + s;\n\t} else {\n\t\tif (time > 777600000) return longFormat ? 'Over 9000 days!' : '>9000d';\n\t\tstr += (y > 0 ? `${y + (longFormat ? (y === 1 ? ' year' : ' years') : 'y')}, ` : '');\n\t\tstr += (d > 0 ? `${d + (longFormat ? (d === 1 ? ' day' : ' days') : 'd')}, ` : '');\n\t\tif (str.length > 0 || h > 0) str += `${h + (longFormat ? (h === 1 ? ' hour' : ' hours') : 'h')}, `;\n\t\tif (str.length > 0 || m > 0) str += `${m + (longFormat ? (m === 1 ? ' minute' : ' minutes') : 'm')}, `;\n\t\tstr += s + (longFormat ? (s === 1 ? ' second' : ' seconds') : 's');\n\t}\n\treturn str;\n}\n\n/**\n * This function returns the color to be used for time-strings\n * @param\t{number}\t\t\ttime\t\t\tTime to be coloured\n * @returns {{string, string}}\t{text, color}\tBoth the formatted time and color as strings in an array\n */\nfunction GetTimeColor(time) {\n\tlet color;\n\tlet text;\n\tif (time < 0) {\n\t\tif (CMOptions.TimeFormat) text = '00:00:00:00:00';\n\t\telse text = 'Done!';\n\t\tcolor = ColorGreen;\n\t} else {\n\t\ttext = FormatTime(time);\n\t\tif (time > 300) color = ColorRed;\n\t\telse if (time > 60) color = ColorOrange;\n\t\telse color = ColorYellow;\n\t}\n\treturn { text, color };\n}\n\n;// CONCATENATED MODULE: ./src/Disp/BuildingsUpgrades/Buildings.js\n\n\n\n\n\n\n/**\n * Section: Functions related to right column of the screen (buildings/upgrades)\n\n/**\n * This function adjusts some things in the column of buildings.\n * It colours them, helps display the correct sell-price and shuffles the order when CM.Options.SortBuildings is set\n * The function is called by CM.Disp.Draw(), CM.Disp.UpdateColors() & CM.Disp.RefreshScale()\n * And by changes in CM.Options.BuildColor, CM.Options.SortBuild & CM.Data.Config.BulkBuildColor\n */\nfunction UpdateBuildings() {\n\tlet target = Game.buyBulk;\n\tif (Game.buyMode === 1) {\n\t\tLastTargetBuildings = target;\n\t} else {\n\t\ttarget = LastTargetBuildings;\n\t}\n\tif (target === 1) target = CacheObjects1;\n\telse if (target === 10) target = CacheObjects10;\n\telse if (target === 100) target = CacheObjects100;\n\n\tif (Game.buyMode === 1) {\n\t\tif (CMOptions.BuildColor === 1) {\n\t\t\tfor (const i of Object.keys(target)) {\n\t\t\t\tl(`productPrice${Game.Objects[i].id}`).style.color = CMOptions.Colors[target[i].color];\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const i of Object.keys(Game.Objects)) {\n\t\t\t\tl(`productPrice${Game.Objects[i].id}`).style.removeProperty('color');\n\t\t\t}\n\t\t}\n\t} else if (Game.buyMode === -1) {\n\t\tfor (const i of Object.keys(CacheObjects1)) {\n\t\t\tconst o = Game.Objects[i];\n\t\t\tl(`productPrice${o.id}`).style.color = '';\n\t\t\t/*\n\t\t\t * Fix sell price displayed in the object in the store.\n\t\t\t *\n\t\t\t * The buildings sell price displayed by the game itself (without any mod) is incorrect.\n\t\t\t * The following line of code fixes this issue, and can be safely removed when the game gets fixed.\n\t\t\t *\n\t\t\t * This issue is extensively detailed here: https://github.com/Aktanusa/CookieMonster/issues/359#issuecomment-735658262\n\t\t\t */\n\t\t\tl(`productPrice${o.id}`).innerHTML = BeautifyFormatting_Beautify(BuildingSell(o, o.basePrice, o.amount, o.free, Game.buyBulk, 1));\n\t\t}\n\t}\n\n\t// Build array of pointers, sort by pp, use array index (+2) as the grid row number\n\t// (grid rows are 1-based indexing, and row 1 is the bulk buy/sell options)\n\t// This regulates sorting of buildings\n\tif (Game.buyMode === 1 && CMOptions.SortBuildings) {\n\t\tconst arr = Object.keys(target).map((k) => {\n\t\t\tconst o = target[k];\n\t\t\to.name = k;\n\t\t\to.id = Game.Objects[k].id;\n\t\t\treturn o;\n\t\t});\n\n\t\tarr.sort(function (a, b) { return (Colors.indexOf(a.color) > Colors.indexOf(b.color) ? 1 : (Colors.indexOf(a.color) < Colors.indexOf(b.color) ? -1 : (a.pp < b.pp) ? -1 : 0)); });\n\n\t\tfor (let x = 0; x < arr.length; x++) {\n\t\t\tGame.Objects[arr[x].name].l.style.gridRow = `${x + 2}/${x + 2}`;\n\t\t}\n\t} else {\n\t\tconst arr = Object.keys(CacheObjects1).map((k) => {\n\t\t\tconst o = CacheObjects1[k];\n\t\t\to.name = k;\n\t\t\to.id = Game.Objects[k].id;\n\t\t\treturn o;\n\t\t});\n\t\tarr.sort((a, b) => a.id - b.id);\n\t\tfor (let x = 0; x < arr.length; x++) {\n\t\t\tGame.Objects[arr[x].name].l.style.gridRow = `${x + 2}/${x + 2}`;\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/BuildingsUpgrades/Upgrades.js\n\n\n\n\n/**\n * This function adjusts some things in the upgrades section\n * It colours them and shuffles the order when CM.Options.SortBuildings is set\n * The function is called by CM.Disp.Draw(), CM.Disp.ToggleUpgradeBarAndColor & CM.Disp.RefreshScale()\n * And by changes in CM.Options.SortUpgrades\n */\nfunction UpdateUpgrades() {\n\t// This counts the amount of upgrades for each pp group and updates the Upgrade Bar\n\tif (CMOptions.UpBarColor > 0) {\n\t\tlet blue = 0;\n\t\tlet green = 0;\n\t\tlet yellow = 0;\n\t\tlet orange = 0;\n\t\tlet red = 0;\n\t\tlet purple = 0;\n\t\tlet gray = 0;\n\n\t\tfor (const i of Object.keys(Game.UpgradesInStore)) {\n\t\t\tconst me = Game.UpgradesInStore[i];\n\t\t\tlet addedColor = false;\n\t\t\tfor (let j = 0; j < l(`upgrade${i}`).childNodes.length; j++) {\n\t\t\t\tif (l(`upgrade${i}`).childNodes[j].className.indexOf(ColorBackPre) !== -1) {\n\t\t\t\t\tl(`upgrade${i}`).childNodes[j].className = ColorBackPre + CacheUpgrades[me.name].color;\n\t\t\t\t\taddedColor = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!addedColor) {\n\t\t\t\tconst div = document.createElement('div');\n\t\t\t\tdiv.style.width = '10px';\n\t\t\t\tdiv.style.height = '10px';\n\t\t\t\tdiv.className = ColorBackPre + CacheUpgrades[me.name].color;\n\t\t\t\tl(`upgrade${i}`).appendChild(div);\n\t\t\t}\n\t\t\tif (CacheUpgrades[me.name].color === ColorBlue) blue++;\n\t\t\telse if (CacheUpgrades[me.name].color === ColorGreen) green++;\n\t\t\telse if (CacheUpgrades[me.name].color === ColorYellow) yellow++;\n\t\t\telse if (CacheUpgrades[me.name].color === ColorOrange) orange++;\n\t\t\telse if (CacheUpgrades[me.name].color === ColorRed) red++;\n\t\t\telse if (CacheUpgrades[me.name].color === ColorPurple) purple++;\n\t\t\telse if (CacheUpgrades[me.name].color === ColorGray) gray++;\n\t\t}\n\n\t\tl('CMUpgradeBarBlue').textContent = blue;\n\t\tl('CMUpgradeBarGreen').textContent = green;\n\t\tl('CMUpgradeBarYellow').textContent = yellow;\n\t\tl('CMUpgradeBarOrange').textContent = orange;\n\t\tl('CMUpgradeBarRed').textContent = red;\n\t\tl('CMUpgradeBarPurple').textContent = purple;\n\t\tl('CMUpgradeBarGray').textContent = gray;\n\t}\n\n\tconst arr = [];\n\t// Build array of pointers, sort by pp, set flex positions\n\t// This regulates sorting of upgrades\n\tfor (let x = 0; x < Game.UpgradesInStore.length; x++) {\n\t\tconst o = {};\n\t\to.name = Game.UpgradesInStore[x].name;\n\t\to.price = Game.UpgradesInStore[x].basePrice;\n\t\to.pp = CacheUpgrades[o.name].pp;\n\t\tarr.push(o);\n\t}\n\n\tif (CMOptions.SortUpgrades) {\n\t\tarr.sort(function (a, b) { return (Colors.indexOf(a.color) > Colors.indexOf(b.color) ? 1 : (Colors.indexOf(a.color) < Colors.indexOf(b.color) ? -1 : (a.pp < b.pp) ? -1 : 0)); });\n\t} else {\n\t\tarr.sort((a, b) => a.price - b.price);\n\t}\n\n\tconst nameChecker = function (arr2, upgrade) {\n\t\treturn arr2.findIndex((e) => e.name === upgrade.name);\n\t};\n\tfor (let x = 0; x < Game.UpgradesInStore.length; x++) {\n\t\tl(`upgrade${x}`).style.order = nameChecker(arr, Game.UpgradesInStore[x]) + 1;\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/HelperFunctions/GetCPS.js\n\n\n\n/**\n * This function returns the cps as either current or average CPS depending on CM.Options.CPSMode\n * @returns\t{number}\tThe average or current cps\n */\nfunction GetCPS() {\n\tif (CMOptions.CPSMode) {\n\t\treturn CacheAvgCps;\n\t} else if (CMOptions.CalcWrink === 0) {\n\t\treturn (Game.cookiesPs * (1 - Game.cpsSucked));\n\t} else if (CMOptions.CalcWrink === 1) {\n\t\treturn Game.cookiesPs * (CacheCurrWrinklerCPSMult + (1 - (CacheCurrWrinklerCount * 0.05)));\n\t} else if (CMOptions.CalcWrink === 2 && Game.wrinklers[CacheWrinklersFattest[1]].type === 1) {\n\t\treturn Game.cookiesPs * ((CacheCurrWrinklerCPSMult * 3 / CacheCurrWrinklerCount) + (1 - (CacheCurrWrinklerCount * 0.05)));\n\t} else {\n\t\treturn Game.cookiesPs * ((CacheCurrWrinklerCPSMult / CacheCurrWrinklerCount) + (1 - (CacheCurrWrinklerCount * 0.05)));\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/HelperFunctions/GetWrinkConfigBank.js\n\n\n\n/**\n * This function returns the total amount stored in the Wrinkler Bank\n * as calculated by  CM.Cache.CacheWrinklers() if CM.Options.CalcWrink is set\n * @returns\t{number}\t0 or the amount of cookies stored (CM.Cache.WrinklersTotal)\n */\nfunction GetWrinkConfigBank() {\n\tif (CMOptions.CalcWrink === 1) {\n\t\treturn CacheWrinklersTotal;\n\t} else if (CMOptions.CalcWrink === 2) {\n\t\treturn CacheWrinklersFattest[0];\n\t} else {\n\t\treturn 0;\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/InfoBars/CreateDOMElements.js\n/** Functions to create various DOM elements used by the Bars */\n\n\n\n/**\n * This function creates an indivudual timer for the timer bar\n * @param\t{string}\t\t\t\t\tid\t\t\t\t\tAn id to identify the timer\n * @param\t{string}\t\t\t\t\tname\t\t\t\tThe title of the timer\n * @param\t[{{string}, {string}}, ...]\tbars ([id, color])\tThe id and colours of individual parts of the timer\n */\nfunction CreateTimer(id, name, bars) {\n\tconst timerBar = document.createElement('div');\n\ttimerBar.id = id;\n\ttimerBar.style.height = '12px';\n\ttimerBar.style.margin = '0px 10px';\n\ttimerBar.style.position = 'relative';\n\n\tconst div = document.createElement('div');\n\tdiv.style.width = '100%';\n\tdiv.style.height = '10px';\n\tdiv.style.margin = 'auto';\n\tdiv.style.position = 'absolute';\n\tdiv.style.left = '0px';\n\tdiv.style.top = '0px';\n\tdiv.style.right = '0px';\n\tdiv.style.bottom = '0px';\n\n\tconst type = document.createElement('span');\n\ttype.style.display = 'inline-block';\n\ttype.style.textAlign = 'right';\n\ttype.style.fontSize = '10px';\n\ttype.style.width = '108px';\n\ttype.style.marginRight = '5px';\n\ttype.style.verticalAlign = 'text-top';\n\ttype.textContent = name;\n\tdiv.appendChild(type);\n\n\tfor (let i = 0; i < bars.length; i++) {\n\t\tconst colorBar = document.createElement('span');\n\t\tcolorBar.id = bars[i].id;\n\t\tcolorBar.style.display = 'inline-block';\n\t\tcolorBar.style.height = '10px';\n\t\tcolorBar.style.verticalAlign = 'text-top';\n\t\tcolorBar.style.textAlign = 'center';\n\t\tif (bars.length - 1 === i) {\n\t\t\tcolorBar.style.borderTopRightRadius = '10px';\n\t\t\tcolorBar.style.borderBottomRightRadius = '10px';\n\t\t}\n\t\tif (typeof bars[i].color !== 'undefined') {\n\t\t\tcolorBar.className = ColorBackPre + bars[i].color;\n\t\t}\n\t\tdiv.appendChild(colorBar);\n\t}\n\n\tconst timer = document.createElement('span');\n\ttimer.id = `${id}Time`;\n\ttimer.style.marginLeft = '5px';\n\ttimer.style.verticalAlign = 'text-top';\n\tdiv.appendChild(timer);\n\n\ttimerBar.appendChild(div);\n\n\treturn timerBar;\n}\n\n/**\n * This function extends the bottom bar (created by CM.Disp.CreateBotBar) with a column for the given building.\n * @param\t{string}\tbuildingName\tObjectname to be added (e.g., \"Cursor\")\n */\nfunction CreateBotBarBuildingColumn(buildingName) {\n\tif (l('CMBotBar') !== null) {\n\t\tconst type = l('CMBotBar').firstChild.firstChild.childNodes[0];\n\t\tconst bonus = l('CMBotBar').firstChild.firstChild.childNodes[1];\n\t\tconst pp = l('CMBotBar').firstChild.firstChild.childNodes[2];\n\t\tconst time = l('CMBotBar').firstChild.firstChild.childNodes[3];\n\n\t\tconst i = buildingName;\n\t\tconst header = type.appendChild(document.createElement('td'));\n\t\theader.appendChild(document.createTextNode(`${i.indexOf(' ') !== -1 ? i.substring(0, i.indexOf(' ')) : i} (`));\n\n\t\tconst span = header.appendChild(document.createElement('span'));\n\t\tspan.className = ColorTextPre + ColorBlue;\n\n\t\theader.appendChild(document.createTextNode(')'));\n\t\tbonus.appendChild(document.createElement('td'));\n\t\tpp.appendChild(document.createElement('td'));\n\t\ttime.appendChild(document.createElement('td'));\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/InfoBars/BottomBar.js\n/** Functions related to the Bottom Bar */\n\n\n\n\n\n\n\n\n\n\n/**\n * This function creates the bottom bar and appends it to l('wrapper')\n */\nfunction CreateBotBar() {\n\tconst BotBar = document.createElement('div');\n\tBotBar.id = 'CMBotBar';\n\tBotBar.style.height = '69px';\n\tBotBar.style.width = '100%';\n\tBotBar.style.position = 'absolute';\n\tBotBar.style.display = 'none';\n\tBotBar.style.backgroundColor = '#262224';\n\tBotBar.style.backgroundImage = 'linear-gradient(to bottom, #4d4548, #000000)';\n\tBotBar.style.borderTop = '1px solid black';\n\tBotBar.style.overflow = 'auto';\n\tBotBar.style.textShadow = '-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black';\n\n\tconst table = BotBar.appendChild(document.createElement('table'));\n\ttable.style.width = '100%';\n\ttable.style.textAlign = 'center';\n\ttable.style.whiteSpace = 'nowrap';\n\tconst tbody = table.appendChild(document.createElement('tbody'));\n\n\tconst firstCol = function (text, color) {\n\t\tconst td = document.createElement('td');\n\t\ttd.style.textAlign = 'right';\n\t\ttd.className = ColorTextPre + color;\n\t\ttd.textContent = text;\n\t\treturn td;\n\t};\n\tconst type = tbody.appendChild(document.createElement('tr'));\n\ttype.style.fontWeight = 'bold';\n\ttype.appendChild(firstCol(`CM ${VersionMajor}.${VersionMinor}`, ColorYellow));\n\tconst bonus = tbody.appendChild(document.createElement('tr'));\n\tbonus.appendChild(firstCol('Bonus Income', ColorBlue));\n\tconst pp = tbody.appendChild(document.createElement('tr'));\n\tpp.appendChild(firstCol('Payback Period', ColorBlue));\n\tconst time = tbody.appendChild(document.createElement('tr'));\n\ttime.appendChild(firstCol('Time Left', ColorBlue));\n\n\tl('wrapper').appendChild(BotBar);\n\n\tfor (const i of Object.keys(Game.Objects)) {\n\t\tCreateBotBarBuildingColumn(i);\n\t}\n}\n\n/**\n * This function updates the bonus-, pp-, and time-rows in the the bottom bar\n */\nfunction UpdateBotBar() {\n\tif (CMOptions.BotBar === 1 && CacheObjects1 && Game.buyMode === 1) {\n\t\tlet count = 0;\n\t\tfor (const i of Object.keys(CacheObjects1)) {\n\t\t\tlet target = Game.buyBulk;\n\t\t\tif (Game.buyMode === 1) {\n\t\t\t\tLastTargetBotBar = target;\n\t\t\t} else {\n\t\t\t\ttarget = LastTargetBotBar;\n\t\t\t}\n\t\t\tif (target === 1) target = CacheObjects1;\n\t\t\tif (target === 10) target = CacheObjects10;\n\t\t\tif (target === 100) target = CacheObjects100;\n\t\t\tcount++;\n\t\t\tl('CMBotBar').firstChild.firstChild.childNodes[0].childNodes[count].childNodes[1].textContent = Game.Objects[i].amount;\n\t\t\tl('CMBotBar').firstChild.firstChild.childNodes[1].childNodes[count].textContent = BeautifyFormatting_Beautify(target[i].bonus, 2);\n\t\t\tl('CMBotBar').firstChild.firstChild.childNodes[2].childNodes[count].className = ColorTextPre + target[i].color;\n\t\t\tl('CMBotBar').firstChild.firstChild.childNodes[2].childNodes[count].textContent = BeautifyFormatting_Beautify(target[i].pp, 2);\n\t\t\tconst timeColor = GetTimeColor((Game.Objects[i].bulkPrice - (Game.cookies + GetWrinkConfigBank())) / GetCPS());\n\t\t\tl('CMBotBar').firstChild.firstChild.childNodes[3].childNodes[count].className = ColorTextPre + timeColor.color;\n\t\t\tif (timeColor.text === 'Done!' && Game.cookies < Game.Objects[i].bulkPrice) {\n\t\t\t\tl('CMBotBar').firstChild.firstChild.childNodes[3].childNodes[count].textContent = `${timeColor.text} (with Wrink)`;\n\t\t\t} else l('CMBotBar').firstChild.firstChild.childNodes[3].childNodes[count].textContent = timeColor.text;\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/HelperFunctions/UpdateBackground.js\n/**\n * This function sets the size of the background of the full game and the left column\n * depending on whether certain abrs are activated\n * It is called by CM.Disp.UpdateAscendState() and CM.Disp.UpdateBotTimerBarPosition()\n */\nfunction UpdateBackground() {\n\tGame.Background.canvas.width = Game.Background.canvas.parentNode.offsetWidth;\n\tGame.Background.canvas.height = Game.Background.canvas.parentNode.offsetHeight;\n\tGame.LeftBackground.canvas.width = Game.LeftBackground.canvas.parentNode.offsetWidth;\n\tGame.LeftBackground.canvas.height = Game.LeftBackground.canvas.parentNode.offsetHeight;\n}\n\n;// CONCATENATED MODULE: ./src/Config/SpecificToggles.js\n/** Called by the \"func\" of individual settings */\n\n\n\n\n/**\n * This function changes the position of both the bottom and timer bar\n */\nfunction UpdateBotTimerBarPosition() {\n\tif (CMOptions.BotBar === 1 && CMOptions.TimerBar === 1 && CMOptions.TimerBarPos === 1) {\n\t\tl('CMBotBar').style.bottom = l('CMTimerBar').style.height;\n\t\tl('game').style.bottom = `${Number(l('CMTimerBar').style.height.replace('px', '')) + 70}px`;\n\t} else if (CMOptions.BotBar === 1) {\n\t\tl('CMBotBar').style.bottom = '0px';\n\t\tl('game').style.bottom = '70px';\n\t} else if (CMOptions.TimerBar === 1 && CMOptions.TimerBarPos === 1) {\n\t\tl('game').style.bottom = l('CMTimerBar').style.height;\n\t} else { // No bars\n\t\tl('game').style.bottom = '0px';\n\t}\n\n\tif (CMOptions.TimerBar === 1 && CMOptions.TimerBarPos === 0) {\n\t\tl('sectionLeft').style.top = l('CMTimerBar').style.height;\n\t} else {\n\t\tl('sectionLeft').style.top = '';\n\t}\n\n\tUpdateBackground();\n}\n\n/**\n * This function changes the visibility of the timer bar\n */\nfunction ToggleTimerBar() {\n\tif (CMOptions.TimerBar === 1) l('CMTimerBar').style.display = '';\n\telse l('CMTimerBar').style.display = 'none';\n\tUpdateBotTimerBarPosition();\n}\n\n/**\n * This function changes the position of the timer bar\n */\nfunction ToggleTimerBarPos() {\n\tif (CMOptions.TimerBarPos === 0) {\n\t\tl('CMTimerBar').style.width = '30%';\n\t\tl('CMTimerBar').style.bottom = '';\n\t\tl('game').insertBefore(l('CMTimerBar'), l('sectionLeft'));\n\t} else {\n\t\tl('CMTimerBar').style.width = '100%';\n\t\tl('CMTimerBar').style.bottom = '0px';\n\t\tl('wrapper').appendChild(l('CMTimerBar'));\n\t}\n\tUpdateBotTimerBarPosition();\n}\n\n;// CONCATENATED MODULE: ./src/Disp/InfoBars/TimerBar.js\n/** Functions related to the Timer Bar */\n\n\n\n\n\n\n/**\n * This function creates the TimerBar and appends it to l('wrapper')\n */\nfunction CreateTimerBar() {\n\tconst TimerBar = document.createElement('div');\n\tTimerBar.id = 'CMTimerBar';\n\tTimerBar.style.position = 'absolute';\n\tTimerBar.style.display = 'none';\n\tTimerBar.style.height = '0px';\n\tTimerBar.style.fontSize = '10px';\n\tTimerBar.style.fontWeight = 'bold';\n\tTimerBar.style.backgroundColor = 'black';\n\n\t// Create standard Golden Cookie bar\n\tconst CMTimerBarGC = CreateTimer('CMTimerBarGC',\n\t\t'Next Cookie',\n\t\t[{ id: 'CMTimerBarGCMinBar', color: ColorGray }, { id: 'CMTimerBarGCBar', color: ColorPurple }]);\n\tTimerBar.appendChild(CMTimerBarGC);\n\n\t// Create standard Reindeer bar\n\tconst CMTimerBarRen = CreateTimer('CMTimerBarRen',\n\t\t'Next Reindeer',\n\t\t[{ id: 'CMTimerBarRenMinBar', color: ColorGray }, { id: 'CMTimerBarRenBar', color: ColorOrange }]);\n\tTimerBar.appendChild(CMTimerBarRen);\n\n\tl('wrapper').appendChild(TimerBar);\n}\n\n/**\n * This function updates indivudual timers in the timer bar\n */\nfunction UpdateTimerBar() {\n\tif (CMOptions.TimerBar === 1) {\n\t\t// label width: 113, timer width: 30, div margin: 20\n\t\tconst maxWidthTwoBar = l('CMTimerBar').offsetWidth - 163;\n\t\t// label width: 113, div margin: 20, calculate timer width at runtime\n\t\tconst maxWidthOneBar = l('CMTimerBar').offsetWidth - 133;\n\t\tlet numberOfTimers = 0;\n\n\t\t// Regulates visibility of Golden Cookie timer\n\t\tif (Game.shimmerTypes.golden.spawned === 0 && !Game.Has('Golden switch [off]')) {\n\t\t\tl('CMTimerBarGC').style.display = '';\n\t\t\tl('CMTimerBarGCMinBar').style.width = `${Math.round(Math.max(0, Game.shimmerTypes.golden.minTime - Game.shimmerTypes.golden.time) * maxWidthTwoBar / Game.shimmerTypes.golden.maxTime)}px`;\n\t\t\tif (CMOptions.TimerBarOverlay >= 1) l('CMTimerBarGCMinBar').textContent = Math.ceil((Game.shimmerTypes.golden.minTime - Game.shimmerTypes.golden.time) / Game.fps);\n\t\t\telse l('CMTimerBarGCMinBar').textContent = '';\n\t\t\tif (Game.shimmerTypes.golden.minTime === Game.shimmerTypes.golden.maxTime) {\n\t\t\t\tl('CMTimerBarGCMinBar').style.borderTopRightRadius = '10px';\n\t\t\t\tl('CMTimerBarGCMinBar').style.borderBottomRightRadius = '10px';\n\t\t\t} else {\n\t\t\t\tl('CMTimerBarGCMinBar').style.borderTopRightRadius = '';\n\t\t\t\tl('CMTimerBarGCMinBar').style.borderBottomRightRadius = '';\n\t\t\t}\n\t\t\tl('CMTimerBarGCBar').style.width = `${Math.round(Math.min(Game.shimmerTypes.golden.maxTime - Game.shimmerTypes.golden.minTime, Game.shimmerTypes.golden.maxTime - Game.shimmerTypes.golden.time) * maxWidthTwoBar / Game.shimmerTypes.golden.maxTime)}px`;\n\t\t\tif (CMOptions.TimerBarOverlay >= 1) l('CMTimerBarGCBar').textContent = Math.ceil(Math.min(Game.shimmerTypes.golden.maxTime - Game.shimmerTypes.golden.minTime, Game.shimmerTypes.golden.maxTime - Game.shimmerTypes.golden.time) / Game.fps);\n\t\t\telse l('CMTimerBarGCBar').textContent = '';\n\t\t\tl('CMTimerBarGCTime').textContent = Math.ceil((Game.shimmerTypes.golden.maxTime - Game.shimmerTypes.golden.time) / Game.fps);\n\t\t\tnumberOfTimers++;\n\t\t} else l('CMTimerBarGC').style.display = 'none';\n\n\t\t// Regulates visibility of Reindeer timer\n\t\tif (Game.season === 'christmas' && Game.shimmerTypes.reindeer.spawned === 0) {\n\t\t\tl('CMTimerBarRen').style.display = '';\n\t\t\tl('CMTimerBarRenMinBar').style.width = `${Math.round(Math.max(0, Game.shimmerTypes.reindeer.minTime - Game.shimmerTypes.reindeer.time) * maxWidthTwoBar / Game.shimmerTypes.reindeer.maxTime)}px`;\n\t\t\tif (CMOptions.TimerBarOverlay >= 1) l('CMTimerBarRenMinBar').textContent = Math.ceil((Game.shimmerTypes.reindeer.minTime - Game.shimmerTypes.reindeer.time) / Game.fps);\n\t\t\telse l('CMTimerBarRenMinBar').textContent = '';\n\t\t\tl('CMTimerBarRenBar').style.width = `${Math.round(Math.min(Game.shimmerTypes.reindeer.maxTime - Game.shimmerTypes.reindeer.minTime, Game.shimmerTypes.reindeer.maxTime - Game.shimmerTypes.reindeer.time) * maxWidthTwoBar / Game.shimmerTypes.reindeer.maxTime)}px`;\n\t\t\tif (CMOptions.TimerBarOverlay >= 1) l('CMTimerBarRenBar').textContent = Math.ceil(Math.min(Game.shimmerTypes.reindeer.maxTime - Game.shimmerTypes.reindeer.minTime, Game.shimmerTypes.reindeer.maxTime - Game.shimmerTypes.reindeer.time) / Game.fps);\n\t\t\telse l('CMTimerBarRenBar').textContent = '';\n\t\t\tl('CMTimerBarRenTime').textContent = Math.ceil((Game.shimmerTypes.reindeer.maxTime - Game.shimmerTypes.reindeer.time) / Game.fps);\n\t\t\tnumberOfTimers++;\n\t\t} else {\n\t\t\tl('CMTimerBarRen').style.display = 'none';\n\t\t}\n\n\t\t// On every frame all buff-timers are deleted and re-created\n\t\tconst BuffTimerBars = {};\n\t\tfor (const i of Object.keys(Game.buffs)) {\n\t\t\tif (Game.buffs[i]) {\n\t\t\t\tconst timer = CreateTimer(Game.buffs[i].name, Game.buffs[i].name, [{ id: `${Game.buffs[i].name}Bar` }]);\n\t\t\t\ttimer.style.display = '';\n\t\t\t\tlet classColor = '';\n\t\t\t\t// Gives specific timers specific colors\n\t\t\t\tif (typeof BuffColors[Game.buffs[i].name] !== 'undefined') {\n\t\t\t\t\tclassColor = BuffColors[Game.buffs[i].name];\n\t\t\t\t} else classColor = ColorPurple;\n\t\t\t\ttimer.lastChild.children[1].className = ColorBackPre + classColor;\n\t\t\t\ttimer.lastChild.children[1].style.color = 'black';\n\t\t\t\tif (CMOptions.TimerBarOverlay === 2) timer.lastChild.children[1].textContent = `${Math.round(100 * (Game.buffs[i].time / Game.buffs[i].maxTime))}%`;\n\t\t\t\telse timer.lastChild.children[1].textContent = '';\n\t\t\t\ttimer.lastChild.children[1].style.width = `${Math.round(Game.buffs[i].time * (maxWidthOneBar - Math.ceil(Game.buffs[i].time / Game.fps).toString().length * 8) / Game.buffs[i].maxTime)}px`;\n\t\t\t\ttimer.lastChild.children[2].textContent = Math.ceil(Game.buffs[i].time / Game.fps);\n\t\t\t\tnumberOfTimers++;\n\t\t\t\tBuffTimerBars[Game.buffs[i].name] = timer;\n\t\t\t}\n\t\t}\n\t\tfor (const i of Object.keys(BuffTimerBars)) {\n\t\t\tl('CMTimerBar').appendChild(BuffTimerBars[i]);\n\t\t}\n\n\t\tif (numberOfTimers !== 0) {\n\t\t\tl('CMTimerBar').style.height = `${numberOfTimers * 12 + 2}px`;\n\t\t}\n\t\tif (LastNumberOfTimers !== numberOfTimers) {\n\t\t\tLastNumberOfTimers = numberOfTimers;\n\t\t\tUpdateBotTimerBarPosition();\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/MenuSections/Refreshmenu.js\n\n\n/**\n * This function refreshes the stats page, CM.Options.UpStats determines the rate at which that happens\n * It is called by CM.Disp.Draw()\n */\nfunction RefreshMenu() {\n\tif (CMOptions.UpStats && Game.onMenu === 'stats' && (Game.drawT - 1) % (Game.fps * 5) !== 0 && (Game.drawT - 1) % Game.fps === 0) Game.UpdateMenu();\n}\n\n;// CONCATENATED MODULE: ./src/Cache/CPS/GetCPSBuffMult.js\n/**\n * This function returns the current CPS buff\n * @returns {number}\tmult\tThe multiplier\n */\nfunction GetCPSBuffMult() {\n\tlet mult = 1;\n\tfor (const i of Object.keys(Game.buffs)) {\n\t\tif (typeof Game.buffs[i].multCpS !== 'undefined') mult *= Game.buffs[i].multCpS;\n\t}\n\treturn mult;\n}\n\n;// CONCATENATED MODULE: ./src/Config/Toggles/ToggleToolWarnPos.js\n\n\n/**\n * This function toggles the position of the warnings created by CM.Disp.TooltipCreateWarningSection()\n * It is called by a change in CM.Options.ToolWarnPos\n * and upon creation of the warning tooltip by CM.Disp.UpdateTooltipWarnings()\n */\nfunction ToggleToolWarnPos() {\n\tif (l('CMDispTooltipWarningParent') !== null) {\n\t\tif (CMOptions.ToolWarnPos === 0) {\n\t\t\tl('CMDispTooltipWarningParent').style.top = 'auto';\n\t\t\tl('CMDispTooltipWarningParent').style.margin = '4px -4px';\n\t\t\tl('CMDispTooltipWarningParent').style.padding = '3px 4px';\n\t\t} else {\n\t\t\tl('CMDispTooltipWarningParent').style.right = 'auto';\n\t\t\tl('CMDispTooltipWarningParent').style.margin = '4px';\n\t\t\tl('CMDispTooltipWarningParent').style.padding = '4px 3px';\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/HelperFunctions/CalculateGrimoireRefillTime.js\n/**\n * This function calculates the time it takes to reach a certain magic level\n * @param\t{number}\tcurrentMagic\t\tThe current magic level\n * @param\t{number}\tmaxMagic\t\t\tThe user's max magic level\n * @param\t{number}\ttargetMagic\t\t\tThe target magic level\n * @returns\t{number}\tcount / Game.fps\tThe time it takes to reach targetMagic\n */\nfunction CalculateGrimoireRefillTime(currentMagic, maxMagic, targetMagic) {\n\tlet count = 0;\n\twhile (currentMagic < targetMagic) {\n\t\tcurrentMagic += Math.max(0.002, (currentMagic / Math.max(maxMagic, 100)) ** 0.5) * 0.002;\n\t\tcount++;\n\t}\n\treturn count / Game.fps;\n}\n\n;// CONCATENATED MODULE: ./src/Disp/HelperFunctions/GetLumpColor.js\n\n\n/**\n * This function returns Name and Color as object for sugar lump type that is given as input param.\n * It is called by CM.Disp.UpdateTooltipSugarLump()\n * @param \t{string} \t\t\t\ttype \t\t\tSugar Lump Type.\n * @returns {{string}, {string}}\ttext, color\t\tAn array containing the text and display-color of the sugar lump\n */\nfunction GetLumpColor(type) {\n\tif (type === 0) {\n\t\treturn { text: 'Normal', color: ColorGray };\n\t} else if (type === 1) {\n\t\treturn { text: 'Bifurcated', color: ColorGreen };\n\t} else if (type === 2) {\n\t\treturn { text: 'Golden', color: ColorYellow };\n\t} else if (type === 3) {\n\t\treturn { text: 'Meaty', color: ColorOrange };\n\t} else if (type === 4) {\n\t\treturn { text: 'Caramelized', color: ColorPurple };\n\t} else {\n\t\treturn { text: 'Unknown Sugar Lump', color: ColorRed };\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Tooltips/CreateTooltip.js\n\n\n\n/** Creates various sections of tooltips */\n\n/**\n * This function appends the sections for Bonus Income, PP and Time left (to achiev) to the tooltip-object\n * The actual data is added by the Update-functions themselves\n * @param\t{object}\ttooltip\t\tObject of a TooltipBox, normally created by a call to CM.Disp.TooltipCreateTooltipBox()\n */\nfunction TooltipCreateCalculationSection(tooltip) {\n\ttooltip.appendChild(TooltipCreateHeader('Bonus Income'));\n\tconst income = document.createElement('div');\n\tincome.style.marginBottom = '4px';\n\tincome.style.color = 'white';\n\tincome.id = 'CMTooltipIncome';\n\ttooltip.appendChild(income);\n\n\ttooltip.appendChild(TooltipCreateHeader('Bonus Cookies per Click'));\n\ttooltip.lastChild.style.display = 'none';\n\tconst click = document.createElement('div');\n\tclick.style.marginBottom = '4px';\n\tclick.style.color = 'white';\n\tclick.style.display = 'none';\n\tclick.id = 'CMTooltipCookiePerClick';\n\ttooltip.appendChild(click);\n\n\ttooltip.appendChild(TooltipCreateHeader('Payback Period'));\n\tconst pp = document.createElement('div');\n\tpp.style.marginBottom = '4px';\n\tpp.id = 'CMTooltipPP';\n\ttooltip.appendChild(pp);\n\n\ttooltip.appendChild(TooltipCreateHeader('Time Left'));\n\tconst time = document.createElement('div');\n\ttime.id = 'CMTooltipTime';\n\ttooltip.appendChild(time);\n\n\tif (TooltipType === 'b') {\n\t\ttooltip.appendChild(TooltipCreateHeader('Production left till next achievement'));\n\t\ttooltip.lastChild.id = 'CMTooltipProductionHeader'; // Assign a id in order to hid when no achiev's are left\n\t\tconst production = document.createElement('div');\n\t\tproduction.id = 'CMTooltipProduction';\n\t\ttooltip.appendChild(production);\n\t}\n}\n\n/**\n * This function creates a tooltipBox object which contains all CookieMonster added tooltip information.\n * @returns {object}\tdiv\t\tAn object containing the stylized box\n */\nfunction TooltipCreateTooltipBox() {\n\tl('tooltip').firstChild.style.paddingBottom = '4px'; // Sets padding on base-tooltip\n\tconst tooltipBox = document.createElement('div');\n\ttooltipBox.style.border = '1px solid';\n\ttooltipBox.style.padding = '4px';\n\ttooltipBox.style.margin = '0px -4px';\n\ttooltipBox.id = 'CMTooltipBorder';\n\ttooltipBox.className = ColorTextPre + ColorGray;\n\treturn tooltipBox;\n}\n\n/**\n * This function creates a header object for tooltips.\n * @param\t{string}\ttext\tTitle of header\n * @returns {object}\tdiv\t\tAn object containing the stylized header\n */\nfunction TooltipCreateHeader(text) {\n\tconst div = document.createElement('div');\n\tdiv.style.fontWeight = 'bold';\n\tdiv.id = `${text}Title`;\n\tdiv.className = ColorTextPre + ColorBlue;\n\tdiv.textContent = text;\n\treturn div;\n}\n\n/**\n * This function creates the tooltip objectm for warnings\n * The object is also removed by CM.Disp.UpdateTooltipWarnings() when type is 's' or 'g'\n * @returns {object}\tTooltipWarn\tThe Warnings-tooltip object\n */\nfunction TooltipCreateWarningSection() {\n\tconst TooltipWarn = document.createElement('div');\n\tTooltipWarn.style.position = 'absolute';\n\tTooltipWarn.style.display = 'block';\n\tTooltipWarn.style.left = 'auto';\n\tTooltipWarn.style.bottom = 'auto';\n\tTooltipWarn.id = 'CMDispTooltipWarningParent';\n\n\tconst create = function (boxId, color, labelTextFront, labelTextBack, deficitId) {\n\t\tconst box = document.createElement('div');\n\t\tbox.id = boxId;\n\t\tbox.style.display = 'none';\n\t\tbox.style.transition = 'opacity 0.1s ease-out';\n\t\tbox.className = ColorBorderPre + color;\n\t\tbox.style.padding = '2px';\n\t\tbox.style.background = '#000 url(img/darkNoise.png)';\n\t\tconst labelDiv = document.createElement('div');\n\t\tbox.appendChild(labelDiv);\n\t\tconst labelSpan = document.createElement('span');\n\t\tlabelSpan.className = ColorTextPre + color;\n\t\tlabelSpan.style.fontWeight = 'bold';\n\t\tlabelSpan.textContent = labelTextFront;\n\t\tlabelDiv.appendChild(labelSpan);\n\t\tlabelDiv.appendChild(document.createTextNode(labelTextBack));\n\t\tconst deficitDiv = document.createElement('div');\n\t\tbox.appendChild(deficitDiv);\n\t\tconst deficitSpan = document.createElement('span');\n\t\tdeficitSpan.id = deficitId;\n\t\tdeficitDiv.appendChild(document.createTextNode('Deficit: '));\n\t\tdeficitDiv.appendChild(deficitSpan);\n\t\treturn box;\n\t};\n\n\tTooltipWarn.appendChild(create('CMDispTooltipWarnLucky', ColorRed, 'Warning: ', 'Purchase of this item will put you under the number of Cookies required for \"Lucky!\"', 'CMDispTooltipWarnLuckyText'));\n\tTooltipWarn.firstChild.style.marginBottom = '4px';\n\tTooltipWarn.appendChild(create('CMDispTooltipWarnLuckyFrenzy', ColorYellow, 'Warning: ', 'Purchase of this item will put you under the number of Cookies required for \"Lucky!\" (Frenzy)', 'CMDispTooltipWarnLuckyFrenzyText'));\n\tTooltipWarn.lastChild.style.marginBottom = '4px';\n\tTooltipWarn.appendChild(create('CMDispTooltipWarnConjure', ColorPurple, 'Warning: ', 'Purchase of this item will put you under the number of Cookies required for \"Conjure Baked Goods\"', 'CMDispTooltipWarnConjureText'));\n\tTooltipWarn.lastChild.style.marginBottom = '4px';\n\tTooltipWarn.appendChild(create('CMDispTooltipWarnConjureFrenzy', ColorPurple, 'Warning: ', 'Purchase of this item will put you under the number of Cookies required for \"Conjure Baked Goods\" (Frenzy)', 'CMDispTooltipWarnConjureFrenzyText'));\n\tTooltipWarn.lastChild.style.marginBottom = '4px';\n\tTooltipWarn.appendChild(create('CMDispTooltipWarnEdifice', ColorPurple, 'Warning: ', 'Purchase of this item will put you under the number of Cookies needed for \"Spontaneous Edifice\" to possibly give you your most expensive building\"', 'CMDispTooltipWarnEdificeText'));\n\tTooltipWarn.lastChild.style.marginBottom = '4px';\n\tTooltipWarn.appendChild(create('CMDispTooltipWarnUser', ColorRed, 'Warning: ', `Purchase of this item will put you under the number of Cookies equal to ${CMOptions.ToolWarnUser} seconds of CPS`, 'CMDispTooltipWarnUserText'));\n\n\treturn TooltipWarn;\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Tooltips/UpdateTooltips.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n/** Functions that update specific types of tooltips  */\n\n/**\n * This function adds extra info to the Building tooltips\n */\nfunction Building() {\n\tif (CMOptions.TooltipBuildUpgrade === 1 && Game.buyMode === 1) {\n\t\tconst tooltipBox = l('CMTooltipBorder');\n\t\tTooltipCreateCalculationSection(tooltipBox);\n\n\t\tlet target;\n\t\tif (Game.buyMode === 1) {\n\t\t\tLastTargetTooltipBuilding = target;\n\t\t} else {\n\t\t\ttarget = LastTargetTooltipBuilding;\n\t\t}\n\t\tif (Game.buyBulk === 1) target = CacheObjects1;\n\t\telse if (Game.buyBulk === 10) target = CacheObjects10;\n\t\telse if (Game.buyBulk === 100) target = CacheObjects100;\n\n\t\tTooltipPrice = Game.Objects[TooltipName].bulkPrice;\n\t\tTooltipBonusIncome = target[TooltipName].bonus;\n\n\t\tif (CMOptions.TooltipBuildUpgrade === 1 && Game.buyMode === 1) {\n\t\t\tl('CMTooltipIncome').textContent = BeautifyFormatting_Beautify(TooltipBonusIncome, 2);\n\t\t\tconst increase = Math.round(TooltipBonusIncome / Game.cookiesPs * 10000);\n\t\t\tif (Number.isFinite(increase) && increase !== 0) {\n\t\t\t\tl('CMTooltipIncome').textContent += ` (${increase / 100}% of income)`;\n\t\t\t}\n\t\t\tl('CMTooltipBorder').className = ColorTextPre + target[TooltipName].color;\n\t\t\tl('CMTooltipPP').textContent = BeautifyFormatting_Beautify(target[TooltipName].pp, 2);\n\t\t\tl('CMTooltipPP').className = ColorTextPre + target[TooltipName].color;\n\t\t\tconst timeColor = GetTimeColor((TooltipPrice - (Game.cookies + GetWrinkConfigBank())) / GetCPS());\n\t\t\tl('CMTooltipTime').textContent = timeColor.text;\n\t\t\tif (timeColor.text === 'Done!' && Game.cookies < target[TooltipName].price) {\n\t\t\t\tl('CMTooltipTime').textContent = `${timeColor.text} (with Wrink)`;\n\t\t\t} else l('CMTooltipTime').textContent = timeColor.text;\n\t\t\tl('CMTooltipTime').className = ColorTextPre + timeColor.color;\n\t\t}\n\n\t\t// Add \"production left till next achievement\"-bar\n\t\tl('CMTooltipProductionHeader').style.display = 'none';\n\t\tl('CMTooltipTime').style.marginBottom = '0px';\n\t\tfor (const i of Object.keys(Game.Objects[TooltipName].productionAchievs)) {\n\t\t\tif (!Game.HasAchiev(Game.Objects[TooltipName].productionAchievs[i].achiev.name)) {\n\t\t\t\tconst nextProductionAchiev = Game.Objects[TooltipName].productionAchievs[i];\n\t\t\t\tl('CMTooltipTime').style.marginBottom = '4px';\n\t\t\t\tl('CMTooltipProductionHeader').style.display = '';\n\t\t\t\tl('CMTooltipProduction').className = `ProdAchievement${TooltipName}`;\n\t\t\t\tl('CMTooltipProduction').textContent = BeautifyFormatting_Beautify(nextProductionAchiev.pow - SimObjects[TooltipName].totalCookies, 15);\n\t\t\t\tl('CMTooltipProduction').style.color = 'white';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else l('CMTooltipArea').style.display = 'none';\n}\n\n/**\n * This function adds extra info to the Upgrade tooltips\n */\nfunction Upgrade() {\n\tconst tooltipBox = l('CMTooltipBorder');\n\tTooltipCreateCalculationSection(tooltipBox);\n\n\tTooltipBonusIncome = CacheUpgrades[Game.UpgradesInStore[TooltipName].name].bonus;\n\tTooltipPrice = Game.Upgrades[Game.UpgradesInStore[TooltipName].name].getPrice();\n\tTooltipBonusMouse = CacheUpgrades[Game.UpgradesInStore[TooltipName].name].bonusMouse;\n\n\tif (CMOptions.TooltipBuildUpgrade === 1) {\n\t\tl('CMTooltipIncome').textContent = BeautifyFormatting_Beautify(TooltipBonusIncome, 2);\n\t\tconst increase = Math.round(TooltipBonusIncome / Game.cookiesPs * 10000);\n\t\t// Don't display certain parts of tooltip if not applicable\n\t\tif (l('CMTooltipIncome').textContent === '0' && (TooltipType === 'b' || TooltipType === 'u')) {\n\t\t\tl('Bonus IncomeTitle').style.display = 'none';\n\t\t\tl('CMTooltipIncome').style.display = 'none';\n\t\t\tl('Payback PeriodTitle').style.display = 'none';\n\t\t\tl('CMTooltipPP').style.display = 'none';\n\t\t} else {\n\t\t\tif (Number.isFinite(increase) && increase !== 0) {\n\t\t\t\tl('CMTooltipIncome').textContent += ` (${increase / 100}% of income)`;\n\t\t\t}\n\t\t\tl('CMTooltipBorder').className = ColorTextPre + CacheUpgrades[Game.UpgradesInStore[TooltipName].name].color;\n\t\t\t// If clicking power upgrade\n\t\t\tif (TooltipBonusMouse) {\n\t\t\t\tl('CMTooltipCookiePerClick').textContent = BeautifyFormatting_Beautify(TooltipBonusMouse);\n\t\t\t\tl('CMTooltipCookiePerClick').style.display = 'block';\n\t\t\t\tl('CMTooltipCookiePerClick').previousSibling.style.display = 'block';\n\t\t\t}\n\t\t\t// If only a clicking power upgrade change PP to click-based period\n\t\t\tif (TooltipBonusIncome === 0 && TooltipBonusMouse) {\n\t\t\t\tl('CMTooltipPP').textContent = `${BeautifyFormatting_Beautify(TooltipPrice / TooltipBonusMouse)} Clicks`;\n\t\t\t\tl('CMTooltipPP').style.color = 'white';\n\t\t\t} else {\n\t\t\t\tl('CMTooltipPP').textContent = BeautifyFormatting_Beautify(CacheUpgrades[Game.UpgradesInStore[TooltipName].name].pp, 2);\n\t\t\t\tl('CMTooltipPP').className = ColorTextPre + CacheUpgrades[Game.UpgradesInStore[TooltipName].name].color;\n\t\t\t}\n\t\t}\n\t\tconst timeColor = GetTimeColor((TooltipPrice - (Game.cookies + GetWrinkConfigBank())) / GetCPS());\n\t\tl('CMTooltipTime').textContent = timeColor.text;\n\t\tif (timeColor.text === 'Done!' && Game.cookies < Game.UpgradesInStore[TooltipName].getPrice()) {\n\t\t\tl('CMTooltipTime').textContent = `${timeColor.text} (with Wrink)`;\n\t\t} else l('CMTooltipTime').textContent = timeColor.text;\n\t\tl('CMTooltipTime').className = ColorTextPre + timeColor.color;\n\n\t\t// Add extra info to Chocolate egg tooltip\n\t\tif (Game.UpgradesInStore[TooltipName].name === 'Chocolate egg') {\n\t\t\tl('CMTooltipBorder').lastChild.style.marginBottom = '4px';\n\t\t\tl('CMTooltipBorder').appendChild(TooltipCreateHeader('Cookies to be gained (Currently/Max)'));\n\t\t\tconst chocolate = document.createElement('div');\n\t\t\tchocolate.style.color = 'white';\n\t\t\tchocolate.textContent = `${BeautifyFormatting_Beautify(Game.cookies * 0.05)} / ${BeautifyFormatting_Beautify(CacheLastChoEgg)}`;\n\t\t\tl('CMTooltipBorder').appendChild(chocolate);\n\t\t}\n\t} else l('CMTooltipArea').style.display = 'none';\n}\n\n/**\n * This function adds extra info to the Sugar Lump tooltip\n * It adds to the additional information to l('CMTooltipArea')\n */\nfunction SugarLump() {\n\tif (CMOptions.TooltipLump === 1) {\n\t\tconst tooltipBox = l('CMTooltipBorder');\n\n\t\ttooltipBox.appendChild(TooltipCreateHeader('Current Sugar Lump'));\n\n\t\tconst lumpType = document.createElement('div');\n\t\tlumpType.id = 'CMTooltipTime';\n\t\ttooltipBox.appendChild(lumpType);\n\t\tconst lumpColor = GetLumpColor(Game.lumpCurrentType);\n\t\tlumpType.textContent = lumpColor.text;\n\t\tlumpType.className = ColorTextPre + lumpColor.color;\n\t} else l('CMTooltipArea').style.display = 'none';\n}\n\n/**\n * This function adds extra info to the Grimoire tooltips\n * It adds to the additional information to l('CMTooltipArea')\n */\nfunction Grimoire() {\n\tconst minigame = Game.Objects['Wizard tower'].minigame;\n\tconst spellCost = minigame.getSpellCost(minigame.spellsById[TooltipName]);\n\n\tif (CMOptions.TooltipGrim === 1 && spellCost <= minigame.magicM) {\n\t\tconst tooltipBox = l('CMTooltipBorder');\n\n\t\t// Time left till enough magic for spell\n\t\ttooltipBox.appendChild(TooltipCreateHeader('Time Left'));\n\t\tconst time = document.createElement('div');\n\t\ttime.id = 'CMTooltipTime';\n\t\ttooltipBox.appendChild(time);\n\t\tconst timeColor = GetTimeColor(CalculateGrimoireRefillTime(minigame.magic, minigame.magicM, spellCost));\n\t\ttime.textContent = timeColor.text;\n\t\ttime.className = ColorTextPre + timeColor.color;\n\n\t\t// Time left untill magic spent is recovered\n\t\tif (spellCost <= minigame.magic) {\n\t\t\ttooltipBox.appendChild(TooltipCreateHeader('Recover Time'));\n\t\t\tconst recover = document.createElement('div');\n\t\t\trecover.id = 'CMTooltipRecover';\n\t\t\ttooltipBox.appendChild(recover);\n\t\t\tconst recoverColor = GetTimeColor(CalculateGrimoireRefillTime(Math.max(0, minigame.magic - spellCost), minigame.magicM, minigame.magic));\n\t\t\trecover.textContent = recoverColor.text;\n\t\t\trecover.className = ColorTextPre + recoverColor.color;\n\t\t}\n\n\t\t// Extra information on cookies gained when spell is Conjure Baked Goods (Name === 0)\n\t\tif (TooltipName === '0') {\n\t\t\ttooltipBox.appendChild(TooltipCreateHeader('Cookies to be gained/lost'));\n\t\t\tconst conjure = document.createElement('div');\n\t\t\tconjure.id = 'x';\n\t\t\ttooltipBox.appendChild(conjure);\n\t\t\tconst reward = document.createElement('span');\n\t\t\treward.style.color = '#33FF00';\n\t\t\treward.textContent = BeautifyFormatting_Beautify(Math.min((Game.cookies + GetWrinkConfigBank()) * 0.15, CacheNoGoldSwitchCookiesPS * 60 * 30), 2);\n\t\t\tconjure.appendChild(reward);\n\t\t\tconst seperator = document.createElement('span');\n\t\t\tseperator.textContent = ' / ';\n\t\t\tconjure.appendChild(seperator);\n\t\t\tconst loss = document.createElement('span');\n\t\t\tloss.style.color = 'red';\n\t\t\tloss.textContent = BeautifyFormatting_Beautify((CacheNoGoldSwitchCookiesPS * 60 * 15), 2);\n\t\t\tconjure.appendChild(loss);\n\t\t}\n\n\t\tl('CMTooltipArea').appendChild(tooltipBox);\n\t} else l('CMTooltipArea').style.display = 'none';\n}\n\n/**\n * This function adds extra info to the Garden plots tooltips\n * It adds to the additional information to l('CMTooltipArea')\n */\nfunction GardenPlots() {\n\tconst minigame = Game.Objects.Farm.minigame;\n\tif (CMOptions.TooltipPlots && minigame.plot[TooltipName[1]][TooltipName[0]][0] !== 0) {\n\t\tconst mature = minigame.plot[TooltipName[1]][TooltipName[0]][1] > minigame.plantsById[minigame.plot[TooltipName[1]][TooltipName[0]][0] - 1].matureBase;\n\t\tconst plantName = minigame.plantsById[minigame.plot[TooltipName[1]][TooltipName[0]][0] - 1].name;\n\t\tl('CMTooltipBorder').appendChild(TooltipCreateHeader('Reward (Current / Maximum)'));\n\t\tconst reward = document.createElement('div');\n\t\treward.id = 'CMTooltipPlantReward';\n\t\tl('CMTooltipBorder').appendChild(reward);\n\t\tif (plantName === 'Bakeberry') {\n\t\t\tl('CMTooltipPlantReward').textContent = `${mature ? BeautifyFormatting_Beautify(Math.min(Game.cookies * 0.03, Game.cookiesPs * 60 * 30)) : '0'} / ${BeautifyFormatting_Beautify(Game.cookiesPs * 60 * 30)}`;\n\t\t} else if (plantName === 'Chocoroot' || plantName === 'White chocoroot') {\n\t\t\tl('CMTooltipPlantReward').textContent = `${mature ? BeautifyFormatting_Beautify(Math.min(Game.cookies * 0.03, Game.cookiesPs * 60 * 3)) : '0'} / ${BeautifyFormatting_Beautify(Game.cookiesPs * 60 * 3)}`;\n\t\t} else if (plantName === 'Queenbeet') {\n\t\t\tl('CMTooltipPlantReward').textContent = `${mature ? BeautifyFormatting_Beautify(Math.min(Game.cookies * 0.04, Game.cookiesPs * 60 * 60)) : '0'} / ${BeautifyFormatting_Beautify(Game.cookiesPs * 60 * 60)}`;\n\t\t} else if (plantName === 'Duketater') {\n\t\t\tl('CMTooltipPlantReward').textContent = `${mature ? BeautifyFormatting_Beautify(Math.min(Game.cookies * 0.08, Game.cookiesPs * 60 * 120)) : '0'} / ${BeautifyFormatting_Beautify(Game.cookiesPs * 60 * 120)}`;\n\t\t} else l('CMTooltipArea').style.display = 'none';\n\t} else l('CMTooltipArea').style.display = 'none';\n}\n\n/**\n * This function adds extra info to the Garden Harvest All tooltip\n * It is called when the Harvest All tooltip is created or refreshed by CM.Disp.UpdateTooltip()\n * It adds to the additional information to l('CMTooltipArea')\n */\nfunction HarvestAll() {\n\tconst minigame = Game.Objects.Farm.minigame;\n\tif (CMOptions.TooltipLump) {\n\t\tl('CMTooltipBorder').appendChild(TooltipCreateHeader('Cookies gained from harvesting:'));\n\t\tlet totalGain = 0;\n\t\tlet mortal = 0;\n\t\tif (Game.keys[16] && Game.keys[17]) mortal = 1;\n\t\tfor (let y = 0; y < 6; y++) {\n\t\t\tfor (let x = 0; x < 6; x++) {\n\t\t\t\tif (minigame.plot[y][x][0] >= 1) {\n\t\t\t\t\tconst tile = minigame.plot[y][x];\n\t\t\t\t\tconst me = minigame.plantsById[tile[0] - 1];\n\t\t\t\t\tconst plantName = me.name;\n\n\t\t\t\t\tlet count = true;\n\t\t\t\t\tif (mortal && me.immortal) count = false;\n\t\t\t\t\tif (tile[1] < me.matureBase) count = false;\n\t\t\t\t\tif (count && plantName === 'Bakeberry') {\n\t\t\t\t\t\ttotalGain += Math.min(Game.cookies * 0.03, Game.cookiesPs * 60 * 30);\n\t\t\t\t\t} else if (count && plantName === 'Chocoroot' || plantName === 'White chocoroot') {\n\t\t\t\t\t\ttotalGain += Math.min(Game.cookies * 0.03, Game.cookiesPs * 60 * 3);\n\t\t\t\t\t} else if (count && plantName === 'Queenbeet') {\n\t\t\t\t\t\ttotalGain += Math.min(Game.cookies * 0.04, Game.cookiesPs * 60 * 60);\n\t\t\t\t\t} else if (count && plantName === 'Duketater') {\n\t\t\t\t\t\ttotalGain += Math.min(Game.cookies * 0.08, Game.cookiesPs * 60 * 120);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tl('CMTooltipBorder').appendChild(document.createTextNode(BeautifyFormatting_Beautify(totalGain)));\n\t} else l('CMTooltipArea').style.display = 'none';\n}\n\n/**\n * This function updates the warnings section of the building and upgrade tooltips\n * It is called by CM.Disp.UpdateTooltip()\n */\nfunction Warnings() {\n\tif (TooltipType === 'b' || TooltipType === 'u') {\n\t\tif (document.getElementById('CMDispTooltipWarningParent') === null) {\n\t\t\tl('tooltipAnchor').appendChild(TooltipCreateWarningSection());\n\t\t\tToggleToolWarnPos();\n\t\t}\n\n\t\tif (CMOptions.ToolWarnPos === 0) l('CMDispTooltipWarningParent').style.right = '0px';\n\t\telse l('CMDispTooltipWarningParent').style.top = `${l('tooltip').offsetHeight}px`;\n\n\t\tl('CMDispTooltipWarningParent').style.width = `${l('tooltip').offsetWidth - 6}px`;\n\n\t\tconst amount = (Game.cookies + GetWrinkConfigBank()) - TooltipPrice;\n\t\tconst bonusIncomeUsed = CMOptions.ToolWarnBon ? TooltipBonusIncome : 0;\n\t\tlet limitLucky = CacheLucky;\n\t\tif (CMOptions.ToolWarnBon === 1) {\n\t\t\tlet bonusNoFren = TooltipBonusIncome;\n\t\t\tbonusNoFren /= GetCPSBuffMult();\n\t\t\tlimitLucky += ((bonusNoFren * 60 * 15) / 0.15);\n\t\t}\n\n\t\tif (CMOptions.ToolWarnLucky === 1) {\n\t\t\tif (amount < limitLucky && (TooltipType !== 'b' || Game.buyMode === 1)) {\n\t\t\t\tl('CMDispTooltipWarnLucky').style.display = '';\n\t\t\t\tl('CMDispTooltipWarnLuckyText').textContent = `${BeautifyFormatting_Beautify(limitLucky - amount)} (${FormatTime((limitLucky - amount) / (GetCPS() + bonusIncomeUsed))})`;\n\t\t\t} else l('CMDispTooltipWarnLucky').style.display = 'none';\n\t\t} else l('CMDispTooltipWarnLucky').style.display = 'none';\n\n\t\tif (CMOptions.ToolWarnLuckyFrenzy === 1) {\n\t\t\tconst limitLuckyFrenzy = limitLucky * 7;\n\t\t\tif (amount < limitLuckyFrenzy && (TooltipType !== 'b' || Game.buyMode === 1)) {\n\t\t\t\tl('CMDispTooltipWarnLuckyFrenzy').style.display = '';\n\t\t\t\tl('CMDispTooltipWarnLuckyFrenzyText').textContent = `${BeautifyFormatting_Beautify(limitLuckyFrenzy - amount)} (${FormatTime((limitLuckyFrenzy - amount) / (GetCPS() + bonusIncomeUsed))})`;\n\t\t\t} else l('CMDispTooltipWarnLuckyFrenzy').style.display = 'none';\n\t\t} else l('CMDispTooltipWarnLuckyFrenzy').style.display = 'none';\n\n\t\tif (CMOptions.ToolWarnConjure === 1) {\n\t\t\tconst limitConjure = limitLucky * 2;\n\t\t\tif ((amount < limitConjure) && (TooltipType !== 'b' || Game.buyMode === 1)) {\n\t\t\t\tl('CMDispTooltipWarnConjure').style.display = '';\n\t\t\t\tl('CMDispTooltipWarnConjureText').textContent = `${BeautifyFormatting_Beautify(limitConjure - amount)} (${FormatTime((limitConjure - amount) / (GetCPS() + bonusIncomeUsed))})`;\n\t\t\t} else l('CMDispTooltipWarnConjure').style.display = 'none';\n\t\t} else l('CMDispTooltipWarnConjure').style.display = 'none';\n\n\t\tif (CMOptions.ToolWarnConjureFrenzy === 1) {\n\t\t\tconst limitConjureFrenzy = limitLucky * 2 * 7;\n\t\t\tif ((amount < limitConjureFrenzy) && (TooltipType !== 'b' || Game.buyMode === 1)) {\n\t\t\t\tl('CMDispTooltipWarnConjureFrenzy').style.display = '';\n\t\t\t\tl('CMDispTooltipWarnConjureFrenzyText').textContent = `${BeautifyFormatting_Beautify(limitConjureFrenzy - amount)} (${FormatTime((limitConjureFrenzy - amount) / (GetCPS() + bonusIncomeUsed))})`;\n\t\t\t} else l('CMDispTooltipWarnConjureFrenzy').style.display = 'none';\n\t\t} else l('CMDispTooltipWarnConjureFrenzy').style.display = 'none';\n\n\t\tif (CMOptions.ToolWarnEdifice === 1 && Game.Objects['Wizard tower'].minigameLoaded) {\n\t\t\tif (CacheEdifice && amount < CacheEdifice && (TooltipType !== 'b' || Game.buyMode === 1)) {\n\t\t\t\tl('CMDispTooltipWarnEdifice').style.display = '';\n\t\t\t\tl('CMDispTooltipWarnEdificeText').textContent = `${BeautifyFormatting_Beautify(CacheEdifice - amount)} (${FormatTime((CacheEdifice - amount) / (GetCPS() + bonusIncomeUsed))})`;\n\t\t\t} else l('CMDispTooltipWarnEdifice').style.display = 'none';\n\t\t} else l('CMDispTooltipWarnEdifice').style.display = 'none';\n\n\t\tif (CMOptions.ToolWarnUser > 0) {\n\t\t\tif (amount < CMOptions.ToolWarnUser * GetCPS() && (TooltipType !== 'b' || Game.buyMode === 1)) {\n\t\t\t\tl('CMDispTooltipWarnUser').style.display = '';\n\t\t\t\t// Need to update tooltip text dynamically\n\t\t\t\tl('CMDispTooltipWarnUser').children[0].textContent = `Purchase of this item will put you under the number of Cookies equal to ${CMOptions.ToolWarnUser} seconds of CPS`;\n\t\t\t\tl('CMDispTooltipWarnUserText').textContent = `${BeautifyFormatting_Beautify(CMOptions.ToolWarnUser * GetCPS() - amount)} (${FormatTime((CMOptions.ToolWarnUser * GetCPS() - amount) / (GetCPS() + bonusIncomeUsed))})`;\n\t\t\t} else l('CMDispTooltipWarnUser').style.display = 'none';\n\t\t} else l('CMDispTooltipWarnUser').style.display = 'none';\n\t} else if (l('CMDispTooltipWarningParent') !== null) {\n\t\tl('CMDispTooltipWarningParent').remove();\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Cache/Dragon/CacheDragonAuras.js\n/* eslint-disable no-unused-vars */\n\n\n/**\n * This functions caches the currently selected Dragon Auras\n */\nfunction CacheDragonAuras() {\n\tCacheDragonAura = Game.dragonAura;\n\tCacheDragonAura2 = Game.dragonAura2;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/InitializeData/InitAchievement.js\n/**\n * This function constructs an object with the static properties of an achievement\n * @param\t{string}\tachievementName\tName of the Achievement\n * @returns {Object}\tyou\t\t\t\tThe static object\n */\nfunction InitAchievement(achievementName) {\n\tconst me = Game.Achievements[achievementName];\n\tconst you = {};\n\tyou.name = me.name;\n\treturn you;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/ReplacedGameFunctions/SimGetTieredCpsMult.js\n\n\n\n/**\n * This functions creates functions similarly to Game.GetTieredCpsMult but checks Sim Data instead of Game Data\n */\nfunction SimGetTieredCpsMult(me) {\n\tlet mult = 1;\n\tfor (const i in me.tieredUpgrades) {\n\t\tif (!Game.Tiers[me.tieredUpgrades[i].tier].special && SimHas(me.tieredUpgrades[i].name)) mult *= 2;\n\t}\n\tfor (const i in me.synergies) {\n\t\tif (SimHas(me.synergies[i].name)) {\n\t\t\tconst syn = me.synergies[i];\n\t\t\tif (syn.buildingTie1.name === me.name) mult *= (1 + 0.05 * syn.buildingTie2.amount);\n\t\t\telse if (syn.buildingTie2.name === me.name) mult *= (1 + 0.001 * syn.buildingTie1.amount);\n\t\t}\n\t}\n\tif (me.fortune && SimHas(me.fortune.name)) mult *= 1.07;\n\tif (me.grandma && SimHas(me.grandma.name)) mult *= (1 + SimObjects.Grandma.amount * 0.01 * (1 / (me.id - 1)));\n\tif (typeof me.tieredUpgrades.misfortune === 'object') {\n\t\tif (me.vanilla === 1 && SimHas(me.tieredUpgrades.misfortune.name)) {\n\t\t\tswitch (Game.elderWrath) {\n\t\t\tdefault: mult *= 1; break;\n\t\t\tcase 1: mult *= 1.02; break;\n\t\t\tcase 2: mult *= 1.04; break;\n\t\t\tcase 3: mult *= 1.06; break;\n\t\t\t}\n\t\t}\n\t}\n\treturn mult;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/InitializeData/InitialBuildingData.js\n\n\n/**\n * This function constructs an object with the static properties of a building,\n * but with a 'cps' method changed to check sim data\n *\n * @param\t{string}\tbuildingName\tName of the building\n * @returns {Object}\tyou\t\t\t\tThe static object\n */\nfunction InitialBuildingData(buildingName) {\n\tconst me = Game.Objects[buildingName];\n\tconst you = {};\n\tyou.cps = function () {\n\t\tlet mult = 1;\n\t\tmult *= SimGetTieredCpsMult(me);\n\t\tmult *= Game.magicCpS(me.name);\n\t\treturn me.baseCps * mult;\n\t};\n\t// Below is needed for above eval, specifically for the GetTieredCpsMult function\n\tyou.baseCps = me.baseCps;\n\tyou.name = me.name;\n\tyou.tieredUpgrades = me.tieredUpgrades;\n\tyou.synergies = me.synergies;\n\tyou.fortune = me.fortune;\n\tyou.grandma = me.grandma;\n\tyou.baseCPS = me.baseCps;\n\tyou.id = me.id;\n\tyou.vanilla = me.vanilla;\n\treturn you;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/InitializeData/InitUpgrade.js\n\n\n\n/**\n * This function constructs an object with the static properties of an upgrade\n * @param\t{string}\tupgradeName\t\tName of the Upgrade\n * @returns {Object}\tyou\t\t\t\tThe static object\n */\nfunction InitUpgrade(upgradeName) {\n\tconst me = Game.Upgrades[upgradeName];\n\tconst you = {};\n\t// Some upgrades have a function for .power (notably the valentine cookies)\n\tyou.power = me.power;\n\tif (typeof (me.power) === 'function') {\n\t\tme.power = function () {\n\t\t\tlet pow = 2;\n\t\t\tif (SimHas('Starlove')) pow = 3;\n\t\t\tif (Game.hasGod) {\n\t\t\t\tconst godLvl = SimHasGod('seasons');\n\t\t\t\tif (godLvl === 1) pow *= 1.3;\n\t\t\t\telse if (godLvl === 2) pow *= 1.2;\n\t\t\t\telse if (godLvl === 3) pow *= 1.1;\n\t\t\t}\n\t\t\treturn pow;\n\t\t};\n\t}\n\tyou.pool = me.pool;\n\tyou.name = me.name;\n\treturn you;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/SimulationData/CopyData.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n\n/**\n * This function copies all relevant data and therefore sets a new iteration of the \"sim data\"\n * It is called at the start of any function that simulates certain behaviour or actions\n */\nfunction CopyData() {\n\t// Other variables\n\tSimUpgradesOwned = Game.UpgradesOwned;\n\tSimPledges = Game.pledges;\n\tSimAchievementsOwned = Game.AchievementsOwned;\n\tSimHeavenlyPower = Game.heavenlyPower;\n\tSimPrestige = Game.prestige;\n\n\t// Buildings\n\tfor (const i of Object.keys(Game.Objects)) {\n\t\tconst me = Game.Objects[i];\n\t\tlet you = SimObjects[i];\n\t\tif (you === undefined) { // New building!\n\t\t\tSimObjects[i] = InitialBuildingData(i);\n\t\t\tyou = SimObjects[i];\n\t\t\tCreateBotBarBuildingColumn(i); // Add new building to the bottom bar\n\t\t}\n\t\tyou.amount = me.amount;\n\t\tyou.level = me.level;\n\t\tyou.totalCookies = me.totalCookies;\n\t\tyou.basePrice = me.basePrice;\n\t\tyou.free = me.free;\n\t\tif (me.minigameLoaded) {\n\t\t\tyou.minigameLoaded = me.minigameLoaded;\n\t\t\tyou.minigame = me.minigame;\n\t\t}\n\t}\n\n\t// Upgrades\n\tfor (const i of Object.keys(Game.Upgrades)) {\n\t\tconst me = Game.Upgrades[i];\n\t\tlet you = SimUpgrades[i];\n\t\tif (you === undefined) {\n\t\t\tSimUpgrades[i] = InitUpgrade(i);\n\t\t\tyou = SimUpgrades[i];\n\t\t}\n\t\tyou.bought = me.bought;\n\t}\n\n\t// Achievements\n\tfor (const i of Object.keys(Game.Achievements)) {\n\t\tconst me = Game.Achievements[i];\n\t\tlet you = SimAchievements[i];\n\t\tif (you === undefined) {\n\t\t\tSimAchievements[i] = InitAchievement(i);\n\t\t\tyou = SimAchievements[i];\n\t\t}\n\t\tyou.won = me.won;\n\t}\n\n\t// Auras\n\tCacheDragonAuras();\n\tSimDragonAura = CacheDragonAura;\n\tSimDragonAura2 = CacheDragonAura2;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/SimulationEvents/BuyBuilding.js\n/**\n * This function calculates the total price for buying \"increase\" of a building\n * Base Game does not currently allow this\n * It is called by CM.Cache.CacheBuildingsPrices() and CM.Disp.Tooltip()\n * @param\t{string}\tbuild\t\tName of the building\n * @param\t{number}\tbasePrice\tBase Price of building\n * @param\t{number}\tstart\t\tStarting amount of building\n * @param\t{number}\tfree\t\tFree amount of building\n * @param\t{number}\tincrease\tIncrease of building\n * @returns {number}\tmoni\t\tTotal price\n */\nfunction BuildingGetPrice(build, basePrice, start, free, increase) {\n\tlet moni = 0;\n\tfor (let i = 0; i < increase; i++) {\n\t\tlet price = basePrice * Game.priceIncrease ** Math.max(0, start - free);\n\t\tprice = Game.modifyBuildingPrice(build, price);\n\t\tprice = Math.ceil(price);\n\t\tmoni += price;\n\t\tstart++;\n\t}\n\treturn moni;\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Tooltips/Tooltip.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n\n/** All general functions related to creating and updating tooltips */\n\n/**\n * This function creates some very basic tooltips, (e.g., the tooltips in the stats page)\n * The tooltips are created with CM.Disp[placeholder].appendChild(desc)\n * @param\t{string}\tplaceholder\tThe name used to later refer and spawn the tooltip\n * @param\t{string}\ttext\t\tThe text of the tooltip\n * @param\t{string}\tminWidth\tThe minimum width of the tooltip\n */\nfunction CreateSimpleTooltip(placeholder, text, minWidth) {\n\tconst Tooltip = document.createElement('div');\n\tTooltip.id = placeholder;\n\tconst desc = document.createElement('div');\n\tdesc.style.minWidth = minWidth;\n\tdesc.style.marginBottom = '4px';\n\tconst div = document.createElement('div');\n\tdiv.style.textAlign = 'left';\n\tdiv.textContent = text;\n\tdesc.appendChild(div);\n\tTooltip.appendChild(desc);\n}\n\n/**\n * This function enhance the standard tooltips by creating and changing l('tooltip')\n * The function is called by .onmouseover events that have replaced original code to use CM.Disp.Tooltip()\n * @param\t{string}\ttype\t\t\t\t\tType of tooltip (b, u, s or g)\n * @param\t{string}\tname\t\t\t\t\tName of the object/item the tooltip relates to\n * @returns {string}\tl('tooltip').innerHTML\tThe HTML of the l('tooltip')-object\n */\nfunction CreateTooltip(type, name) {\n\tif (type === 'b') { // Buildings\n\t\tl('tooltip').innerHTML = Game.Objects[name].tooltip();\n\t\t// Adds amortization info to the list of info per building\n\t\tif (CMOptions.TooltipAmor === 1) {\n\t\t\tconst buildPrice = BuildingGetPrice(Game.Objects[name], Game.Objects[name].basePrice, 0, Game.Objects[name].free, Game.Objects[name].amount);\n\t\t\tconst amortizeAmount = buildPrice - Game.Objects[name].totalCookies;\n\t\t\tif (amortizeAmount > 0) {\n\t\t\t\tl('tooltip').innerHTML = l('tooltip').innerHTML\n\t\t\t\t\t.split('so far</div>')\n\t\t\t\t\t.join(`so far<br/>&bull; <b>${BeautifyFormatting_Beautify(amortizeAmount)}</b> ${Math.floor(amortizeAmount) === 1 ? 'cookie' : 'cookies'} left to amortize (${GetTimeColor((buildPrice - Game.Objects[name].totalCookies) / (Game.Objects[name].storedTotalCps * Game.globalCpsMult)).text})</div>`);\n\t\t\t}\n\t\t}\n\t\tif (Game.buyMode === -1) {\n\t\t\t/*\n             * Fix sell price displayed in the object tooltip.\n             *\n             * The buildings sell price displayed by the game itself (without any mod) is incorrect.\n             * The following line of code fixes this issue, and can be safely removed when the game gets fixed.\n             *\n             * This issue is extensively detailed here: https://github.com/Aktanusa/CookieMonster/issues/359#issuecomment-735658262\n             */\n\t\t\tl('tooltip').innerHTML = l('tooltip').innerHTML.split(BeautifyFormatting_Beautify(Game.Objects[name].bulkPrice)).join(BeautifyFormatting_Beautify((Game.Objects[name], Game.Objects[name].basePrice, Game.Objects[name].amount, Game.Objects[name].free, Game.buyBulk, 1)));\n\t\t}\n\t} else if (type === 'u') { // Upgrades\n\t\tif (!Game.UpgradesInStore[name]) return '';\n\t\tl('tooltip').innerHTML = Game.crateTooltip(Game.UpgradesInStore[name], 'store');\n\t} else if (type === 's') l('tooltip').innerHTML = Game.lumpTooltip(); // Sugar Lumps\n\telse if (type === 'g') l('tooltip').innerHTML = Game.Objects['Wizard tower'].minigame.spellTooltip(name)(); // Grimoire\n\telse if (type === 'p') l('tooltip').innerHTML = Game.ObjectsById[2].minigame.tileTooltip(name[0], name[1])(); // Garden plots\n\telse if (type === 'ha') l('tooltip').innerHTML = Game.ObjectsById[2].minigame.toolTooltip(1)(); // Harvest all button in garden\n\n\t// Adds area for extra tooltip-sections\n\tif ((type === 'b' && Game.buyMode === 1) || type === 'u' || type === 's' || type === 'g' || (type === 'p' && !Game.keys[16]) || type === 'ha') {\n\t\tconst area = document.createElement('div');\n\t\tarea.id = 'CMTooltipArea';\n\t\tl('tooltip').appendChild(area);\n\t}\n\n\t// Sets global variables used by CM.Disp.UpdateTooltip()\n\tTooltipType = type;\n\tTooltipName = name;\n\n\tUpdateTooltips();\n\n\treturn l('tooltip').innerHTML;\n}\n\n/**\n * This function updates the sections of the tooltips created by CookieMonster\n */\nfunction UpdateTooltips() {\n\tCopyData();\n\tif (l('tooltipAnchor').style.display !== 'none' && l('CMTooltipArea')) {\n\t\tl('CMTooltipArea').innerHTML = '';\n\t\tconst tooltipBox = TooltipCreateTooltipBox();\n\t\tl('CMTooltipArea').appendChild(tooltipBox);\n\n\t\tif (TooltipType === 'b') {\n\t\t\tBuilding();\n\t\t} else if (TooltipType === 'u') {\n\t\t\tUpgrade();\n\t\t} else if (TooltipType === 's') {\n\t\t\tSugarLump();\n\t\t} else if (TooltipType === 'g') {\n\t\t\tGrimoire();\n\t\t} else if (TooltipType === 'p') {\n\t\t\tGardenPlots();\n\t\t} else if (TooltipType === 'ha') {\n\t\t\tHarvestAll();\n\t\t}\n\t\tWarnings();\n\t} else if (l('CMTooltipArea') === null) { // Remove warnings if its a basic tooltip\n\t\tif (l('CMDispTooltipWarningParent') !== null) {\n\t\t\tl('CMDispTooltipWarningParent').remove();\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Tooltips/WrinklerTooltips.js\n\n\n\n\n\n/**\n * This function checks and create a tooltip for the wrinklers\n * It is called by CM.Disp.Draw()\n * As wrinklers are not appended to the DOM we us a different system than for other tooltips\n */\nfunction CheckWrinklerTooltip() {\n\tif (CMOptions.TooltipWrink === 1 && TooltipWrinklerArea === 1) { // Latter is set by CM.Main.AddWrinklerAreaDetect\n\t\tlet showingTooltip = false;\n\t\tfor (const i of Object.keys(Game.wrinklers)) {\n\t\t\tconst me = Game.wrinklers[i];\n\t\t\tif (me.phase > 0 && me.selected) {\n\t\t\t\tshowingTooltip = true;\n\t\t\t\tif (TooltipWrinklerBeingShown[i] === 0 || TooltipWrinklerBeingShown[i] === undefined) {\n\t\t\t\t\tconst placeholder = document.createElement('div');\n\t\t\t\t\tconst wrinkler = document.createElement('div');\n\t\t\t\t\twrinkler.style.minWidth = '120px';\n\t\t\t\t\twrinkler.style.marginBottom = '4px';\n\t\t\t\t\tconst div = document.createElement('div');\n\t\t\t\t\tdiv.style.textAlign = 'center';\n\t\t\t\t\tdiv.id = 'CMTooltipWrinkler';\n\t\t\t\t\twrinkler.appendChild(div);\n\t\t\t\t\tplaceholder.appendChild(wrinkler);\n\t\t\t\t\tGame.tooltip.draw(this, escape(placeholder.innerHTML));\n\t\t\t\t\tTooltipWrinkler = i;\n\t\t\t\t\tTooltipWrinklerBeingShown[i] = 1;\n\t\t\t\t} else break;\n\t\t\t} else {\n\t\t\t\tTooltipWrinklerBeingShown[i] = 0;\n\t\t\t}\n\t\t}\n\t\tif (!showingTooltip) {\n\t\t\tGame.tooltip.hide();\n\t\t}\n\t}\n}\n\n/**\n * This function updates the amount to be displayed by the wrinkler tooltip created by CM.Disp.CheckWrinklerTooltip()\n * It is called by CM.Disp.Draw()\n * As wrinklers are not appended to the DOM we us a different system than for other tooltips\n */\nfunction UpdateWrinklerTooltip() {\n\tif (CMOptions.TooltipWrink === 1 && l('CMTooltipWrinkler') !== null) {\n\t\tlet sucked = Game.wrinklers[TooltipWrinkler].sucked;\n\t\tlet toSuck = 1.1;\n\t\tif (Game.Has('Sacrilegious corruption')) toSuck *= 1.05;\n\t\tif (Game.wrinklers[TooltipWrinkler].type === 1) toSuck *= 3; // Shiny wrinklers\n\t\tsucked *= toSuck;\n\t\tif (Game.Has('Wrinklerspawn')) sucked *= 1.05;\n\t\tif (SimObjects.Temple.minigameLoaded) {\n\t\t\tconst godLvl = Game.hasGod('scorn');\n\t\t\tif (godLvl === 1) sucked *= 1.15;\n\t\t\telse if (godLvl === 2) sucked *= 1.1;\n\t\t\telse if (godLvl === 3) sucked *= 1.05;\n\t\t}\n\t\tl('CMTooltipWrinkler').textContent = BeautifyFormatting_Beautify(sucked);\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Draw.js\n\n\n\n\n\n\n\n\n\n/**\n * This function handles all custom drawing for the Game.Draw() function.\n * It is hooked on 'draw' by CM.RegisterHooks()\n */\nfunction Draw() {\n\t// Draw autosave timer in stats menu, this must be done here to make it count down correctly\n\tif (\n\t\t(Game.prefs.autosave && Game.drawT % 10 === 0) // with autosave ON and every 10 ticks\n\t\t&& (Game.onMenu === 'stats' && CMOptions.Stats) // while being on the stats menu only\n\t) {\n\t\tconst timer = document.getElementById('CMStatsAutosaveTimer');\n\t\tif (timer) {\n\t\t\ttimer.innerText = Game.sayTime(Game.fps * 60 - (Game.T % (Game.fps * 60)), 4);\n\t\t}\n\t}\n\n\t// Update colors\n\tUpdateBuildings();\n\tUpdateUpgrades();\n\n\t// Redraw timers\n\tUpdateTimerBar();\n\n\t// Update Bottom Bar\n\tUpdateBotBar();\n\n\t// Update Tooltip\n\tUpdateTooltips();\n\n\t// Update Wrinkler Tooltip\n\tCheckWrinklerTooltip();\n\tUpdateWrinklerTooltip();\n\n\t// Change menu refresh interval\n\tRefreshMenu();\n}\n\n;// CONCATENATED MODULE: ./src/Cache/CPS/AverageQueue.js\n/* eslint-disable no-unused-vars */\n\n\n\n/**\n * @class\n * @classdesc \tThis is a class used to store values used to calculate average over time (mostly cps)\n * @var\t\t\t{number}\t\t\t\tmaxLength\tThe maximum length of the value-storage\n * @var\t\t\t{[]}\t\t\t\t\tqueue\t\tThe values stored\n * @method\t\taddLatest(newValue)\t\tAppends newValue to the value storage\n * @method\t\tcalcAverage(timePeriod)\tReturns the average over the specified timeperiod\n */\nclass CMAvgQueue {\n\tconstructor(maxLength) {\n\t\tthis.maxLength = maxLength;\n\t\tthis.queue = [];\n\t}\n\n\taddLatest(newValue) {\n\t\tif (this.queue.push(newValue) > this.maxLength) {\n\t\t\tthis.queue.shift();\n\t\t}\n\t}\n\n\t/**\n\t * This functions returns the average of the values in the queue\n\t * @param \t{number}\ttimePeriod\tThe period in seconds to computer average over\n\t * @returns {number}\tret\t\t\tThe average\n \t */\n\tcalcAverage(timePeriod) {\n\t\tif (timePeriod > this.maxLength) timePeriod = this.maxLength;\n\t\tif (timePeriod > this.queue.length) timePeriod = this.queue.length;\n\t\tlet ret = 0;\n\t\tfor (let i = this.queue.length - 1; i >= 0 && i > this.queue.length - 1 - timePeriod; i--) {\n\t\t\tret += this.queue[i];\n\t\t}\n\t\tif (ret === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn ret / timePeriod;\n\t}\n}\n\n/**\n * This functions caches creates the CMAvgQueue used by CM.Cache.CacheAvgCPS() to calculate CPS\n * Called by CM.Cache.InitCache()\n */\nfunction InitCookiesDiff() {\n\tCookiesDiff = new CMAvgQueue(CookieTimes[CookieTimes.length - 1]);\n\tWrinkDiff = new CMAvgQueue(CookieTimes[CookieTimes.length - 1]);\n\tWrinkFattestDiff = new CMAvgQueue(CookieTimes[CookieTimes.length - 1]);\n\tChoEggDiff = new CMAvgQueue(CookieTimes[CookieTimes.length - 1]);\n\tClicksDiff = new CMAvgQueue(ClickTimes[ClickTimes.length - 1]);\n}\n\n;// CONCATENATED MODULE: ./src/Cache/CPS/CPS.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n/**\n * This functions caches two variables related average CPS and Clicks\n * It is called by CM.Cache.LoopCache()\n * @global\t{number}\tCM.Cache.RealCookiesEarned\tCookies earned including the Chocolate Egg\n * @global\t{number}\tCM.Cache.AvgCPS\t\t\t\tAverage cookies over time-period as defined by AvgCPSHist\n * @global\t{number}\tCM.Cache.AverageClicks\t\tAverage cookies from clicking over time-period as defined by AvgClicksHist\n * @global\t{number}\tCM.Cache.AvgCPSChoEgg\t\tAverage cookies from combination of normal CPS and average Chocolate Cookie CPS\n */\nfunction CacheAvgCPS() {\n\tconst currDate = Math.floor(Date.now() / 1000);\n\t// Only calculate every new second\n\tif ((Game.T / Game.fps) % 1 === 0) {\n\t\tlet choEggTotal = Game.cookies + CacheSellForChoEgg;\n\t\tif (Game.cpsSucked > 0) choEggTotal += CacheWrinklersTotal;\n\t\tCacheRealCookiesEarned = Math.max(Game.cookiesEarned, choEggTotal);\n\t\tchoEggTotal *= 0.05;\n\n\t\t// Add recent gains to AvgQueue's\n\t\tconst timeDiff = currDate - CacheLastCPSCheck;\n\t\tconst bankDiffAvg = Math.max(0, (Game.cookies - CacheLastCookies)) / timeDiff;\n\t\tconst wrinkDiffAvg = Math.max(0, (CacheWrinklersTotal - CacheLastWrinkCookies)) / timeDiff;\n\t\tconst wrinkFattestDiffAvg = Math.max(0, (CacheWrinklersFattest[0] - CacheLastWrinkFattestCookies)) / timeDiff;\n\t\tconst choEggDiffAvg = Math.max(0, (choEggTotal - CacheLastChoEgg)) / timeDiff;\n\t\tconst clicksDiffAvg = (Game.cookieClicks - CacheLastClicks) / timeDiff;\n\t\tfor (let i = 0; i < timeDiff; i++) {\n\t\t\tCookiesDiff.addLatest(bankDiffAvg);\n\t\t\tWrinkDiff.addLatest(wrinkDiffAvg);\n\t\t\tWrinkFattestDiff.addLatest(wrinkFattestDiffAvg);\n\t\t\tChoEggDiff.addLatest(choEggDiffAvg);\n\t\t\tClicksDiff.addLatest(clicksDiffAvg);\n\t\t}\n\n\t\t// Store current data for next loop\n\t\tCacheLastCPSCheck = currDate;\n\t\tCacheLastCookies = Game.cookies;\n\t\tCacheLastWrinkCookies = CacheWrinklersTotal;\n\t\tCacheLastWrinkFattestCookies = CacheWrinklersFattest[0];\n\t\tCacheLastChoEgg = choEggTotal;\n\t\tCacheLastClicks = Game.cookieClicks;\n\n\t\t// Get average gain over period of cpsLength seconds\n\t\tconst cpsLength = CookieTimes[CMOptions.AvgCPSHist];\n\t\tCacheAverageGainBank = CookiesDiff.calcAverage(cpsLength);\n\t\tCacheAverageGainWrink = WrinkDiff.calcAverage(cpsLength);\n\t\tCacheAverageGainWrinkFattest = WrinkFattestDiff.calcAverage(cpsLength);\n\t\tCacheAverageGainChoEgg = ChoEggDiff.calcAverage(cpsLength);\n\t\tCacheAverageCPS = CacheAverageGainBank;\n\t\tif (CMOptions.CalcWrink === 1) CacheAverageCPS += CacheAverageGainWrink;\n\t\tif (CMOptions.CalcWrink === 2) CacheAverageCPS += CacheAverageGainWrinkFattest;\n\n\t\tconst choEgg = (Game.HasUnlocked('Chocolate egg') && !Game.Has('Chocolate egg'));\n\n\t\tif (choEgg || CMOptions.CalcWrink === 0) {\n\t\t\tCacheAvgCPSWithChoEgg = CacheAverageGainBank + CacheAverageGainWrink + (choEgg ? CacheAverageGainChoEgg : 0);\n\t\t} else CacheAvgCPSWithChoEgg = CacheAverageCPS;\n\n\t\tCacheAverageClicks = ClicksDiff.calcAverage(ClickTimes[CMOptions.AvgClicksHist]);\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Cache/PP/ColourOfPP.js\n\n\n\n\n\n/**\n * This functions return the colour assosciated with the given pp value\n * It is called by CM.Cache.CacheBuildingsPP(), CM.Cache.CacheBuildingsBulkPP() and CM.Cache.CacheUpgradePP()\n * @params\t{object}\tobj\t\tThe obj of which the pp value should be checked\n * @params\t{number}\tprice\tThe price of the object\n * @returns {string}\tcolor\tThe colour assosciated with the pp value\n */\nfunction ColourOfPP(me, price) {\n\tlet color = '';\n\t// Colour based on PP\n\tif (me.pp <= 0 || me.pp === Infinity) color = ColorGray;\n\telse if (me.pp < CacheMinPP) color = ColorBlue;\n\telse if (me.pp === CacheMinPP) color = ColorGreen;\n\telse if (me.pp === CacheMaxPP) color = ColorRed;\n\telse if (me.pp > CacheMaxPP) color = ColorPurple;\n\telse if (me.pp > CacheMidPP) color = ColorOrange;\n\telse color = ColorYellow;\n\n\t// Colour based on price in terms of CPS\n\tif (Number(CMOptions.PPSecondsLowerLimit) !== 0) {\n\t\tif (price / GetCPS() < Number(CMOptions.PPSecondsLowerLimit)) color = ColorBlue;\n\t}\n\t// Colour based on being able to purchase\n\tif (CMOptions.PPOnlyConsiderBuyable) {\n\t\tif (price - Game.cookies > 0) color = ColorRed;\n\t}\n\treturn color;\n}\n\n;// CONCATENATED MODULE: ./src/Cache/PP/Building.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n/**\n * This functions caches the PP of each building it saves all date in CM.Cache.Objects...\n * It is called by CM.Cache.CachePP()\n */\nfunction CacheBuildingsPP() {\n\tCacheMinPP = Infinity;\n\tCacheMaxPP = 1;\n\tCacheArrayOfPPs = [];\n\tif (typeof CMOptions.PPExcludeTop === 'undefined') CMOptions.PPExcludeTop = 0; // Otherwise breaks during initialization\n\n\t// Calculate PP and colors when compared to purchase of optimal building in single-purchase mode\n\tif (CMOptions.ColorPPBulkMode === 0 && Game.buyMode > 0) {\n\t\tfor (const i of Object.keys(CacheObjects1)) {\n\t\t\tif (Game.cookiesPs) {\n\t\t\t\tCacheObjects1[i].pp = (Math.max(Game.Objects[i].getPrice() - (Game.cookies + GetWrinkConfigBank()), 0) / Game.cookiesPs) + (Game.Objects[i].getPrice() / CacheObjects1[i].bonus);\n\t\t\t} else CacheObjects1[i].pp = (Game.Objects[i].getPrice() / CacheObjects1[i].bonus);\n\t\t\tCacheArrayOfPPs.push([CacheObjects1[i].pp, Game.Objects[i].getPrice()]);\n\t\t}\n\t\t// Set CM.Cache.min to best non-excluded buidliung\n\t\tCacheArrayOfPPs.sort((a, b) => a[0] - b[0]);\n\t\tif (CMOptions.PPOnlyConsiderBuyable) {\n\t\t\twhile (CacheArrayOfPPs[0][1] > Game.cookies) {\n\t\t\t\tif (CacheArrayOfPPs.length === 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tCacheArrayOfPPs.shift();\n\t\t\t}\n\t\t}\n\t\tCacheMinPP = CacheArrayOfPPs[CMOptions.PPExcludeTop][0];\n\t\tCacheMaxPP = CacheArrayOfPPs[CacheArrayOfPPs.length - 1][0];\n\t\tCacheMidPP = ((CacheMaxPP - CacheMinPP) / 2) + CacheMinPP;\n\t\tfor (const i of Object.keys(CacheObjects1)) {\n\t\t\tCacheObjects1[i].color = ColourOfPP(CacheObjects1[i], Game.Objects[i].getPrice());\n\t\t\t// Colour based on excluding certain top-buildings\n\t\t\tfor (let j = 0; j < CMOptions.PPExcludeTop; j++) {\n\t\t\t\tif (CacheObjects1[i].pp === CacheArrayOfPPs[j][0]) CacheObjects1[i].color = ColorGray;\n\t\t\t}\n\t\t}\n\t\t// Calculate PP of bulk-buy modes\n\t\tCacheBuildingsBulkPP(CacheObjects10);\n\t\tCacheBuildingsBulkPP(CacheObjects100);\n\t} else if (Game.buyMode > 0) {\n\t\t// Calculate PP and colors when compared to purchase of selected bulk mode\n\t\tlet target;\n\t\tif (Game.buyBulk === 1) target = CacheObjects1;\n\t\telse if (Game.buyBulk === 10) target = CacheObjects10;\n\t\telse if (Game.buyBulk === 100) target = CacheObjects100;\n\t\tfor (const i of Object.keys(target)) {\n\t\t\tif (Game.cookiesPs) {\n\t\t\t\ttarget[i].pp = (Math.max(Game.Objects[i].bulkPrice - (Game.cookies + GetWrinkConfigBank()), 0) / Game.cookiesPs) + (Game.Objects[i].bulkPrice / target[i].bonus);\n\t\t\t} else target[i].pp = (Game.Objects[i].bulkPrice / target[i].bonus);\n\t\t\tCacheArrayOfPPs.push([target[i].pp, Game.Objects[i].bulkPrice]);\n\t\t}\n\t\t// Set CM.Cache.min to best non-excluded buidliung\n\t\tCacheArrayOfPPs.sort((a, b) => a[0] - b[0]);\n\t\tif (CMOptions.PPOnlyConsiderBuyable) {\n\t\t\twhile (CacheArrayOfPPs[0][1] > Game.cookies) {\n\t\t\t\tif (CacheArrayOfPPs.length === 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tCacheArrayOfPPs.shift();\n\t\t\t}\n\t\t}\n\t\tCacheMinPP = CacheArrayOfPPs[CMOptions.PPExcludeTop][0];\n\t\tCacheMaxPP = CacheArrayOfPPs[CacheArrayOfPPs.length - 1][0];\n\t\tCacheMidPP = ((CacheMaxPP - CacheMinPP) / 2) + CacheMinPP;\n\n\t\tfor (const i of Object.keys(CacheObjects1)) {\n\t\t\ttarget[i].color = ColourOfPP(target[i], Game.Objects[i].bulkPrice);\n\t\t\t// Colour based on excluding certain top-buildings\n\t\t\tfor (let j = 0; j < CMOptions.PPExcludeTop; j++) {\n\t\t\t\tif (target[i].pp === CacheArrayOfPPs[j][0]) target[i].color = ColorGray;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * This functions caches the buildings of bulk-buy mode when PP is compared against optimal single-purchase building\n * It saves all date in CM.Cache.Objects...\n * It is called by CM.Cache.CacheBuildingsPP()\n */\nfunction CacheBuildingsBulkPP(target) {\n\tfor (const i of Object.keys(target)) {\n\t\tif (Game.cookiesPs) {\n\t\t\ttarget[i].pp = (Math.max(target[i].price - (Game.cookies + GetWrinkConfigBank()), 0) / Game.cookiesPs) + (target[i].price / target[i].bonus);\n\t\t} else target[i].pp = (target[i].price / target[i].bonus);\n\n\t\ttarget[i].color = ColourOfPP(target[i], target[i].price);\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Cache/PP/Upgrade.js\n\n\n\n\n/**\n * This functions caches the PP of each building it saves all date in CM.Cache.Upgrades\n * It is called by CM.Cache.CachePP()\n */\nfunction CacheUpgradePP() {\n\tfor (const i of Object.keys(CacheUpgrades)) {\n\t\tif (Game.cookiesPs) {\n\t\t\tCacheUpgrades[i].pp = (Math.max(Game.Upgrades[i].getPrice() - (Game.cookies + GetWrinkConfigBank()), 0) / Game.cookiesPs) + (Game.Upgrades[i].getPrice() / CacheUpgrades[i].bonus);\n\t\t} else CacheUpgrades[i].pp = (Game.Upgrades[i].getPrice() / CacheUpgrades[i].bonus);\n\t\tif (Number.isNaN(CacheUpgrades[i].pp)) CacheUpgrades[i].pp = Infinity;\n\n\t\tCacheUpgrades[i].color = ColourOfPP(CacheUpgrades[i], Game.Upgrades[i].getPrice());\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Cache/PP/PP.js\n/**\n * Section: Functions related to caching PP */\n\n\n\n\n/**\n * This functions caches the PP of each building and upgrade and stores it in the cache\n * It is called by CM.Cache.LoopCache() and CM.Cache.InitCache()\n */\nfunction CachePP() {\n\tCacheBuildingsPP();\n\tCacheUpgradePP();\n}\n\n;// CONCATENATED MODULE: ./src/Sim/ReplacedGameFunctions/SimGetHeavenlyMultiplier.js\n\n\n\n\n/**\n * This functions creates functions similarly to Game.GetHeavenlyMultiplier but checks Sim Data instead of Game Data\n */\nfunction SimGetHeavenlyMultiplier() {\n\tlet heavenlyMult = 0;\n\tif (SimHas('Heavenly chip secret')) heavenlyMult += 0.05;\n\tif (SimHas('Heavenly cookie stand')) heavenlyMult += 0.20;\n\tif (SimHas('Heavenly bakery')) heavenlyMult += 0.25;\n\tif (SimHas('Heavenly confectionery')) heavenlyMult += 0.25;\n\tif (SimHas('Heavenly key')) heavenlyMult += 0.25;\n\t// if (SimHasAura('Dragon God')) heavenlyMult*=1.05;\n\theavenlyMult *= 1 + SimAuraMult('Dragon God') * 0.05;\n\tif (SimHas('Lucky digit')) heavenlyMult *= 1.01;\n\tif (SimHas('Lucky number')) heavenlyMult *= 1.01;\n\tif (SimHas('Lucky payout')) heavenlyMult *= 1.01;\n\tif (Game.hasGod) {\n\t\tconst godLvl = SimHasGod('creation');\n\t\tif (godLvl === 1) heavenlyMult *= 0.7;\n\t\telse if (godLvl === 2) heavenlyMult *= 0.8;\n\t\telse if (godLvl === 3) heavenlyMult *= 0.9;\n\t}\n\treturn heavenlyMult;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/SimulationData/SimWin.js\n/* eslint-disable no-unused-vars */\n\n\n/**\n * This function \"wins\" an achievement in the current sim data\n * It functions similarly to Game.Win()\n * It is not created by CM.Sim.CreateSimFunctions() in order to avoid spamming pop-ups upon winning\n * @param\t{string}\twhat\tName of the achievement\n */\nfunction SimWin(what) {\n\tif (SimAchievements[what]) {\n\t\tif (SimAchievements[what].won === 0) {\n\t\t\tSimAchievements[what].won = 1;\n\t\t\tif (Game.Achievements[what].pool !== 'shadow') SimAchievementsOwned++;\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Sim/Calculations/CalculateGains.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n\n\n\n/**\n * This function calculates the CPS of the current \"sim data\"\n * It is similar to Game.CalculateGains()\n * It is called at the start of any function that simulates certain behaviour or actions\n * @global\t{number}\tCM.Sim.cookiesPs\tThe CPS of the current sim data\n */\nfunction CalculateGains() {\n\tSimCookiesPs = 0;\n\tlet mult = 1;\n\t// Include minigame effects\n\tconst effs = {};\n\tfor (const i of Object.keys(Game.Objects)) {\n\t\tif (Game.Objects[i].minigameLoaded && Game.Objects[i].minigame.effs) {\n\t\t\tconst myEffs = Game.Objects[i].minigame.effs;\n\t\t\tfor (const ii in myEffs) {\n\t\t\t\tif (effs[ii]) effs[ii] *= myEffs[ii];\n\t\t\t\telse effs[ii] = myEffs[ii];\n\t\t\t}\n\t\t}\n\t}\n\tSimEffs = effs;\n\n\tif (Game.ascensionMode !== 1) mult += parseFloat(SimPrestige) * 0.01 * SimHeavenlyPower * SimGetHeavenlyMultiplier();\n\n\tmult *= SimEff('cps');\n\n\tif (SimHas('Heralds') && Game.ascensionMode !== 1) mult *= 1 + 0.01 * Game.heralds;\n\n\tfor (const i of Object.keys(Game.cookieUpgrades)) {\n\t\tconst me = Game.cookieUpgrades[i];\n\t\tif (SimHas(me.name)) {\n\t\t\t// Some upgrades have a functio as .power (notably the valentine cookies)\n\t\t\t// CM.Sim.InitialBuildingData has changed to use CM.Sim.Has instead of Game.Has etc.\n\t\t\t// Therefore this call is to the .power of the Sim.Object\n\t\t\tif (typeof (me.power) === 'function') {\n\t\t\t\tmult *= 1 + (SimUpgrades[me.name].power(SimUpgrades[me.name]) * 0.01);\n\t\t\t} else mult *= 1 + (me.power * 0.01);\n\t\t}\n\t}\n\n\tif (SimHas('Specialized chocolate chips')) mult *= 1.01;\n\tif (SimHas('Designer cocoa beans')) mult *= 1.02;\n\tif (SimHas('Underworld ovens')) mult *= 1.03;\n\tif (SimHas('Exotic nuts')) mult *= 1.04;\n\tif (SimHas('Arcane sugar')) mult *= 1.05;\n\n\tif (SimHas('Increased merriness')) mult *= 1.15;\n\tif (SimHas('Improved jolliness')) mult *= 1.15;\n\tif (SimHas('A lump of coal')) mult *= 1.01;\n\tif (SimHas('An itchy sweater')) mult *= 1.01;\n\tif (SimHas('Santa\\'s dominion')) mult *= 1.2;\n\n\tif (SimHas('Fortune #100')) mult *= 1.01;\n\tif (SimHas('Fortune #101')) mult *= 1.07;\n\n\tif (SimHas('Dragon scale')) mult *= 1.03;\n\n\t// Check effect of chosen Gods\n\tlet buildMult = 1;\n\tif (SimHasGod) {\n\t\tlet godLvl = SimHasGod('asceticism');\n\t\tif (godLvl === 1) mult *= 1.15;\n\t\telse if (godLvl === 2) mult *= 1.1;\n\t\telse if (godLvl === 3) mult *= 1.05;\n\n\t\tgodLvl = SimHasGod('ages');\n\t\tif (godLvl === 1) mult *= 1 + 0.15 * Math.sin((SimDateAges / 1000 / (60 * 60 * 3)) * Math.PI * 2);\n\t\telse if (godLvl === 2) mult *= 1 + 0.15 * Math.sin((SimDateAges / 1000 / (60 * 60 * 12)) * Math.PI * 2);\n\t\telse if (godLvl === 3) mult *= 1 + 0.15 * Math.sin((SimDateAges / 1000 / (60 * 60 * 24)) * Math.PI * 2);\n\n\t\tgodLvl = SimHasGod('decadence');\n\t\tif (godLvl === 1) buildMult *= 0.93;\n\t\telse if (godLvl === 2) buildMult *= 0.95;\n\t\telse if (godLvl === 3) buildMult *= 0.98;\n\n\t\tgodLvl = SimHasGod('industry');\n\t\tif (godLvl === 1) buildMult *= 1.1;\n\t\telse if (godLvl === 2) buildMult *= 1.06;\n\t\telse if (godLvl === 3) buildMult *= 1.03;\n\n\t\tgodLvl = SimHasGod('labor');\n\t\tif (godLvl === 1) buildMult *= 0.97;\n\t\telse if (godLvl === 2) buildMult *= 0.98;\n\t\telse if (godLvl === 3) buildMult *= 0.99;\n\t}\n\n\tif (SimHas('Santa\\'s legacy')) mult *= 1 + (Game.santaLevel + 1) * 0.03;\n\n\tconst milkProgress = SimAchievementsOwned / 25;\n\tlet milkMult = 1;\n\tif (SimHas('Santa\\'s milk and cookies')) milkMult *= 1.05;\n\t// if (CM.Sim.hasAura('Breath of Milk')) milkMult *= 1.05;\n\tmilkMult *= 1 + SimAuraMult('Breath of Milk') * 0.05;\n\tif (SimHasGod) {\n\t\tconst godLvl = SimHasGod('mother');\n\t\tif (godLvl === 1) milkMult *= 1.1;\n\t\telse if (godLvl === 2) milkMult *= 1.05;\n\t\telse if (godLvl === 3) milkMult *= 1.03;\n\t}\n\tmilkMult *= SimEff('milk');\n\n\tlet catMult = 1;\n\n\tif (SimHas('Kitten helpers')) catMult *= (1 + milkProgress * 0.1 * milkMult);\n\tif (SimHas('Kitten workers')) catMult *= (1 + milkProgress * 0.125 * milkMult);\n\tif (SimHas('Kitten engineers')) catMult *= (1 + milkProgress * 0.15 * milkMult);\n\tif (SimHas('Kitten overseers')) catMult *= (1 + milkProgress * 0.175 * milkMult);\n\tif (SimHas('Kitten managers')) catMult *= (1 + milkProgress * 0.2 * milkMult);\n\tif (SimHas('Kitten accountants')) catMult *= (1 + milkProgress * 0.2 * milkMult);\n\tif (SimHas('Kitten specialists')) catMult *= (1 + milkProgress * 0.2 * milkMult);\n\tif (SimHas('Kitten experts')) catMult *= (1 + milkProgress * 0.2 * milkMult);\n\tif (SimHas('Kitten consultants')) catMult *= (1 + milkProgress * 0.2 * milkMult);\n\tif (SimHas('Kitten assistants to the regional manager')) catMult *= (1 + milkProgress * 0.175 * milkMult);\n\tif (SimHas('Kitten marketeers')) catMult *= (1 + milkProgress * 0.15 * milkMult);\n\tif (SimHas('Kitten analysts')) catMult *= (1 + milkProgress * 0.125 * milkMult);\n\tif (SimHas('Kitten executives')) catMult *= (1 + milkProgress * 0.115 * milkMult);\n\tif (SimHas('Kitten angels')) catMult *= (1 + milkProgress * 0.1 * milkMult);\n\tif (SimHas('Fortune #103')) catMult *= (1 + milkProgress * 0.05 * milkMult);\n\n\tfor (const i of Object.keys(SimObjects)) {\n\t\tconst me = SimObjects[i];\n\t\tlet storedCps = me.cps(me);\n\t\tif (Game.ascensionMode !== 1) storedCps *= (1 + me.level * 0.01) * buildMult;\n\t\tif (me.name === 'Grandma' && SimHas('Milkhelp&reg; lactose intolerance relief tablets')) storedCps *= 1 + 0.05 * milkProgress * milkMult;\n\t\tSimCookiesPs += me.amount * storedCps;\n\t}\n\n\tif (SimHas('\"egg\"')) SimCookiesPs += 9;// \"egg\"\n\n\tmult *= catMult;\n\n\tlet eggMult = 1;\n\tif (SimHas('Chicken egg')) eggMult *= 1.01;\n\tif (SimHas('Duck egg')) eggMult *= 1.01;\n\tif (SimHas('Turkey egg')) eggMult *= 1.01;\n\tif (SimHas('Quail egg')) eggMult *= 1.01;\n\tif (SimHas('Robin egg')) eggMult *= 1.01;\n\tif (SimHas('Ostrich egg')) eggMult *= 1.01;\n\tif (SimHas('Cassowary egg')) eggMult *= 1.01;\n\tif (SimHas('Salmon roe')) eggMult *= 1.01;\n\tif (SimHas('Frogspawn')) eggMult *= 1.01;\n\tif (SimHas('Shark egg')) eggMult *= 1.01;\n\tif (SimHas('Turtle egg')) eggMult *= 1.01;\n\tif (SimHas('Ant larva')) eggMult *= 1.01;\n\tif (SimHas('Century egg')) {\n\t\t// The boost increases a little every day, with diminishing returns up to +10% on the 100th day\n\t\tlet day = Math.floor((SimDateCentury - Game.startDate) / 1000 / 10) * 10 / 60 / 60 / 24;\n\t\tday = Math.min(day, 100);\n\t\t// Sets a Cache value to be displayed in the Stats page, could be moved...\n\t\tCacheCentEgg = 1 + (1 - (1 - day / 100) ** 3) * 0.1;\n\t\teggMult *= CacheCentEgg;\n\t}\n\tmult *= eggMult;\n\n\tif (SimHas('Sugar baking')) mult *= (1 + Math.min(100, Game.lumps) * 0.01);\n\n\t// if (CM.Sim.hasAura('Radiant Appetite')) mult *= 2;\n\tmult *= 1 + SimAuraMult('Radiant Appetite');\n\n\tconst rawCookiesPs = SimCookiesPs * mult;\n\tfor (const i of Object.keys(Game.CpsAchievements)) {\n\t\tif (rawCookiesPs >= Game.CpsAchievements[i].threshold) SimWin(Game.CpsAchievements[i].name);\n\t}\n\n\tSimCookiesPsRaw = rawCookiesPs;\n\n\tconst n = Game.shimmerTypes.golden.n;\n\tconst auraMult = SimAuraMult('Dragon\\'s Fortune');\n\tfor (let i = 0; i < n; i++) {\n\t\tmult *= 1 + auraMult * 1.23;\n\t}\n\n\tconst name = Game.bakeryName.toLowerCase();\n\tif (name === 'orteil') mult *= 0.99;\n\telse if (name === 'ortiel') mult *= 0.98;\n\n\tif (SimHas('Elder Covenant')) mult *= 0.95;\n\n\tif (SimHas('Golden switch [off]')) {\n\t\tlet goldenSwitchMult = 1.5;\n\t\tif (SimHas('Residual luck')) {\n\t\t\tconst upgrades = Game.goldenCookieUpgrades;\n\t\t\tfor (const i of Object.keys(upgrades)) {\n\t\t\t\tif (SimHas(upgrades[i])) goldenSwitchMult += 0.1;\n\t\t\t}\n\t\t}\n\t\tmult *= goldenSwitchMult;\n\t}\n\tif (SimHas('Shimmering veil [off]')) {\n\t\tlet veilMult = 0.5;\n\t\tif (SimHas('Reinforced membrane')) veilMult += 0.1;\n\t\tmult *= 1 + veilMult;\n\t}\n\n\tif (SimHas('Magic shenanigans')) mult *= 1000;\n\tif (SimHas('Occult obstruction')) mult *= 0;\n\n\tSimCookiesPs = Game.runModHookOnValue('cps', SimCookiesPs);\n\n\tmult *= GetCPSBuffMult();\n\n\tSimCookiesPs *= mult;\n\n\t// if (Game.hasBuff('Cursed finger')) Game.cookiesPs = 0;\n}\n\n;// CONCATENATED MODULE: ./src/Data/Gamedata.js\n/** Data copied directly from the game */\n\n/** Array of the names of all fortune cookies obtainable from the ticker */\nconst Fortunes = [\n\t'Fortune #001',\n\t'Fortune #002',\n\t'Fortune #003',\n\t'Fortune #004',\n\t'Fortune #005',\n\t'Fortune #006',\n\t'Fortune #007',\n\t'Fortune #008',\n\t'Fortune #009',\n\t'Fortune #010',\n\t'Fortune #011',\n\t'Fortune #012',\n\t'Fortune #013',\n\t'Fortune #014',\n\t'Fortune #015',\n\t'Fortune #016',\n\t'Fortune #017',\n\t'Fortune #018',\n\t'Fortune #100',\n\t'Fortune #101',\n\t'Fortune #102',\n\t'Fortune #103',\n\t'Fortune #104',\n];\n\n/** Array of the names of all Halloween cookies */\nconst HalloCookies = [\n\t'Skull cookies',\n\t'Ghost cookies',\n\t'Bat cookies',\n\t'Slime cookies',\n\t'Pumpkin cookies',\n\t'Eyeball cookies',\n\t'Spider cookies',\n];\n\n/** Array of the names of all Christmas cookies */\nconst ChristCookies = ['Christmas tree biscuits',\n\t'Snowflake biscuits',\n\t'Snowman biscuits',\n\t'Holly biscuits',\n\t'Candy cane biscuits',\n\t'Bell biscuits',\n\t'Present biscuits',\n];\n\n/** Array of the names of all Valentine cookies */\nconst ValCookies = ['Pure heart biscuits',\n\t'Ardent heart biscuits',\n\t'Sour heart biscuits',\n\t'Weeping heart biscuits',\n\t'Golden heart biscuits',\n\t'Eternal heart biscuits',\n\t'Prism heart biscuits',\n];\n\n/** Array of the names of all plant drops */\nconst PlantDrops = ['Elderwort biscuits',\n\t'Bakeberry cookies',\n\t'Duketater cookies',\n\t'Green yeast digestives',\n\t'Wheat slims',\n\t'Fern tea',\n\t'Ichor syrup',\n];\n\n/** All possible effects plants and other items can have with a display-title */\nconst Effects = {\n\tbuildingCost: 'Building prices',\n\tclick: 'Cookies per click',\n\tcps: 'Total CPS',\n\tcursorCps: 'Cursor CPS',\n\tgoldenCookieDur: 'Golden cookie duration',\n\tgoldenCookieEffDur: 'Golden cookie effect duration',\n\tgoldenCookieFreq: 'Golden cookie frequency',\n\tgoldenCookieGain: 'Golden cookie gains',\n\tgrandmaCps: 'Grandma CPS',\n\titemDrops: 'Random item drop chance',\n\tmilk: 'Effect from milk',\n\treindeerDur: 'Reindeer duration',\n\treindeerFreq: 'Reindeer frequency',\n\treindeerGain: 'Reindeer gains',\n\tupgradeCost: 'Upgrade prices',\n\twrathCookieDur: 'Wrath cookie duration',\n\twrathCookieEffDur: 'Wrath cookie effect duration',\n\twrathCookieFreq: 'Wrath cookie frequency',\n\twrathCookieGain: 'Wrath cookie gains',\n\twrinklerEat: 'Wrinkler ',\n\twrinklerSpawn: 'Wrinkler spawn frequency',\n};\n\n;// CONCATENATED MODULE: ./src/Sim/ReplacedGameFunctions/SimHasAchiev.js\n\n\n/**\n * This functions creates functions similarly to Game.HasAchiev but checks Sim Data instead of Game Data\n */\nfunction SimHasAchiev(what) {\n\treturn (SimAchievements[what] ? SimAchievements[what].won : 0);\n}\n\n;// CONCATENATED MODULE: ./src/Sim/Calculations/CheckOtherAchiev.js\n\n\n\n\n\n\n/**\n * This function calculates if any special achievements have been obtained\n * If so it SimWin()'s them and the caller function will know to recall CM.Sim.CalculateGains()\n * It is called at the end of any functions that simulates certain behaviour\n */\nfunction CheckOtherAchiev() {\n\tlet grandmas = 0;\n\tfor (const i of Object.keys(Game.GrandmaSynergies)) {\n\t\tif (SimHas(Game.GrandmaSynergies[i])) grandmas++;\n\t}\n\tif (!SimHasAchiev('Elder') && grandmas >= 7) SimWin('Elder');\n\tif (!SimHasAchiev('Veteran') && grandmas >= 14) SimWin('Veteran');\n\n\tlet buildingsOwned = 0;\n\tlet mathematician = 1;\n\tlet base10 = 1;\n\tlet minAmount = 100000;\n\tfor (const i of Object.keys(SimObjects)) {\n\t\tbuildingsOwned += SimObjects[i].amount;\n\t\tminAmount = Math.min(SimObjects[i].amount, minAmount);\n\t\tif (!SimHasAchiev('Mathematician')) {\n\t\t\tif (SimObjects[i].amount < Math.min(128, 2 ** ((Game.ObjectsById.length - Game.Objects[i].id) - 1))) mathematician = 0;\n\t\t}\n\t\tif (!SimHasAchiev('Base 10')) {\n\t\t\tif (SimObjects[i].amount < (Game.ObjectsById.length - Game.Objects[i].id) * 10) base10 = 0;\n\t\t}\n\t}\n\tif (minAmount >= 1) SimWin('One with everything');\n\tif (mathematician === 1) SimWin('Mathematician');\n\tif (base10 === 1) SimWin('Base 10');\n\tif (minAmount >= 100) SimWin('Centennial');\n\tif (minAmount >= 150) SimWin('Centennial and a half');\n\tif (minAmount >= 200) SimWin('Bicentennial');\n\tif (minAmount >= 250) SimWin('Bicentennial and a half');\n\tif (minAmount >= 300) SimWin('Tricentennial');\n\tif (minAmount >= 350) SimWin('Tricentennial and a half');\n\tif (minAmount >= 400) SimWin('Quadricentennial');\n\tif (minAmount >= 450) SimWin('Quadricentennial and a half');\n\tif (minAmount >= 500) SimWin('Quincentennial');\n\tif (minAmount >= 550) SimWin('Quincentennial and a half');\n\tif (minAmount >= 600) SimWin('Sexcentennial');\n\n\tif (buildingsOwned >= 100) SimWin('Builder');\n\tif (buildingsOwned >= 500) SimWin('Architect');\n\tif (buildingsOwned >= 1000) SimWin('Engineer');\n\tif (buildingsOwned >= 2000) SimWin('Lord of Constructs');\n\tif (buildingsOwned >= 4000) SimWin('Grand design');\n\tif (buildingsOwned >= 8000) SimWin('Ecumenopolis');\n\n\tif (SimUpgradesOwned >= 20) SimWin('Enhancer');\n\tif (SimUpgradesOwned >= 50) SimWin('Augmenter');\n\tif (SimUpgradesOwned >= 100) SimWin('Upgrader');\n\tif (SimUpgradesOwned >= 200) SimWin('Lord of Progress');\n\tif (SimUpgradesOwned >= 300) SimWin('The full picture');\n\tif (SimUpgradesOwned >= 400) SimWin('When there\\'s nothing left to add');\n\n\tif (buildingsOwned >= 4000 && SimUpgradesOwned >= 300) SimWin('Polymath');\n\tif (buildingsOwned >= 8000 && SimUpgradesOwned >= 400) SimWin('Renaissance baker');\n\n\tif (SimObjects.Cursor.amount + SimObjects.Grandma.amount >= 777) SimWin('The elder scrolls');\n\n\tlet hasAllHalloCook = true;\n\tfor (const i of Object.keys(HalloCookies)) {\n\t\tif (!SimHas(HalloCookies[i])) hasAllHalloCook = false;\n\t}\n\tif (hasAllHalloCook) SimWin('Spooky cookies');\n\n\tlet hasAllChristCook = true;\n\tfor (const i of Object.keys(ChristCookies)) {\n\t\tif (!SimHas(ChristCookies[i])) hasAllChristCook = false;\n\t}\n\tif (hasAllChristCook) SimWin('Let it snow');\n\n\tif (SimHas('Fortune cookies')) {\n\t\tconst list = Game.Tiers.fortune.upgrades;\n\t\tlet fortunes = 0;\n\t\tfor (const i of Object.keys(list)) {\n\t\t\tif (SimHas(list[i].name)) fortunes++;\n\t\t}\n\t\tif (fortunes >= list.length) SimWin('O Fortuna');\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Sim/SimulationEvents/BuyBuildingBonusIncome.js\n\n\n\n\n\n\n/**\n * This function calculates the bonus income of buying a building\n * It is called by CM.Cache.CacheBuildingIncome()\n * @param\t{string}\tbuilding\tThe name of the building to be bought\n * @param\t{number}\tamount\t\tThe amount to be bought\n * @returns {number}\t\t\t\tThe bonus income of the building\n */\nfunction BuyBuildingsBonusIncome(building, amount) {\n\tCopyData();\n\tconst me = SimObjects[building];\n\tme.amount += amount;\n\n\tif (building === 'Cursor') {\n\t\tif (me.amount >= 1) SimWin('Click');\n\t\tif (me.amount >= 2) SimWin('Double-click');\n\t\tif (me.amount >= 50) SimWin('Mouse wheel');\n\t\tif (me.amount >= 100) SimWin('Of Mice and Men');\n\t\tif (me.amount >= 200) SimWin('The Digital');\n\t\tif (me.amount >= 300) SimWin('Extreme polydactyly');\n\t\tif (me.amount >= 400) SimWin('Dr. T');\n\t\tif (me.amount >= 500) SimWin('Thumbs, phalanges, metacarpals');\n\t\tif (me.amount >= 600) SimWin('With her finger and her thumb');\n\t\tif (me.amount >= 700) SimWin('Gotta hand it to you');\n\t\tif (me.amount >= 800) SimWin('The devil\\'s workshop');\n\t} else {\n\t\tfor (const j in Game.Objects[me.name].tieredAchievs) {\n\t\t\tif (me.amount >= Game.Tiers[Game.Objects[me.name].tieredAchievs[j].tier].achievUnlock) {\n\t\t\t\tSimWin(Game.Objects[me.name].tieredAchievs[j].name);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst lastAchievementsOwned = SimAchievementsOwned;\n\n\tCalculateGains();\n\n\tCheckOtherAchiev();\n\n\tif (lastAchievementsOwned !== SimAchievementsOwned) {\n\t\tCalculateGains();\n\t}\n\n\treturn SimCookiesPs - Game.cookiesPs;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/SimulationEvents/BuyUpgrades.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n\n\n\n/**\n * This function calculates the bonus income of buying a building\n * It is called by CM.Cache.CacheBuildingIncome()\n * @param\t{string}\t\t\t\tbuilding\tThe name of the upgrade to be bought\n * @returns {[{number, number}]}\t\t\t\tThe bonus income of the upgrade and the difference in MouseCPS\n */\nfunction BuyUpgradesBonusIncome(upgrade) {\n\tif (Game.Upgrades[upgrade].pool === 'toggle' || (Game.Upgrades[upgrade].bought === 0 && Game.Upgrades[upgrade].unlocked && Game.Upgrades[upgrade].pool !== 'prestige')) {\n\t\tCopyData();\n\t\tconst me = SimUpgrades[upgrade];\n\t\tif (me.name === 'Shimmering veil [on]') {\n\t\t\tSimUpgrades[\"Shimmering veil [off]\"].bought = 0;\n\t\t} else if (me.name === 'Golden switch [on]') {\n\t\t\tSimUpgrades[\"Golden switch [off]\"].bought = 0;\n\t\t} else {\n\t\t\tme.bought = (me.bought + 1) % 2;\n\t\t}\n\t\tif (Game.CountsAsUpgradeOwned(Game.Upgrades[upgrade].pool)) SimUpgradesOwned++;\n\n\t\tif (upgrade === 'Elder Pledge') {\n\t\t\tSimPledges++;\n\t\t\tif (SimPledges > 0) SimWin('Elder nap');\n\t\t\tif (SimPledges >= 5) SimWin('Elder slumber');\n\t\t} else if (upgrade === 'Elder Covenant') {\n\t\t\tSimWin('Elder calm');\n\t\t} else if (upgrade === 'Prism heart biscuits') {\n\t\t\tSimWin('Lovely cookies');\n\t\t} else if (upgrade === 'Heavenly key') {\n\t\t\tSimWin('Wholesome');\n\t\t}\n\n\t\tconst lastAchievementsOwned = SimAchievementsOwned;\n\n\t\tCalculateGains();\n\n\t\tCheckOtherAchiev();\n\n\t\tif (lastAchievementsOwned !== SimAchievementsOwned) {\n\t\t\tCalculateGains();\n\t\t}\n\n\t\tconst diffMouseCPS = MouseCps() - Game.computedMouseCps;\n\t\tif (diffMouseCPS) {\n\t\t\treturn [SimCookiesPs - Game.cookiesPs, diffMouseCPS];\n\t\t}\n\t\treturn [SimCookiesPs - Game.cookiesPs];\n\t} else {\n\t\treturn [];\n\t}\n}\n\n/**\n * This function calculates the cookies per click\n * It is called by CM.Sim.BuyUpgradesBonusIncome() when an upgrades has no bonus-income (and is thus a clicking-upgrade)\n * @returns\t{number}\tout\tThe clicking power\n */\nfunction MouseCps() {\n\tlet add = 0;\n\tif (SimHas('Thousand fingers')) add += 0.1;\n\tif (SimHas('Million fingers')) add *= 5;\n\tif (SimHas('Billion fingers')) add *= 10;\n\tif (SimHas('Trillion fingers')) add *= 20;\n\tif (SimHas('Quadrillion fingers')) add *= 20;\n\tif (SimHas('Quintillion fingers')) add *= 20;\n\tif (SimHas('Sextillion fingers')) add *= 20;\n\tif (SimHas('Septillion fingers')) add *= 20;\n\tif (SimHas('Octillion fingers')) add *= 20;\n\tif (SimHas('Nonillion fingers')) add *= 20;\n\tlet num = 0;\n\tfor (const i of Object.keys(SimObjects)) { num += SimObjects[i].amount; }\n\tnum -= SimObjects.Cursor.amount;\n\tadd *= num;\n\n\t// Can use SimCookiesPs as function is always called after CM.Sim.CalculateGains()\n\tif (SimHas('Plastic mouse')) add += SimCookiesPs * 0.01;\n\tif (SimHas('Iron mouse')) add += SimCookiesPs * 0.01;\n\tif (SimHas('Titanium mouse')) add += SimCookiesPs * 0.01;\n\tif (SimHas('Adamantium mouse')) add += SimCookiesPs * 0.01;\n\tif (SimHas('Unobtainium mouse')) add += SimCookiesPs * 0.01;\n\tif (SimHas('Eludium mouse')) add += SimCookiesPs * 0.01;\n\tif (SimHas('Wishalloy mouse')) add += SimCookiesPs * 0.01;\n\tif (SimHas('Fantasteel mouse')) add += SimCookiesPs * 0.01;\n\tif (SimHas('Nevercrack mouse')) add += SimCookiesPs * 0.01;\n\tif (SimHas('Armythril mouse')) add += SimCookiesPs * 0.01;\n\tif (SimHas('Technobsidian mouse')) add += SimCookiesPs * 0.01;\n\tif (SimHas('Plasmarble mouse')) add += SimCookiesPs * 0.01;\n\tif (SimHas('Miraculite mouse')) add += SimCookiesPs * 0.01;\n\n\tif (SimHas('Fortune #104')) add += SimCookiesPs * 0.01;\n\n\tlet mult = 1;\n\tif (SimHas('Santa\\'s helpers')) mult *= 1.1;\n\tif (SimHas('Cookie egg')) mult *= 1.1;\n\tif (SimHas('Halo gloves')) mult *= 1.1;\n\tif (SimHas('Dragon claw')) mult *= 1.03;\n\n\tif (SimHas('Aura gloves')) {\n\t\tmult *= 1 + 0.05 * Math.min(Game.Objects.Cursor.level, SimHas('Luminous gloves') ? 20 : 10);\n\t}\n\n\tmult *= SimEff('click');\n\tif (SimObjects.Temple.minigameLoaded) {\n\t\tif (SimHasGod) {\n\t\t\tconst godLvl = SimHasGod('labor');\n\t\t\tif (godLvl === 1) mult *= 1.15;\n\t\t\telse if (godLvl === 2) mult *= 1.1;\n\t\t\telse if (godLvl === 3) mult *= 1.05;\n\t\t}\n\t}\n\n\tfor (const i of Object.keys(Game.buffs)) {\n\t\tif (typeof Game.buffs[i].multClick !== 'undefined') mult *= Game.buffs[i].multClick;\n\t}\n\n\t// if (CM.Sim.auraMult('Dragon Cursor')) mult*=1.05;\n\tmult *= 1 + SimAuraMult('Dragon Cursor') * 0.05;\n\n\t// No need to make this function a CM function\n\tlet out = mult * Game.ComputeCps(1, SimHas('Reinforced index finger') + SimHas('Carpal tunnel prevention cream') + SimHas('Ambidextrous'), add);\n\n\tout = Game.runModHookOnValue('cookiesPerClick', out);\n\n\tif (Game.hasBuff('Cursed finger')) out = Game.buffs['Cursed finger'].power;\n\n\treturn out;\n}\n\n;// CONCATENATED MODULE: ./src/Cache/PriceAndIncome/PriceAndIncome.js\n/* eslint-disable no-unused-vars */\n/** Section: Functions related to caching income */\n\n\n\n\n\n\n/**\n * This functions caches the income gain of each building and upgrade and stores it in the cache\n * It is called by CM.Main.Loop() and CM.Cache.InitCache()\n */\nfunction CacheIncome() {\n\t// Simulate Building Buys for 1, 10 and 100 amount\n\tCacheObjects1 = CacheBuildingIncome(1);\n\tCacheObjects10 = CacheBuildingIncome(10);\n\tCacheObjects100 = CacheBuildingIncome(100);\n\n\t// Simulate Upgrade Buys\n\tCacheUpgradeIncome();\n}\n\n/**\n * This functions starts the calculation/simulation of the bonus income of buildings\n * It is called by CM.Cache.CacheIncome()\n * @param\t{amount}\tamount\tAmount to be bought\n * @parem\t{string}\ttarget\tThe target Cache object (\"Objects1\", \"Objects10\" or \"Objects100\")\n */\nfunction CacheBuildingIncome(amount, target) {\n\tconst result = [];\n\tfor (const i of Object.keys(Game.Objects)) {\n\t\tresult[i] = {};\n\t\tresult[i].bonus = BuyBuildingsBonusIncome(i, amount);\n\t\tif (amount !== 1) {\n\t\t\tCacheDoRemakeBuildPrices = 1;\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * This functions starts the calculation/simulation of the bonus income of upgrades\n * It is called by CM.Cache.CacheIncome()\n */\nfunction CacheUpgradeIncome() {\n\tCacheUpgrades = [];\n\tfor (const i of Object.keys(Game.Upgrades)) {\n\t\tconst bonusIncome = BuyUpgradesBonusIncome(i);\n\t\tCacheUpgrades[i] = {};\n\t\tif (bonusIncome[0]) CacheUpgrades[i].bonus = bonusIncome[0];\n\t\tif (bonusIncome[1]) CacheUpgrades[i].bonusMouse = bonusIncome[1];\n\t}\n}\n\n/**\n * This functions caches the price of each building and stores it in the cache\n */\nfunction CacheBuildingsPrices() {\n\tfor (const i of Object.keys(Game.Objects)) {\n\t\tCacheObjects1[i].price = BuildingGetPrice(Game.Objects[i], Game.Objects[i].basePrice, Game.Objects[i].amount, Game.Objects[i].free, 1);\n\t\tCacheObjects10[i].price = BuildingGetPrice(Game.Objects[i], Game.Objects[i].basePrice, Game.Objects[i].amount, Game.Objects[i].free, 10);\n\t\tCacheObjects100[i].price = BuildingGetPrice(Game.Objects[i], Game.Objects[i].basePrice, Game.Objects[i].amount, Game.Objects[i].free, 100);\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Cache/Stats/ChainCookies.js\n/* eslint-disable no-unused-vars */\n\n\n\n/**\n * This functions calculates the max possible payout given a set of variables\n * It is called by CM.Disp.CreateStatsChainSection() and CM.Cache.CacheChain()\n * @param\t{number}\t\t\t\t\tdigit\t\tNumber of Golden Cookies in chain\n * @param\t{number}\t\t\t\t\tmaxPayout\tMaximum payout\n * @param\t{number}\t\t\t\t\tmult\t\tMultiplier\n * @returns\t[{number, number, number}]\t\t\t\tTotal cookies earned, cookie needed for this and next level\n */\nfunction MaxChainCookieReward(digit, maxPayout, mult) {\n\tlet totalFromChain = 0;\n\tlet moni = 0;\n\tlet nextMoni = 0;\n\tlet nextRequired = 0;\n\tlet chain = 1 + Math.max(0, Math.ceil(Math.log(Game.cookies) / Math.LN10) - 10);\n\twhile (nextMoni < maxPayout) {\n\t\tmoni = Math.max(digit, Math.min(Math.floor(1 / 9 * 10 ** chain * digit * mult), maxPayout * mult));\n\t\tnextMoni = Math.max(digit, Math.min(Math.floor(1 / 9 * 10 ** (chain + 1) * digit * mult), maxPayout * mult));\n\t\tnextRequired = Math.floor(1 / 9 * 10 ** (chain + 1) * digit * mult);\n\t\ttotalFromChain += moni;\n\t\tchain++;\n\t}\n\treturn [totalFromChain, moni, nextRequired];\n}\n\n/**\n * This functions caches data related to Chain Cookies reward from Golden Cookioes\n * It is called by CM.Main.Loop() upon changes to cps and CM.Cache.InitCache()\n * @global\t[{number, number}]\tCM.Cache.ChainMaxReward\t\t\tTotal cookies earned, and cookies needed for next level for normal chain\n * @global\t{number}\t\t\tCM.Cache.ChainRequired\t\t\tCookies needed for maximum reward for normal chain\n * @global\t{number}\t\t\tCM.Cache.ChainRequiredNext\t\tTotal cookies needed for next level for normal chain\n * @global\t[{number, number}]\tCM.Cache.ChainMaxWrathReward\t\t\tTotal cookies earned, and cookies needed for next level for wrath chain\n * @global\t{number}\t\t\tCM.Cache.ChainWrathRequired\t\t\tCookies needed for maximum reward for wrath chain\n * @global\t{number}\t\t\tCM.Cache.ChainWrathRequiredNext\t\tTotal cookies needed for next level for wrath chain\n * @global\t[{number, number}]\tCM.Cache.ChainFrenzyMaxReward\t\t\tTotal cookies earned, and cookies needed for next level for normal frenzy chain\n * @global\t{number}\t\t\tCM.Cache.ChainFrenzyRequired\t\t\tCookies needed for maximum reward for normal frenzy chain\n * @global\t{number}\t\t\tCM.Cache.ChainFrenzyRequiredNext\t\tTotal cookies needed for next level for normal frenzy chain\n * @global\t[{number, number}]\tCM.Cache.ChainFrenzyWrathMaxReward\t\t\tTotal cookies earned, and cookies needed for next level for wrath frenzy chain\n * @global\t{number}\t\t\tCM.Cache.ChainFrenzyWrathRequired\t\t\tCookies needed for maximum reward for wrath frenzy chain\n * @global\t{number}\t\t\tCM.Cache.ChainFrenzyWrathRequiredNext\t\tTotal cookies needed for next level for wrath frenzy chain\n */\nfunction CacheChain() {\n\tlet maxPayout = CacheNoGoldSwitchCookiesPS * 60 * 60 * 6 * CacheDragonsFortuneMultAdjustment;\n\t// Removes effect of Frenzy etc.\n\tconst cpsBuffMult = GetCPSBuffMult();\n\tif (cpsBuffMult > 0) maxPayout /= cpsBuffMult;\n\telse maxPayout = 0;\n\n\tCacheChainMaxReward = MaxChainCookieReward(7, maxPayout, CacheGoldenCookiesMult);\n\tCacheChainRequired = CacheChainMaxReward[1] * 2 / CacheGoldenCookiesMult;\n\tCacheChainRequiredNext = CacheChainMaxReward[2] / 60 / 60 / 6 / CacheDragonsFortuneMultAdjustment;\n\n\tCacheChainWrathMaxReward = MaxChainCookieReward(6, maxPayout, CacheWrathCookiesMult);\n\tCacheChainWrathRequired = CacheChainWrathMaxReward[1] * 2 / CacheWrathCookiesMult;\n\tCacheChainWrathRequiredNext = CacheChainWrathMaxReward[2] / 60 / 60 / 6 / CacheDragonsFortuneMultAdjustment;\n\n\tCacheChainFrenzyMaxReward = MaxChainCookieReward(7, maxPayout * 7, CacheGoldenCookiesMult);\n\tCacheChainFrenzyRequired = CacheChainFrenzyMaxReward[1] * 2 / CacheGoldenCookiesMult;\n\tCacheChainFrenzyRequiredNext = CacheChainFrenzyMaxReward[2] / 60 / 60 / 6 / CacheDragonsFortuneMultAdjustment;\n\n\tCacheChainFrenzyWrathMaxReward = MaxChainCookieReward(6, maxPayout * 7, CacheWrathCookiesMult);\n\tCacheChainFrenzyWrathRequired = CacheChainFrenzyWrathMaxReward[1] * 2 / CacheWrathCookiesMult;\n\tCacheChainFrenzyWrathRequiredNext = CacheChainFrenzyWrathMaxReward[2] / 60 / 60 / 6 / CacheDragonsFortuneMultAdjustment;\n}\n\n;// CONCATENATED MODULE: ./src/Cache/Stats/HeavenlyChips.js\n/* eslint-disable no-unused-vars */\n\n\n/**\n * This functions caches the heavenly chips per second in the last five seconds\n * It is called by CM.Cache.LoopCache()\n * @global\t{number}\tCM.Cache.HCPerSecond\tThe Heavenly Chips per second in the last five seconds\n */\nfunction CacheHeavenlyChipsPS() {\n\tconst currDate = Math.floor(Date.now() / 1000);\n\t// Only calculate every new second\n\tif ((Game.T / Game.fps) % 1 === 0) {\n\t\tconst chipsOwned = Game.HowMuchPrestige(Game.cookiesReset);\n\t\tconst ascendNowToOwn = Math.floor(Game.HowMuchPrestige(Game.cookiesReset + Game.cookiesEarned));\n\t\tconst ascendNowToGet = ascendNowToOwn - Math.floor(chipsOwned);\n\n\t\t// Add recent gains to AvgQueue's\n\t\tconst timeDiff = currDate - CacheLastHeavenlyCheck;\n\t\tconst heavenlyChipsDiffAvg = Math.max(0, (ascendNowToGet - CacheLastHeavenlyChips)) / timeDiff;\n\t\tfor (let i = 0; i < timeDiff; i++) {\n\t\t\tHeavenlyChipsDiff.addLatest(heavenlyChipsDiffAvg);\n\t\t}\n\n\t\t// Store current data for next loop\n\t\tCacheLastHeavenlyCheck = currDate;\n\t\tCacheLastHeavenlyChips = ascendNowToGet;\n\n\t\t// Get average gain over period of 5 seconds\n\t\tCacheHCPerSecond = HeavenlyChipsDiff.calcAverage(5);\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/MenuSections/CreateMissingUpgrades.js\n/** Functions related to displaying the missing upgrades in the Statistics page */\n\n\n\n/**\n * This function creates the missing upgrades sections for prestige, normal and cookie upgrades\n */\nfunction AddMissingUpgrades() {\n\tfor (const menuSection of (l('menu').children)) {\n\t\tif (menuSection.children[0]) {\n\t\t\tif (menuSection.children[0].innerHTML === 'Prestige' && CacheMissingUpgradesPrestige) {\n\t\t\t\tconst prestigeUpgradesMissing = CacheMissingUpgradesPrestige.match(new RegExp('div', 'g') || 0).length / 2;\n\t\t\t\tconst title = document.createElement('div');\n\t\t\t\ttitle.id = 'CMMissingUpgradesPrestigeTitle';\n\t\t\t\ttitle.className = 'listing';\n\t\t\t\tconst titlefrag = document.createElement('div');\n\t\t\t\ttitlefrag.innerHTML = `<b>Missing Prestige upgrades:</b> ${prestigeUpgradesMissing}/${Game.PrestigeUpgrades.length} (${Math.floor((prestigeUpgradesMissing / Game.PrestigeUpgrades.length) * 100)}%)`;\n\t\t\t\ttitle.appendChild(titlefrag);\n\t\t\t\tmenuSection.appendChild(title);\n\t\t\t\tconst upgrades = document.createElement('div');\n\t\t\t\tupgrades.className = 'listing crateBox';\n\t\t\t\tupgrades.innerHTML = CacheMissingUpgradesPrestige;\n\t\t\t\tmenuSection.appendChild(upgrades);\n\t\t\t} else if (menuSection.children[0].innerHTML === 'Upgrades') {\n\t\t\t\tif (CacheMissingUpgrades) {\n\t\t\t\t\tconst normalUpgradesMissing = CacheMissingUpgrades.match(new RegExp('div', 'g') || 0).length / 2;\n\t\t\t\t\tconst title = document.createElement('div');\n\t\t\t\t\ttitle.id = 'CMMissingUpgradesTitle';\n\t\t\t\t\ttitle.className = 'listing';\n\t\t\t\t\tconst titlefrag = document.createElement('div');\n\t\t\t\t\ttitlefrag.innerHTML = `<b>Missing normal upgrades:</b> ${normalUpgradesMissing}/${Game.UpgradesByPool[''].length + Game.UpgradesByPool.tech.length} (${Math.floor((normalUpgradesMissing / (Game.UpgradesByPool[''].length + Game.UpgradesByPool.tech.length)) * 100)}%)`;\n\t\t\t\t\ttitle.appendChild(titlefrag);\n\t\t\t\t\tmenuSection.insertBefore(title, menuSection.childNodes[3]);\n\t\t\t\t\tconst upgrades = document.createElement('div');\n\t\t\t\t\tupgrades.className = 'listing crateBox';\n\t\t\t\t\tupgrades.innerHTML = CacheMissingUpgrades;\n\t\t\t\t\tmenuSection.insertBefore(upgrades, document.getElementById('CMMissingUpgradesTitle').nextSibling);\n\t\t\t\t}\n\t\t\t\tif (CacheMissingUpgradesCookies) {\n\t\t\t\t\tconst cookieUpgradesMissing = CacheMissingUpgradesCookies.match(new RegExp('div', 'g') || 0).length / 2;\n\t\t\t\t\tconst title = document.createElement('div');\n\t\t\t\t\ttitle.id = 'CMMissingUpgradesCookiesTitle';\n\t\t\t\t\ttitle.className = 'listing';\n\t\t\t\t\tconst titlefrag = document.createElement('div');\n\t\t\t\t\ttitlefrag.innerHTML = `<b>Missing Cookie upgrades:</b> ${cookieUpgradesMissing}/${Game.UpgradesByPool.cookie.length} (${Math.floor((cookieUpgradesMissing / Game.UpgradesByPool.cookie.length) * 100)}%)`;\n\t\t\t\t\ttitle.appendChild(titlefrag);\n\t\t\t\t\tmenuSection.appendChild(title);\n\t\t\t\t\tconst upgrades = document.createElement('div');\n\t\t\t\t\tupgrades.className = 'listing crateBox';\n\t\t\t\t\tupgrades.innerHTML = CacheMissingUpgradesCookies;\n\t\t\t\t\tmenuSection.appendChild(upgrades);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * This function returns the \"crates\" (icons) for missing upgrades in the stats sections\n * It returns a html string that gets appended to the respective CM.Cache.MissingUpgrades-variable by CM.Cache.CacheMissingUpgrades()\n * @param\t{object}\tme\tThe upgrade object\n * @returns\t{string}\t?\tThe HTML string that creates the icon.\n */\nfunction crateMissing(me) {\n\tlet classes = 'crate upgrade missing';\n\tif (me.pool === 'prestige') classes += ' heavenly';\n\n\tlet noFrame = 0;\n\tif (!Game.prefs.crates) noFrame = 1;\n\tif (noFrame) classes += ' noFrame';\n\n\tlet icon = me.icon;\n\tif (me.iconFunction) icon = me.iconFunction();\n\tconst tooltip = `function() {return Game.crateTooltip(Game.UpgradesById[${me.id}], 'stats');}`;\n\treturn `<div class=\"${classes}\"\n\t${Game.getDynamicTooltip(tooltip, 'top', true)}\n\tstyle = \"${(`${icon[2] ? `background-image: url(${icon[2]});` : ''}background-position:${-icon[0] * 48}px ${-icon[1] * 48}px`)};\">\n\t</div>`;\n}\n\n;// CONCATENATED MODULE: ./src/Cache/Stats/MissingUpgrades.js\n/* eslint-disable no-unused-vars */\n\n\n\n/**\n * This functions caches variables related to missing upgrades\n * It is called by CM.Main.Loop() and CM.Cache.InitCache()\n * @global\t{string}\tCM.Cache.MissingUpgrades\t\t\tString containig the HTML to create the \"crates\" for missing normal upgrades\n * @global\t{string}\tCM.Cache.MissingUpgradesCookies\t\tString containig the HTML to create the \"crates\" for missing cookie upgrades\n * @global\t{string}\tCM.Cache.MissingUpgradesPrestige\tString containig the HTML to create the \"crates\" for missing prestige upgrades\n */\nfunction CacheAllMissingUpgrades() {\n\tCacheMissingUpgrades = '';\n\tCacheMissingUpgradesCookies = '';\n\tCacheMissingUpgradesPrestige = '';\n\tconst list = [];\n\t// sort the upgrades\n\tfor (const i of Object.keys(Game.Upgrades)) {\n\t\tlist.push(Game.Upgrades[i]);\n\t}\n\tconst sortMap = function (a, b) {\n\t\tif (a.order > b.order) return 1;\n\t\telse if (a.order < b.order) return -1;\n\t\treturn 0;\n\t};\n\tlist.sort(sortMap);\n\n\tfor (const i of Object.keys(list)) {\n\t\tconst me = list[i];\n\n\t\tif (me.bought === 0) {\n\t\t\tlet str = '';\n\n\t\t\tstr += crateMissing(me);\n\t\t\tif (me.pool === 'prestige') CacheMissingUpgradesPrestige += str;\n\t\t\telse if (me.pool === 'cookie') CacheMissingUpgradesCookies += str;\n\t\t\telse if (me.pool !== 'toggle' && me.pool !== 'unused' && me.pool !== 'debug') CacheMissingUpgrades += str;\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Cache/Stats/Reindeer.js\n/* eslint-disable no-unused-vars */\n\n\n/**\n * This functions caches the reward of popping a reindeer\n * It is called by CM.Main.Loop() and CM.Cache.InitCache()\n * @global\t{number}\tCM.Cache.SeaSpec\tThe reward for popping a reindeer\n */\nfunction CacheSeasonSpec() {\n\tif (Game.season === 'christmas') {\n\t\tlet val = Game.cookiesPs * 60;\n\t\tif (Game.hasBuff('Elder frenzy')) val *= 0.5;\n\t\tif (Game.hasBuff('Frenzy')) val *= 0.75;\n\t\tCacheSeaSpec = Math.max(25, val);\n\t\tif (Game.Has('Ho ho ho-flavored frosting')) CacheSeaSpec *= 2;\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Cache/Stats/Stats.js\n/* eslint-disable no-unused-vars */\n/** Functions related to Caching stats */\n\n\n\n\n\n/**\n * This functions caches variables related to the stats page\n */\nfunction CacheStatsCookies() {\n\tCacheLucky = (CacheNoGoldSwitchCookiesPS * 900) / 0.15;\n\tCacheLucky *= CacheDragonsFortuneMultAdjustment;\n\tconst cpsBuffMult = GetCPSBuffMult();\n\tif (cpsBuffMult > 0) CacheLucky /= cpsBuffMult;\n\telse CacheLucky = 0;\n\tCacheLuckyReward = CacheGoldenCookiesMult * (CacheLucky * 0.15) + 13;\n\tCacheLuckyWrathReward = CacheWrathCookiesMult * (CacheLucky * 0.15) + 13;\n\tCacheLuckyFrenzy = CacheLucky * 7;\n\tCacheLuckyRewardFrenzy = CacheGoldenCookiesMult * (CacheLuckyFrenzy * 0.15) + 13;\n\tCacheLuckyWrathRewardFrenzy = CacheWrathCookiesMult * (CacheLuckyFrenzy * 0.15) + 13;\n\tCacheConjure = CacheLucky * 2;\n\tCacheConjureReward = CacheConjure * 0.15;\n\n\tCacheEdifice = 0;\n\tlet max = 0;\n\tlet n = 0;\n\tfor (const i of Object.keys(Game.Objects)) {\n\t\tif (Game.Objects[i].amount > max) max = Game.Objects[i].amount;\n\t\tif (Game.Objects[i].amount > 0) n++;\n\t}\n\tfor (const i of Object.keys(Game.Objects)) {\n\t\tif ((Game.Objects[i].amount < max || n === 1)\n\t\t\t&& Game.Objects[i].amount < 400\n\t\t\t&& Game.Objects[i].price * 2 > CacheEdifice) {\n\t\t\tCacheEdifice = Game.Objects[i].price * 2;\n\t\t\tCacheEdificeBuilding = i;\n\t\t}\n\t}\n}\n\n/**\n * This functions calculates the multipliers of Golden and Wrath cookie rewards\n */\nfunction CacheGoldenAndWrathCookiesMults() {\n\tlet goldenMult = 1;\n\tlet wrathMult = 1;\n\tlet mult = 1;\n\n\t// Factor auras and upgrade in mults\n\tif (SimHas('Green yeast digestives')) mult *= 1.01;\n\tif (SimHas('Dragon fang')) mult *= 1.03;\n\n\tgoldenMult *= 1 + Game.auraMult('Ancestral Metamorphosis') * 0.1;\n\tgoldenMult *= Game.eff('goldenCookieGain');\n\twrathMult *= 1 + Game.auraMult('Unholy Dominion') * 0.1;\n\twrathMult *= Game.eff('wrathCookieGain');\n\n\t// Calculate final golden and wrath multipliers\n\tCacheGoldenCookiesMult = mult * goldenMult;\n\tCacheWrathCookiesMult = mult * wrathMult;\n\n\t// Calculate Dragon's Fortune multiplier adjustment:\n\t// If Dragon's Fortune (or Reality Bending) aura is active and there are currently no golden cookies,\n\t// compute a multiplier adjustment to apply on the current CPS to simulate 1 golden cookie on screen.\n\t// Otherwise, the aura effect will be factored in the base CPS making the multiplier not requiring adjustment.\n\tCacheDragonsFortuneMultAdjustment = 1;\n\tif (Game.shimmerTypes.golden.n === 0) {\n\t\tCacheDragonsFortuneMultAdjustment *= 1 + Game.auraMult('Dragon\\'s Fortune') * 1.23;\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Cache/Wrinklers/Wrinklers.js\n/* eslint-disable no-unused-vars */\n/** Caches data related to Wrinklers */\n\n\n\n\n/**\n * This functions caches data related to Wrinklers\n * It is called by CM.Cache.LoopCache() and CM.Cache.InitCache()\n * @global\t{number}\t\t\t\tCM.Cache.WrinklersTotal\t\tThe cookies of all wrinklers\n * @global\t{number}\t\t\t\tCM.Cache.WrinklersNormal\tThe cookies of all normal wrinklers\n * @global\t{[{number}, {number}]}\tCM.Cache.WrinklersFattest\tA list containing the cookies and the id of the fattest non-shiny wrinkler\n */\nfunction CacheWrinklers() {\n\tfor (let i = 0; i < Game.wrinklers.length; i++) {\n\t\tlet sucked = Game.wrinklers[i].sucked;\n\t\tlet toSuck = 1.1;\n\t\tif (Game.Has('Sacrilegious corruption')) toSuck *= 1.05;\n\t\tif (Game.wrinklers[i].type === 1) toSuck *= 3; // Shiny wrinklers\n\t\tsucked *= toSuck;\n\t\tif (Game.Has('Wrinklerspawn')) sucked *= 1.05;\n\t\tif (SimObjects.Temple.minigameLoaded) {\n\t\t\tconst godLvl = Game.hasGod('scorn');\n\t\t\tif (godLvl === 1) sucked *= 1.15;\n\t\t\telse if (godLvl === 2) sucked *= 1.1;\n\t\t\telse if (godLvl === 3) sucked *= 1.05;\n\t\t}\n\t\tWrinklersTotal += sucked;\n\t\tif (Game.wrinklers[i].type === 0) {\n\t\t\tWrinklersNormal += sucked;\n\t\t\tif (sucked > WrinklersFattest[0]) WrinklersFattest = [sucked, i];\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Cache/CacheInit.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * This functions runs all cache-functions to generate all \"full\" cache\n */\nfunction InitCache() {\n\tCacheDragonAuras();\n\tCacheWrinklers();\n\tCacheStatsCookies();\n\tCacheGoldenAndWrathCookiesMults();\n\tCacheChain();\n\tCacheAllMissingUpgrades();\n\tCacheSeasonSpec();\n\tInitCookiesDiff();\n\tHeavenlyChipsDiff = new CMAvgQueue(5); // Used by CM.Cache.CacheHeavenlyChipsPS()\n\tCacheHeavenlyChipsPS();\n\tCacheAvgCPS();\n\tCacheIncome();\n\tCacheBuildingsPrices();\n\tCachePP();\n}\n\n;// CONCATENATED MODULE: ./src/Data/SettingsDefault.js\n/** This array describes all default settings */\nconst ConfigDefault = {\n\tBotBar: 1,\n\tTimerBar: 1,\n\tTimerBarPos: 0,\n\tTimerBarOverlay: 2,\n\tBuildColor: 1,\n\tBulkBuildColor: 0,\n\tUpBarColor: 1,\n\tUpgradeBarFixedPos: 1,\n\tCalcWrink: 0,\n\tCPSMode: 1,\n\tAvgCPSHist: 3,\n\tAvgClicksHist: 0,\n\tColorPPBulkMode: 1,\n\tPPExcludeTop: 0,\n\tPPSecondsLowerLimit: 0,\n\tPPOnlyConsiderBuyable: 0,\n\tToolWarnBon: 0,\n\tTitle: 1,\n\tGeneralSound: 1,\n\tGCNotification: 0,\n\tGCFlash: 1,\n\tGCSound: 1,\n\tGCVolume: 100,\n\tGCSoundURL: 'https://freesound.org/data/previews/66/66717_931655-lq.mp3',\n\tFortuneNotification: 0,\n\tFortuneFlash: 1,\n\tFortuneSound: 1,\n\tFortuneVolume: 100,\n\tFortuneSoundURL: 'https://freesound.org/data/previews/174/174027_3242494-lq.mp3',\n\tSeaNotification: 0,\n\tSeaFlash: 1,\n\tSeaSound: 1,\n\tSeaVolume: 100,\n\tSeaSoundURL: 'https://www.freesound.org/data/previews/121/121099_2193266-lq.mp3',\n\tGardFlash: 1,\n\tGardSound: 1,\n\tGardVolume: 100,\n\tGardSoundURL: 'https://freesound.org/data/previews/103/103046_861714-lq.mp3',\n\tMagicNotification: 0,\n\tMagicFlash: 1,\n\tMagicSound: 1,\n\tMagicVolume: 100,\n\tMagicSoundURL: 'https://freesound.org/data/previews/221/221683_1015240-lq.mp3',\n\tWrinklerNotification: 0,\n\tWrinklerFlash: 1,\n\tWrinklerSound: 1,\n\tWrinklerVolume: 100,\n\tWrinklerSoundURL: 'https://freesound.org/data/previews/124/124186_8043-lq.mp3',\n\tWrinklerMaxNotification: 0,\n\tWrinklerMaxFlash: 1,\n\tWrinklerMaxSound: 1,\n\tWrinklerMaxVolume: 100,\n\tWrinklerMaxSoundURL: 'https://freesound.org/data/previews/152/152743_15663-lq.mp3',\n\tTooltipBuildUpgrade: 1,\n\tTooltipAmor: 0,\n\tToolWarnLucky: 1,\n\tToolWarnLuckyFrenzy: 1,\n\tToolWarnConjure: 1,\n\tToolWarnConjureFrenzy: 1,\n\tToolWarnEdifice: 1,\n\tToolWarnUser: 0,\n\tToolWarnPos: 1,\n\tTooltipGrim: 1,\n\tTooltipWrink: 1,\n\tTooltipLump: 1,\n\tTooltipPlots: 1,\n\tDragonAuraInfo: 1,\n\tTooltipAscendButton: 1,\n\tStats: 1,\n\tMissingUpgrades: 1,\n\tUpStats: 1,\n\tTimeFormat: 0,\n\tDetailedTime: 1,\n\tGrimoireBar: 1,\n\tHeavenlyChipsTarget: 1,\n\tShowMissedGC: 1,\n\tScale: 2,\n\tScaleDecimals: 2,\n\tScaleSeparator: 0,\n\tScaleCutoff: 999999,\n\tColors: {\n\t\tBlue: '#4bb8f0', Green: '#00ff00', Yellow: '#ffff00', Orange: '#ff7f00', Red: '#ff0000', Purple: '#ff00ff', Gray: '#b3b3b3', Pink: '#ff1493', Brown: '#8b4513',\n\t},\n\tSortBuildings: 0,\n\tSortUpgrades: 0,\n\tGCTimer: 1,\n\tFavicon: 1,\n\tWrinklerButtons: 1,\n\tBulkBuyBlock: 0,\n\tHeader: {\n\t\tBarsColors: 1, Calculation: 1, Notification: 1, NotificationGeneral: 1, NotificationGC: 1, NotificationFC: 1, NotificationSea: 1, NotificationGard: 1, NotificationMagi: 1, NotificationWrink: 1, NotificationWrinkMax: 1, Tooltip: 1, Statistics: 1, Notation: 1, Miscellaneous: 1, Lucky: 1, Chain: 1, Spells: 1, Garden: 1, Prestige: 1, Wrink: 1, Sea: 1, Misc: 1, InfoTab: 1,\n\t},\n};\n\n/* harmony default export */ const SettingsDefault = (ConfigDefault);\n\n;// CONCATENATED MODULE: ./src/Config/CheckNotificationPermissions.js\n/**\n * This function checks if the user has given permissions for notifications\n * It is called by a change in any of the notification options\n * Note that most browsers will stop asking if the user has ignored the prompt around 6 times\n * @param \t{number}\tToggleOnOff\t\tA number indicating whether the option has been turned off (0) or on (1)\n */\nfunction CheckNotificationPermissions(ToggleOnOff) {\n\tif (ToggleOnOff === 1)\t{\n\t\t// Check if browser support Promise version of Notification Permissions\n\t\tconst checkNotificationPromise = function () {\n\t\t\ttry {\n\t\t\t\tNotification.requestPermission().then();\n\t\t\t} catch (e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\t// Check if the browser supports notifications and which type\n\t\tif (!('Notification' in window)) {\n\t\t\tconsole.log('This browser does not support notifications.');\n\t\t} else if (checkNotificationPromise()) {\n\t\t\tNotification.requestPermission().then();\n\t\t} else {\n\t\t\tNotification.requestPermission();\n\t\t}\n\t}\n}\n\n/* harmony default export */ const Config_CheckNotificationPermissions = (CheckNotificationPermissions);\n\n;// CONCATENATED MODULE: ./src/Config/Toggles/ToggleBotBar.js\n\n\n\n\n/**\n * This function toggle the bottom bar\n * It is called by CM.Disp.UpdateAscendState() and a change in CMOptions.BotBar\n */\nfunction ToggleBotBar() {\n\tif (CMOptions.BotBar === 1) {\n\t\tl('CMBotBar').style.display = '';\n\t\tUpdateBotBar();\n\t} else {\n\t\tl('CMBotBar').style.display = 'none';\n\t}\n\tUpdateBotTimerBarPosition();\n}\n\n;// CONCATENATED MODULE: ./src/Config/Toggles/ToggleDetailedTime.js\n\n\n\n\n/**\n * This function changes some of the time-displays in the game to be more detailed\n * It is called by a change in CM.Options.DetailedTime\n */\nfunction ToggleDetailedTime() {\n\tif (CMOptions.DetailedTime === 1) Game.sayTime = CMSayTime;\n\telse Game.sayTime = BackupFunctions.sayTime;\n}\n\n;// CONCATENATED MODULE: ./src/Config/Toggles/ToggleGCTimer.js\n\n\n\n\n/**\n * This function toggles GC Timers are visible\n * It is called by a change in CM.Options.GCTimer\n */\nfunction ToggleGCTimer() {\n\tif (CMOptions.GCTimer === 1) {\n\t\tfor (const i of Object.keys(GCTimers)) {\n\t\t\tGCTimers[i].style.display = 'block';\n\t\t\tGCTimers[i].style.left = CacheGoldenShimmersByID[i].l.style.left;\n\t\t\tGCTimers[i].style.top = CacheGoldenShimmersByID[i].l.style.top;\n\t\t}\n\t} else {\n\t\tfor (const i of Object.keys(GCTimers)) GCTimers[i].style.display = 'none';\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Config/Toggles/ToggleUpgradeBarAndColor.js\n\n\n\n/**\n * Section: Functions related to the Upgrade Bar\n\n/**\n * This function toggles the upgrade bar and the colours of upgrades\n * It is called by a change in CM.Options.UpBarColor\n */\nfunction ToggleUpgradeBarAndColor() {\n\tif (CMOptions.UpBarColor === 1) { // Colours and bar on\n\t\tl('CMUpgradeBar').style.display = '';\n\t\tUpdateUpgrades();\n\t} else if (CMOptions.UpBarColor === 2) { // Colours on and bar off\n\t\tl('CMUpgradeBar').style.display = 'none';\n\t\tUpdateUpgrades();\n\t} else { // Colours and bar off\n\t\tl('CMUpgradeBar').style.display = 'none';\n\t\tGame.RebuildUpgrades();\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Config/Toggles/ToggleUpgradeBarFixedPos.js\n\n\n/**\n * This function toggles the position of the upgrade bar from fixed or non-fixed mode\n * It is called by a change in CM.Options.UpgradeBarFixedPos\n */\nfunction ToggleUpgradeBarFixedPos() {\n\tif (CMOptions.UpgradeBarFixedPos === 1) { // Fix to top of screen when scrolling\n\t\tl('CMUpgradeBar').style.position = 'sticky';\n\t\tl('CMUpgradeBar').style.top = '0px';\n\t} else {\n\t\tl('CMUpgradeBar').style.position = ''; // Possible to scroll offscreen\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Config/Toggles/ToggleWrinklerButtons.js\n\n\n/**\n * This function updates the display setting of the two objects created by CM.Disp.CreateWrinklerButtons()\n * It is called by changes in CM.Options.WrinklerButtons\n */\nfunction ToggleWrinklerButtons() {\n\tif (CMOptions.WrinklerButtons) {\n\t\tl('PopAllNormalWrinklerButton').style.display = '';\n\t\tl('PopFattestWrinklerButton').style.display = '';\n\t} else {\n\t\tl('PopAllNormalWrinklerButton').style.display = 'none';\n\t\tl('PopFattestWrinklerButton').style.display = 'none';\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/HelperFunctions/RefreshScale.js\n\n\n\n\n/**\n * This function refreshes all numbers after a change in scale-setting\n * It is therefore called by a changes in CM.Options.Scale, CM.Options.ScaleDecimals, CM.Options.ScaleSeparator and CM.Options.ScaleCutoff\n */\nfunction RefreshScale() {\n\tBeautifyAll();\n\tGame.RefreshStore();\n\tGame.RebuildUpgrades();\n\n\tUpdateBotBar();\n\tUpdateBuildings();\n\tUpdateUpgrades();\n}\n\n;// CONCATENATED MODULE: ./src/Disp/HelperFunctions/UpdateColors.js\n\n\n\n\n/**\n * This function changes/refreshes colours if the user has set new standard colours\n * The function is therefore called by a change in CM.Options.Colors\n */\nfunction UpdateColors() {\n\tlet str = '';\n\tfor (let i = 0; i < Colors.length; i++) {\n\t\tstr += `.${ColorTextPre}${Colors[i]} { color: ${CMOptions.Colors[Colors[i]]}; }\\n`;\n\t}\n\tfor (let i = 0; i < Colors.length; i++) {\n\t\tstr += `.${ColorBackPre}${Colors[i]} { background-color: ${CMOptions.Colors[Colors[i]]}; }\\n`;\n\t}\n\tfor (let i = 0; i < Colors.length; i++) {\n\t\tstr += `.${ColorBorderPre}${Colors[i]} { border: 1px solid ${CMOptions.Colors[Colors[i]]}; }\\n`;\n\t}\n\tl('CMCSS').textContent = str;\n\tUpdateBuildings(); // Class has been already set\n}\n\n;// CONCATENATED MODULE: ./src/Disp/TabTitle/FavIcon.js\n\n\n\n\n/**\n * This function creates the Favicon, it is called by CM.Main.DelayInit()\n */\nfunction CreateFavicon() {\n\tconst Favicon = document.createElement('link');\n\tFavicon.id = 'CMFavicon';\n\tFavicon.rel = 'shortcut icon';\n\tFavicon.href = 'https://orteil.dashnet.org/cookieclicker/favicon.ico';\n\tdocument.getElementsByTagName('head')[0].appendChild(Favicon);\n}\n\n/**\n * This function updates the Favicon depending on whether a Golden Cookie has spawned\n * By relying on CM.Cache.spawnedGoldenShimmer it only changes for non-user spawned cookie\n */\nfunction UpdateFavicon() {\n\tif (CMOptions.Favicon === 1 && LastGoldenCookieState > 0) {\n\t\tif (CacheSpawnedGoldenShimmer.wrath) l('CMFavicon').href = 'https://aktanusa.github.io/CookieMonster/favicon/wrathCookie.ico';\n\t\telse l('CMFavicon').href = 'https://aktanusa.github.io/CookieMonster/favicon/goldenCookie.ico';\n\t} else l('CMFavicon').href = 'https://orteil.dashnet.org/cookieclicker/favicon.ico';\n}\n\n;// CONCATENATED MODULE: ./src/Data/SettingClasses.js\n/* eslint-disable max-classes-per-file */\n/** This describes all forms of settings used by Cookie Monster */\n\n/** The basic setting class */\nclass Setting {\n\tconstructor(type, group) {\n\t\tthis.type = type;\n\t\tthis.group = group;\n\t}\n}\n\n/** The standard toggle setting class */\nclass SettingStandard extends Setting {\n\tconstructor(type, group, label, desc, toggle, func = null) {\n\t\tsuper(type, group);\n\t\tthis.label = label;\n\t\tthis.desc = desc;\n\t\tthis.toggle = toggle;\n\t\tif (func) {\n\t\t\tthis.func = func;\n\t\t}\n\t}\n}\n/** The colour picker setting class */\nclass SettingColours extends Setting {\n\tconstructor(type, group, desc, func) {\n\t\tsuper(type, group);\n\t\tthis.desc = desc;\n\t\tthis.func = func;\n\t}\n}\n\n/** The volume level setting class */\nclass SettingVolume extends Setting {\n\tconstructor(type, group, label, desc) {\n\t\tsuper(type, group);\n\t\tthis.label = label;\n\t\tthis.desc = desc;\n\t\tfor (let i = 0; i < 101; i++) {\n\t\t\tthis.label[i] = `${i}%`;\n\t\t}\n\t}\n}\n\n/** The number input setting class */\nclass SettingInputNumber extends Setting {\n\tconstructor(type, group, label, desc, min, max) {\n\t\tsuper(type, group);\n\t\tthis.label = label;\n\t\tthis.desc = desc;\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Data/SettingsData.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/** This includes all options of CookieMonster and their relevant data */\nconst Config = {\n\t// Barscolors\n\tBotBar: new SettingStandard(\n\t\t'bool',\n\t\t'BarsColors',\n\t\t['Bottom Bar OFF', 'Bottom Bar ON'],\n\t\t'Building Information',\n\t\ttrue,\n\t\tfunction () { ToggleBotBar(); },\n\t),\n\tTimerBar: new SettingStandard(\n\t\t'bool',\n\t\t'BarsColors',\n\t\t['Timer Bar OFF', 'Timer Bar ON'],\n\t\t'Timers of Golden Cookie, Season Popup, Frenzy (Normal, Clot, Elder), Click Frenzy',\n\t\ttrue,\n\t\tfunction () { ToggleTimerBar(); },\n\t),\n\tTimerBarPos: new SettingStandard(\n\t\t'bool',\n\t\t'BarsColors',\n\t\t['Timer Bar Position (Top Left)', 'Timer Bar Position (Bottom)'],\n\t\t'Placement of the Timer Bar',\n\t\tfalse,\n\t\tfunction () { ToggleTimerBarPos(); },\n\t),\n\tTimerBarOverlay: new SettingStandard(\n\t\t'bool',\n\t\t'BarsColors',\n\t\t['Timer Bar Overlay OFF', 'Timer Bar Overlay Only Seconds', 'Timer Bar Overlay Full'],\n\t\t'Overlay on timers displaying seconds and/or percentage left',\n\t\ttrue,\n\t),\n\tSortBuildings: new SettingStandard(\n\t\t'bool',\n\t\t'BarsColors',\n\t\t['Sort Buildings: Default', 'Sort Buildings: PP'],\n\t\t'Sort the display of buildings in either default order or by PP',\n\t\tfalse,\n\t\tfunction () { UpdateBuildings(); },\n\t),\n\tSortUpgrades: new SettingStandard(\n\t\t'bool',\n\t\t'BarsColors',\n\t\t['Sort Upgrades: Default', 'Sort Upgrades: PP'],\n\t\t'Sort the display of upgrades in either default order or by PP',\n\t\tfalse,\n\t\tfunction () { UpdateUpgrades(); },\n\t),\n\tBuildColor: new SettingStandard(\n\t\t'bool',\n\t\t'BarsColors',\n\t\t['Building Colors OFF', 'Building Colors ON'],\n\t\t'Color code buildings',\n\t\ttrue,\n\t\tfunction () { UpdateBuildings(); },\n\t),\n\tBulkBuildColor: new SettingStandard(\n\t\t'bool',\n\t\t'BarsColors',\n\t\t['Bulk Building Colors (Single Building Color)', 'Bulk Building Colors (Calculated Bulk Color)'],\n\t\t'Color code bulk buildings based on single buildings color or calculated bulk value color',\n\t\tfalse,\n\t\tfunction () { UpdateBuildings(); },\n\t),\n\tUpBarColor: new SettingStandard(\n\t\t'bool',\n\t\t'BarsColors',\n\t\t['Upgrade Colors/Bar OFF', 'Upgrade Colors with Bar ON', 'Upgrade Colors without Bar ON'],\n\t\t'Color code upgrades and optionally add a counter bar',\n\t\tfalse,\n\t\tfunction () { ToggleUpgradeBarAndColor(); },\n\t),\n\tColors: new SettingColours(\n\t\t'color',\n\t\t'BarsColors',\n\t\t{\n\t\t\tBlue: 'Color Blue.  Used to show better than best PP building, for Click Frenzy bar, and for various labels',\n\t\t\tGreen: 'Color Green.  Used to show best PP building, for Blood Frenzy bar, and for various labels',\n\t\t\tYellow: 'Color Yellow.  Used to show between best and worst PP buildings closer to best, for Frenzy bar, and for various labels',\n\t\t\tOrange: 'Color Orange.  Used to show between best and worst PP buildings closer to worst, for Next Reindeer bar, and for various labels',\n\t\t\tRed: 'Color Red.  Used to show worst PP building, for Clot bar, and for various labels',\n\t\t\tPurple: 'Color Purple.  Used to show worse than worst PP building, for Next Cookie bar, and for various labels',\n\t\t\tGray: 'Color Gray.  Used to show negative or infinity PP, and for Next Cookie/Next Reindeer bar',\n\t\t\tPink: 'Color Pink.  Used for Dragonflight bar',\n\t\t\tBrown: 'Color Brown.  Used for Dragon Harvest bar',\n\t\t},\n\t\tfunction () { UpdateColors(); },\n\t),\n\tUpgradeBarFixedPos: new SettingStandard(\n\t\t'bool',\n\t\t'BarsColors',\n\t\t['Upgrade Bar Fixed Position OFF', 'Upgrade Bar Fixed Position ON'],\n\t\t'Lock the upgrade bar at top of the screen to prevent it from moving ofscreen when scrolling',\n\t\ttrue,\n\t\tfunction () { ToggleUpgradeBarFixedPos(); },\n\t),\n\n\t// Calculation\n\tCalcWrink: new SettingStandard(\n\t\t'bool',\n\t\t'Calculation',\n\t\t['Calculate with Wrinklers OFF', 'Calculate with Wrinklers ON', 'Calculate with Single Fattest Wrinkler ON'],\n\t\t'Calculate times and average Cookies Per Second with (only the single non-shiny fattest) Wrinklers',\n\t\ttrue,\n\t),\n\tCPSMode: new SettingStandard(\n\t\t'bool',\n\t\t'Calculation',\n\t\t['Current Cookies Per Second', 'Average Cookies Per Second'],\n\t\t'Calculate times using current Cookies Per Second or average Cookies Per Second',\n\t\tfalse,\n\t),\n\tAvgCPSHist: new SettingStandard(\n\t\t'bool',\n\t\t'Calculation',\n\t\t['Average CPS for past 10s', 'Average CPS for past 15s', 'Average CPS for past 30s', 'Average CPS for past 1m', 'Average CPS for past 5m', 'Average CPS for past 10m', 'Average CPS for past 15m', 'Average CPS for past 30m'],\n\t\t'How much time average Cookies Per Second should consider',\n\t\tfalse,\n\t),\n\tAvgClicksHist: new SettingStandard(\n\t\t'bool',\n\t\t'Calculation',\n\t\t['Average Cookie Clicks for past 1s', 'Average Cookie Clicks for past 5s', 'Average Cookie Clicks for past 10s', 'Average Cookie Clicks for past 15s', 'Average Cookie Clicks for past 30s'],\n\t\t'How much time average Cookie Clicks should consider',\n\t\tfalse,\n\t),\n\tColorPPBulkMode: new SettingStandard(\n\t\t'bool',\n\t\t'Calculation',\n\t\t['Color of PP (Compared to Single)', 'Color of PP (Compared to Bulk)'],\n\t\t'Color PP-values based on comparison with single purchase or with selected bulk-buy mode',\n\t\tfalse,\n\t\tfunction () { CachePP(); },\n\t),\n\tPPExcludeTop: new SettingStandard(\n\t\t'bool',\n\t\t'Calculation',\n\t\t[\"Don't Ignore Any\", 'Ignore 1st Best', 'Ignore 1st and 2nd Best', 'Ignore 1st, 2nd and 3rd Best'],\n\t\t'Makes CookieMonster ignore the 1st, 2nd or 3rd best buildings in labeling and colouring PP values',\n\t\ttrue,\n\t),\n\tPPSecondsLowerLimit: new SettingInputNumber(\n\t\t'numscale',\n\t\t'Calculation',\n\t\t'Lower limit for PP (in seconds): ',\n\t\t'If a building or upgrade costs less than the specified seconds of CPS it will also be considered optimal and label it as such (\"PP is less than xx seconds of CPS\"); setting to 0 ignores this option',\n\t\t0,\n\t\tInfinity,\n\t),\n\tPPOnlyConsiderBuyable: new SettingStandard(\n\t\t'bool',\n\t\t'Calculation',\n\t\t[\"Don't Ignore Non-Buyable\", 'Ignore Non-Buyable'],\n\t\t\"Makes CookieMonster label buildings and upgrades you can't buy right now red, useful in those situations where you just want to spend your full bank 'most optimally'\",\n\t\ttrue,\n\t),\n\tToolWarnBon: new SettingStandard(\n\t\t'bool',\n\t\t'Calculation',\n\t\t['Calculate Tooltip Warning With Bonus CPS OFF', 'Calculate Tooltip Warning With Bonus CPS ON'],\n\t\t'Calculate the warning with or without the bonus CPS you get from buying',\n\t\ttrue,\n\t),\n\n\t// Notification\n\tTitle: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationGeneral',\n\t\t['Title OFF', 'Title ON', 'Title Pinned Tab Highlight'],\n\t\t'Update title with Golden Cookie/Season Popup timers; pinned tab highlight only changes the title when a Golden Cookie/Season Popup spawns; \"!\" means that Golden Cookie/Reindeer can spawn',\n\t\ttrue,\n\t),\n\tGeneralSound: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationGeneral',\n\t\t['Consider Game Volume Setting OFF', 'Consider Game Volume Setting ON'],\n\t\t'Turning this toggle to \"off\" makes Cookie Monster no longer consider the volume setting of the base game, allowing mod notifications to play with base game volume turned down',\n\t\ttrue,\n\t),\n\tGCNotification: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationGC',\n\t\t['Notification OFF', 'Notification ON'],\n\t\t'Create a notification when Golden Cookie spawns',\n\t\ttrue,\n\t\tfunction () { Config_CheckNotificationPermissions(CMOptions.GCNotification); },\n\t),\n\tGCFlash: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationGC',\n\t\t['Flash OFF', 'Flash ON'],\n\t\t'Flash screen on Golden Cookie',\n\t\ttrue,\n\t),\n\tGCSound: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationGC',\n\t\t['Sound OFF', 'Sound ON'],\n\t\t'Play a sound on Golden Cookie',\n\t\ttrue,\n\t),\n\tGCVolume: new SettingVolume(\n\t\t'vol',\n\t\t'NotificationGC',\n\t\t[],\n\t\t'Volume',\n\t),\n\tGCSoundURL: new SettingStandard(\n\t\t'url',\n\t\t'NotificationGC',\n\t\t'Sound URL:',\n\t\t'URL of the sound to be played when a Golden Cookie spawns',\n\t),\n\tFortuneNotification: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationFC',\n\t\t['Notification OFF', 'Notification ON'],\n\t\t'Create a notification when Fortune Cookie is on the Ticker',\n\t\ttrue,\n\t\tfunction () { Config_CheckNotificationPermissions(CMOptions.FortuneNotification); },\n\t),\n\tFortuneFlash: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationFC',\n\t\t['Flash OFF', 'Flash ON'],\n\t\t'Flash screen on Fortune Cookie',\n\t\ttrue,\n\t),\n\tFortuneSound: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationFC',\n\t\t['Sound OFF', 'Sound ON'],\n\t\t'Play a sound on Fortune Cookie',\n\t\ttrue,\n\t),\n\tFortuneVolume: new SettingVolume(\n\t\t'vol',\n\t\t'NotificationFC',\n\t\t[],\n\t\t'Volume',\n\t),\n\n\tFortuneSoundURL: new SettingStandard(\n\t\t'url',\n\t\t'NotificationFC',\n\t\t'Sound URL:',\n\t\t'URL of the sound to be played when the Ticker has a Fortune Cookie',\n\t),\n\tSeaNotification: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationSea',\n\t\t['Notification OFF', 'Notification ON'],\n\t\t'Create a notification on Season Popup',\n\t\ttrue,\n\t\tfunction () { Config_CheckNotificationPermissions(CMOptions.SeaNotification); },\n\t),\n\tSeaFlash: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationSea',\n\t\t['Flash OFF', 'Flash ON'],\n\t\t'Flash screen on Season Popup',\n\t\ttrue,\n\t),\n\tSeaSound: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationSea',\n\t\t['Sound OFF', 'Sound ON'],\n\t\t'Play a sound on Season Popup',\n\t\ttrue,\n\t),\n\tSeaVolume: new SettingVolume(\n\t\t'vol',\n\t\t'NotificationSea',\n\t\t[],\n\t\t'Volume',\n\t),\n\tSeaSoundURL: new SettingStandard(\n\t\t'url',\n\t\t'NotificationSea',\n\t\t'Sound URL:',\n\t\t'URL of the sound to be played when a Season Special spawns',\n\t),\n\tGardFlash: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationGard',\n\t\t['Garden Tick Flash OFF', 'Flash ON'],\n\t\t'Flash screen on Garden Tick',\n\t\ttrue,\n\t),\n\tGardSound: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationGard',\n\t\t['Sound OFF', 'Sound ON'],\n\t\t'Play a sound on Garden Tick',\n\t\ttrue,\n\t),\n\tGardVolume: new SettingVolume(\n\t\t'vol',\n\t\t'NotificationGard',\n\t\t[],\n\t\t'Volume',\n\t),\n\tGardSoundURL: new SettingStandard(\n\t\t'url',\n\t\t'NotificationGard',\n\t\t'Garden Tick Sound URL:',\n\t\t'URL of the sound to be played when the garden ticks',\n\t),\n\tMagicNotification: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationMagi',\n\t\t['Notification OFF', 'Notification ON'],\n\t\t'Create a notification when magic reaches maximum',\n\t\ttrue,\n\t\tfunction () { Config_CheckNotificationPermissions(CMOptions.MagicNotification); },\n\t),\n\tMagicFlash: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationMagi',\n\t\t['Flash OFF', 'Flash ON'],\n\t\t'Flash screen when magic reaches maximum',\n\t\ttrue,\n\t),\n\tMagicSound: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationMagi',\n\t\t['Sound OFF', 'Sound ON'],\n\t\t'Play a sound when magic reaches maximum',\n\t\ttrue,\n\t),\n\tMagicVolume: new SettingVolume(\n\t\t'vol',\n\t\t'NotificationMagi',\n\t\t[],\n\t\t'Volume',\n\t),\n\tMagicSoundURL: new SettingStandard(\n\t\t'url',\n\t\t'NotificationMagi',\n\t\t'Sound URL:',\n\t\t'URL of the sound to be played when magic reaches maxium',\n\t),\n\tWrinklerNotification: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationWrink',\n\t\t['Notification OFF', 'Notification ON'],\n\t\t'Create a notification when a Wrinkler appears',\n\t\ttrue,\n\t\tfunction () { Config_CheckNotificationPermissions(CMOptions.WrinklerNotification); },\n\t),\n\tWrinklerFlash: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationWrink',\n\t\t['Flash OFF', 'Flash ON'],\n\t\t'Flash screen when a Wrinkler appears',\n\t\ttrue,\n\t),\n\tWrinklerSound: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationWrink',\n\t\t['Sound OFF', 'Sound ON'],\n\t\t'Play a sound when a Wrinkler appears',\n\t\ttrue,\n\t),\n\tWrinklerVolume: new SettingVolume(\n\t\t'vol',\n\t\t'NotificationWrink',\n\t\t[],\n\t\t'Volume',\n\t),\n\tWrinklerSoundURL: new SettingStandard(\n\t\t'url',\n\t\t'NotificationWrink',\n\t\t'Sound URL:',\n\t\t'URL of the sound to be played when a Wrinkler appears',\n\t),\n\tWrinklerMaxNotification: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationWrinkMax',\n\t\t['Notification OFF', 'Notification ON'],\n\t\t'Create a notification when the maximum amount of Wrinklers has appeared',\n\t\ttrue,\n\t\tfunction () { Config_CheckNotificationPermissions(CMOptions.WrinklerMaxNotification); },\n\t),\n\tWrinklerMaxFlash: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationWrinkMax',\n\t\t['Flash OFF', 'Flash ON'],\n\t\t'Flash screen when the maximum amount of Wrinklers has appeared',\n\t\ttrue,\n\t),\n\tWrinklerMaxSound: new SettingStandard(\n\t\t'bool',\n\t\t'NotificationWrinkMax',\n\t\t['Sound OFF', 'Sound ON'],\n\t\t'Play a sound when the maximum amount of Wrinklers has appeared',\n\t\ttrue,\n\t),\n\tWrinklerMaxVolume: new SettingVolume(\n\t\t'vol',\n\t\t'NotificationWrinkMax',\n\t\t[],\n\t\t'Volume',\n\t),\n\tWrinklerMaxSoundURL: new SettingStandard(\n\t\t'url',\n\t\t'NotificationWrinkMax',\n\t\t'Sound URL:',\n\t\t'URL of the sound to be played when the maximum amount of Wrinklers has appeared',\n\t),\n\n\t// Tooltip\n\tTooltipBuildUpgrade: new SettingStandard(\n\t\t'bool',\n\t\t'Tooltip',\n\t\t['Building/Upgrade Tooltip Information OFF', 'Building/Upgrade  Tooltip Information ON'],\n\t\t'Extra information in Building/Upgrade tooltips',\n\t\ttrue,\n\t),\n\tTooltipAmor: new SettingStandard(\n\t\t'bool',\n\t\t'Tooltip',\n\t\t['Buildings Tooltip Amortization Information OFF', 'Buildings Tooltip Amortization Information ON'],\n\t\t'Add amortization information to buildings tooltip',\n\t\ttrue,\n\t),\n\tToolWarnLucky: new SettingStandard(\n\t\t'bool',\n\t\t'Tooltip',\n\t\t['Tooltip Lucky Warning OFF', 'Tooltip Lucky Warning ON'],\n\t\t'A warning when buying if it will put the bank under the amount needed for max \"Lucky!\" rewards',\n\t\ttrue,\n\t),\n\tToolWarnLuckyFrenzy: new SettingStandard(\n\t\t'bool',\n\t\t'Tooltip',\n\t\t['Tooltip Lucky Frenzy Warning OFF', 'Tooltip Lucky Frenzy Warning ON'],\n\t\t'A warning when buying if it will put the bank under the amount needed for max \"Lucky!\" (Frenzy) rewards',\n\t\ttrue,\n\t),\n\tToolWarnConjure: new SettingStandard(\n\t\t'bool',\n\t\t'Tooltip',\n\t\t['Tooltip Conjure Warning OFF', 'Tooltip Conjure Warning ON'],\n\t\t'A warning when buying if it will put the bank under the amount needed for max \"Conjure Baked Goods\" rewards',\n\t\ttrue,\n\t),\n\tToolWarnConjureFrenzy: new SettingStandard(\n\t\t'bool',\n\t\t'Tooltip',\n\t\t['Tooltip Conjure Frenzy Warning OFF', 'Tooltip Conjure Frenzy Warning ON'],\n\t\t'A warning when buying if it will put the bank under the amount needed for max \"Conjure Baked Goods\" rewards with Frenzy active',\n\t\ttrue,\n\t),\n\tToolWarnEdifice: new SettingStandard(\n\t\t'bool',\n\t\t'Tooltip',\n\t\t['Tooltip Edifice Warning OFF', 'Tooltip Edifice Warning ON'],\n\t\t'A warning when buying if it will put the bank under the amount needed for \"Spontaneous Edifice\" to possibly give you your most expensive building',\n\t\ttrue,\n\t),\n\tToolWarnUser: new SettingInputNumber(\n\t\t'numscale',\n\t\t'Tooltip',\n\t\t'Tooltip Warning At x times CPS: ',\n\t\t'Use this to show a customized warning if buying it will put the bank under the amount equal to value times cps; setting to 0 disables the function altogether',\n\t\t0,\n\t\tInfinity,\n\t),\n\tToolWarnPos: new SettingStandard(\n\t\t'bool',\n\t\t'Tooltip',\n\t\t['Tooltip Warning Position (Left)', 'Tooltip Warning Position (Bottom)'],\n\t\t'Placement of the warning boxes',\n\t\tfalse,\n\t\tfunction () { ToggleToolWarnPos(); },\n\t),\n\tTooltipGrim: new SettingStandard(\n\t\t'bool',\n\t\t'Tooltip',\n\t\t['Grimoire Tooltip Information OFF', 'Grimoire Tooltip Information ON'],\n\t\t'Extra information in tooltip for grimoire',\n\t\ttrue,\n\t),\n\tTooltipWrink: new SettingStandard(\n\t\t'bool',\n\t\t'Tooltip',\n\t\t['Wrinkler Tooltip OFF', 'Wrinkler Tooltip ON'],\n\t\t'Shows the amount of cookies a wrinkler will give when popping it',\n\t\ttrue,\n\t),\n\tTooltipLump: new SettingStandard(\n\t\t'bool',\n\t\t'Tooltip',\n\t\t['Sugar Lump Tooltip OFF', 'Sugar Lump Tooltip ON'],\n\t\t'Shows the current Sugar Lump type in Sugar lump tooltip.',\n\t\ttrue,\n\t),\n\tTooltipPlots: new SettingStandard(\n\t\t'bool',\n\t\t'Tooltip',\n\t\t['Garden Plots Tooltip OFF', 'Garden Plots Tooltip ON'],\n\t\t'Shows a tooltip for plants that have a cookie reward.',\n\t\ttrue,\n\t),\n\tDragonAuraInfo: new SettingStandard(\n\t\t'bool',\n\t\t'Tooltip',\n\t\t['Extra Dragon Aura Info OFF', 'Extra Dragon Aura Info ON'],\n\t\t'Shows information about changes in CPS and costs in the dragon aura interface.',\n\t\ttrue,\n\t),\n\tTooltipAscendButton: new SettingStandard(\n\t\t'bool',\n\t\t'Tooltip',\n\t\t['Show Extra Info Ascend Tooltip OFF', 'Show Extra Info Ascend Tooltip ON'],\n\t\t'Shows additional info in the ascend tooltip',\n\t\ttrue,\n\t),\n\n\t// Statistics\n\tStats: new SettingStandard(\n\t\t'bool',\n\t\t'Statistics',\n\t\t['Statistics OFF', 'Statistics ON'],\n\t\t'Extra Cookie Monster statistics!',\n\t\ttrue,\n\t),\n\tMissingUpgrades: new SettingStandard(\n\t\t'bool',\n\t\t'Statistics',\n\t\t['Missing Upgrades OFF', 'Missing Upgrades ON'],\n\t\t'Shows Missing upgrades in Stats Menu. This feature can be laggy for users with a low amount of unlocked achievements.',\n\t\ttrue,\n\t),\n\tUpStats: new SettingStandard(\n\t\t'bool',\n\t\t'Statistics',\n\t\t['Statistics Update Rate (Default)', 'Statistics Update Rate (1s)'],\n\t\t'Default Game rate is once every 5 seconds',\n\t\tfalse,\n\t),\n\tTimeFormat: new SettingStandard(\n\t\t'bool',\n\t\t'Statistics',\n\t\t['Time XXd, XXh, XXm, XXs', 'Time XX:XX:XX:XX:XX'],\n\t\t'Change the time format',\n\t\tfalse,\n\t),\n\tDetailedTime: new SettingStandard(\n\t\t'bool',\n\t\t'Statistics',\n\t\t['Detailed Time OFF', 'Detailed Time ON'],\n\t\t'Change how time is displayed in certain statistics and tooltips',\n\t\ttrue,\n\t\tfunction () { ToggleDetailedTime(); },\n\t),\n\tGrimoireBar: new SettingStandard(\n\t\t'bool',\n\t\t'Statistics',\n\t\t['Grimoire Magic Meter Timer OFF', 'Grimoire Magic Meter Timer ON'],\n\t\t'A timer on how long before the Grimoire magic meter is full',\n\t\ttrue,\n\t),\n\tHeavenlyChipsTarget: new SettingInputNumber(\n\t\t'numscale',\n\t\t'Statistics',\n\t\t'Heavenly Chips Target: ',\n\t\t'Use this to set a Heavenly Chips target that will be counted towards in the \"prestige\" statsistics sections',\n\t\t1,\n\t\tInfinity,\n\t),\n\tShowMissedGC: new SettingStandard(\n\t\t'bool',\n\t\t'Statistics',\n\t\t['Missed GC OFF', 'Missed GC ON'],\n\t\t'Show a stat in the statistics screen that counts how many Golden Cookies you have missed',\n\t\ttrue,\n\t),\n\n\t// Notation\n\tScale: new SettingStandard(\n\t\t'bool',\n\t\t'Notation',\n\t\t['Game\\'s Setting Scale', 'Metric', 'Short Scale', 'Short Scale (Abbreviated)', 'Scientific Notation', 'Engineering Notation'],\n\t\t'Change how long numbers are handled',\n\t\tfalse,\n\t\tfunction () { RefreshScale(); },\n\t),\n\tScaleDecimals: new SettingStandard(\n\t\t'bool',\n\t\t'Notation',\n\t\t['1 decimals', '2 decimals', '3 decimals'],\n\t\t'Set the number of decimals used when applicable',\n\t\tfalse,\n\t\tfunction () { RefreshScale(); },\n\t),\n\tScaleSeparator: new SettingStandard(\n\t\t'bool',\n\t\t'Notation',\n\t\t['. for decimals (Standard)', '. for thousands'],\n\t\t'Set the separator used for decimals and thousands',\n\t\tfalse,\n\t\tfunction () { RefreshScale(); },\n\t),\n\tScaleCutoff: new SettingInputNumber(\n\t\t'numscale',\n\t\t'Notation',\n\t\t'Notation Cut-off Point: ',\n\t\t'The number from which CookieMonster will start formatting numbers based on chosen scale. Standard is 999,999. Setting this above 999,999,999 might break certain notations',\n\t\t1,\n\t\t999999999,\n\t),\n\n\t// Miscellaneous\n\tGCTimer: new SettingStandard(\n\t\t'bool',\n\t\t'Miscellaneous',\n\t\t['Golden Cookie Timer OFF', 'Golden Cookie Timer ON'],\n\t\t'A timer on the Golden Cookie when it has been spawned',\n\t\ttrue,\n\t\tfunction () { ToggleGCTimer(); },\n\t),\n\tFavicon: new SettingStandard(\n\t\t'bool',\n\t\t'Miscellaneous',\n\t\t['Favicon OFF', 'Favicon ON'],\n\t\t'Update favicon with Golden/Wrath Cookie',\n\t\ttrue,\n\t\tfunction () { UpdateFavicon(); },\n\t),\n\tWrinklerButtons: new SettingStandard(\n\t\t'bool',\n\t\t'Miscellaneous',\n\t\t['Extra Buttons OFF', 'Extra Buttons ON'],\n\t\t'Show buttons for popping wrinklers at bottom of cookie section',\n\t\ttrue,\n\t\tfunction () { ToggleWrinklerButtons(); },\n\t),\n\tBulkBuyBlock: new SettingStandard(\n\t\t'bool',\n\t\t'Miscellaneous',\n\t\t['Block Bulk Buying OFF', 'Block Bulk Buying ON'],\n\t\t\"Block clicking bulk buying when you can't buy all. This prevents buying 7 of a building when you are in buy-10 or buy-100 mode.\",\n\t\ttrue,\n\t),\n};\n\n/* harmony default export */ const SettingsData = (Config);\n\n;// CONCATENATED MODULE: ./src/InitSaveLoad/save.js\n\n\n\n/**\n * This creates a save function to the CM object. Per Game code/comments:\n * \"use this to store persistent data associated with your mod\n * return 'a string to be saved';\"\n */\nfunction save() {\n\treturn JSON.stringify({\n\t\tsettings: CMOptions,\n\t\tversion: `${VersionMajor}.${VersionMinor}`,\n\t});\n}\n\n;// CONCATENATED MODULE: ./src/Cache/CPS/CurrWrinklerCPS.js\n/* eslint-disable no-unused-vars */\n\n\n\n/**\n * This functions caches the current Wrinkler CPS multiplier\n * @global\t{number}\tCM.Cache.CurrWrinklerCount\t\tCurrent number of wrinklers\n * @global\t{number}\tCM.Cache.CurrWrinklerCPSMult\tCurrent multiplier of CPS because of wrinklers (excluding their negative sucking effect)\n */\nfunction CacheCurrWrinklerCPS() {\n\tCacheCurrWrinklerCPSMult = 0;\n\tlet count = 0;\n\tfor (const i in Game.wrinklers) {\n\t\tif (Game.wrinklers[i].phase === 2) count++;\n\t}\n\tlet godMult = 1;\n\tif (SimObjects.Temple.minigameLoaded) {\n\t\tconst godLvl = Game.hasGod('scorn');\n\t\tif (godLvl === 1) godMult *= 1.15;\n\t\telse if (godLvl === 2) godMult *= 1.1;\n\t\telse if (godLvl === 3) godMult *= 1.05;\n\t}\n\tCacheCurrWrinklerCount = count;\n\tCacheCurrWrinklerCPSMult = count * (count * 0.05 * 1.1) * (Game.Has('Sacrilegious corruption') * 0.05 + 1) * (Game.Has('Wrinklerspawn') * 0.05 + 1) * godMult;\n}\n\n;// CONCATENATED MODULE: ./src/Cache/CacheLoop.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n\n\n/**\n * This functions caches variables that are needed every loop\n * @global\t{string}\tCM.Cache.TimeTillNextPrestige\tTime requried till next prestige level\n */\nfunction LoopCache() {\n\t// Update Wrinkler Bank\n\tCacheWrinklers();\n\n\tCachePP();\n\tCacheCurrWrinklerCPS();\n\tCacheAvgCPS();\n\tCacheHeavenlyChipsPS();\n\n\tconst cookiesToNext = Game.HowManyCookiesReset(Math.floor(Game.HowMuchPrestige(Game.cookiesReset + Game.cookiesEarned)) + 1) - (Game.cookiesEarned + Game.cookiesReset);\n\tCacheTimeTillNextPrestige = FormatTime(cookiesToNext / GetCPS());\n}\n\n;// CONCATENATED MODULE: ./src/Sim/Calculations/NoGoldenSwitchCalc.js\n\n\n\n\n/**\n * This function calculates CPS without the Golden Switch\n * It is called by CM.Cache.NoGoldSwitchCPS()\n */\nfunction CalcNoGoldSwitchCPS() {\n\tCopyData();\n\tSimUpgrades[\"Golden switch [off]\"].bought = 0;\n\tCalculateGains();\n\treturn SimCookiesPs;\n}\n\n;// CONCATENATED MODULE: ./src/Cache/CPS/NoGoldSwitchCPS.js\n/* eslint-disable no-unused-vars */\n\n\n\n/**\n * This function calculates CPS without the Golden Switch as it might be needed in other functions\n * If so it CM.Sim.Win()'s them and the caller function will know to recall CM.Sim.CalculateGains()\n * It is called at the end of any functions that simulates certain behaviour\n */\nfunction CacheNoGoldSwitchCPS() {\n\tif (Game.Has('Golden switch [off]')) {\n\t\tCacheNoGoldSwitchCookiesPS = CalcNoGoldSwitchCPS();\n\t} else CacheNoGoldSwitchCookiesPS = Game.cookiesPs;\n}\n\n;// CONCATENATED MODULE: ./src/Sim/SimulationEvents/SellBuildingForChoEgg.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n/**\n * This function calculates the maximum cookies obtained from selling buildings just before purchasing the chocolate egg\n * It is called by CM.Cache.CacheSellForChoEgg()\n * @returns\t{number}\tsellTotal\tThe maximum cookies to be earned\n */\nfunction SellBuildingsForChoEgg() {\n\tlet sellTotal = 0;\n\n\tCopyData();\n\n\t// Change auras to Earth Shatterer + Reality bending to optimize money made by selling\n\tlet buildingsToSacrifice = 2;\n\tif (SimDragonAura === 5 || SimDragonAura === 18) {\n\t\t--buildingsToSacrifice;\n\t}\n\tif (SimDragonAura2 === 5 || SimDragonAura2 === 18) {\n\t\t--buildingsToSacrifice;\n\t}\n\tSimDragonAura = 5;\n\tSimDragonAura2 = 18;\n\n\t// Sacrifice highest buildings for the aura switch\n\tfor (let i = 0; i < buildingsToSacrifice; ++i) {\n\t\tlet highestBuilding = 0;\n\t\tfor (const j in SimObjects) {\n\t\t\tif (SimObjects[j].amount > 0) {\n\t\t\t\thighestBuilding = SimObjects[j];\n\t\t\t}\n\t\t}\n\t\thighestBuilding.amount--;\n\t\tSimBuildingsOwned--;\n\t}\n\n\t// Get money made by selling all remaining buildings\n\tfor (const i of Object.keys(SimObjects)) {\n\t\tconst me = SimObjects[i];\n\t\tsellTotal += BuildingSell(Game.Objects[me.name], Game.Objects[i].basePrice, me.amount, Game.Objects[i].free, me.amount);\n\t}\n\n\treturn sellTotal;\n}\n\n;// CONCATENATED MODULE: ./src/Cache/CPS/SellChoEgg.js\n/* eslint-disable no-unused-vars */\n\n\n\n/**\n * This functions caches the reward for selling the Chocolate egg\n * It is called by CM.Main.Loop()\n * @global\t{number}\tCM.Cache.SellForChoEgg\tTotal cookies to be gained from selling Chocolate egg\n */\nfunction CacheSellAllForChoEgg() {\n\tlet sellTotal = 0;\n\t// Compute cookies earned by selling stock market goods\n\tif (Game.Objects.Bank.minigameLoaded) {\n\t\tconst marketGoods = Game.Objects.Bank.minigame.goods;\n\t\tlet goodsVal = 0;\n\t\tfor (const i of Object.keys(marketGoods)) {\n\t\t\tconst marketGood = marketGoods[i];\n\t\t\tgoodsVal += marketGood.stock * marketGood.val;\n\t\t}\n\t\tsellTotal += goodsVal * Game.cookiesPsRawHighest;\n\t}\n\t// Compute cookies earned by selling all buildings with optimal auras (ES + RB)\n\tsellTotal += SellBuildingsForChoEgg();\n\tCacheSellForChoEgg = sellTotal;\n}\n\n;// CONCATENATED MODULE: ./src/Cache/Dragon/Dragon.js\n/* eslint-disable no-unused-vars */\n/** Functions related to the Dragon */\n\n\n\n\n\n\n/**\n * This functions caches the current cost of upgrading the dragon level so it can be displayed in the tooltip\n */\nfunction CacheDragonCost() {\n\tif (CacheLastDragonLevel !== Game.dragonLevel || SimDoSims) {\n\t\tif (Game.dragonLevel < 25 && Game.dragonLevels[Game.dragonLevel].buy.toString().includes('sacrifice')) {\n\t\t\tlet target = Game.dragonLevels[Game.dragonLevel].buy.toString().match(/Objects\\[(.*)\\]/)[1];\n\t\t\tconst amount = Game.dragonLevels[Game.dragonLevel].buy.toString().match(/sacrifice\\((.*?)\\)/)[1];\n\t\t\tif (target !== 'i') {\n\t\t\t\ttarget = target.replaceAll(\"'\", '');\n\t\t\t\tif (Game.Objects[target].amount < amount) {\n\t\t\t\t\tCacheCostDragonUpgrade = 'Not enough buildings to sell';\n\t\t\t\t} else {\n\t\t\t\t\tlet cost = 0;\n\t\t\t\t\tCopyData();\n\t\t\t\t\tfor (let i = 0; i < amount; i++) {\n\t\t\t\t\t\tlet price = SimObjects[target].basePrice * Game.priceIncrease ** Math.max(0, SimObjects[target].amount - 1 - SimObjects[target].free);\n\t\t\t\t\t\tprice = Game.modifyBuildingPrice(SimObjects[target], price);\n\t\t\t\t\t\tprice = Math.ceil(price);\n\t\t\t\t\t\tcost += price;\n\t\t\t\t\t\tSimObjects[target].amount--;\n\t\t\t\t\t}\n\t\t\t\t\tCacheCostDragonUpgrade = `Cost to rebuy: ${(cost)}`;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet cost = 0;\n\t\t\t\tCopyData();\n\t\t\t\tfor (const j of Object.keys(Game.Objects)) {\n\t\t\t\t\ttarget = j;\n\t\t\t\t\tif (Game.Objects[target].amount < amount) {\n\t\t\t\t\t\tCacheCostDragonUpgrade = 'Not enough buildings to sell';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let i = 0; i < amount; i++) {\n\t\t\t\t\t\t\tlet price = SimObjects[target].basePrice * Game.priceIncrease ** Math.max(0, SimObjects[target].amount - 1 - SimObjects[target].free);\n\t\t\t\t\t\t\tprice = Game.modifyBuildingPrice(SimObjects[target], price);\n\t\t\t\t\t\t\tprice = Math.ceil(price);\n\t\t\t\t\t\t\tcost += price;\n\t\t\t\t\t\t\tSimObjects[target].amount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tCacheCostDragonUpgrade = `Cost to rebuy: ${BeautifyFormatting_Beautify(cost)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tCacheLastDragonLevel = Game.dragonLevel;\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/HelperFunctions/UpdateAscendState.js\n\n\n\n\n\n/**\n * This function disables and shows the bars created by CookieMonster when the game is \"ascending\"\n * It is called by CM.Disp.Draw()\n */\nfunction UpdateAscendState() {\n\tif (Game.OnAscend) {\n\t\tl('game').style.bottom = '0px';\n\t\tif (CMOptions.BotBar === 1) l('CMBotBar').style.display = 'none';\n\t\tif (CMOptions.TimerBar === 1) l('CMTimerBar').style.display = 'none';\n\t} else {\n\t\tToggleBotBar();\n\t\tToggleTimerBar();\n\t}\n\tUpdateBackground();\n}\n\n;// CONCATENATED MODULE: ./src/Sim/InitializeData/InitData.js\n/** Functions used to create static objects of Buildings, Upgrades and Achievements */\n\n\n\n\n\n\n\n/**\n * This function creates static objects for Buildings, Upgrades and Achievements\n */\nfunction InitData() {\n\t// Buildings\n\tSimObjects = [];\n\tfor (const i of Object.keys(Game.Objects)) {\n\t\tSimObjects[i] = InitialBuildingData(i);\n\t}\n\n\t// Upgrades\n\tSimUpgrades = [];\n\tfor (const i of Object.keys(Game.Upgrades)) {\n\t\tSimUpgrades[i] = InitUpgrade(i);\n\t}\n\n\t// Achievements\n\tSimAchievements = [];\n\tfor (const i of Object.keys(Game.Achievements)) {\n\t\tSimAchievements[i] = InitAchievement(i);\n\t}\n\tCopyData();\n}\n\n;// CONCATENATED MODULE: ./src/InitSaveLoad/Variables.js\n/* eslint-disable prefer-const */\n/** Variable that shows if Cookie Moonster is initzializing */\nlet isInitializing = false;\nlet test;\n\n;// CONCATENATED MODULE: ./src/Disp/Notifications/Flash.js\n\n\n\n/**\n * This function creates a flash depending on configs. It is called by all functions\n * that check game-events and which have settings for Flashes (e.g., Golden Cookies appearing, Magic meter being full)\n * @param\t{number}\tmode\tSets the intensity of the flash, used to recursively dim flash\n * \t\t\t\t\t\t\t\tAll calls of function have use mode === 3\n * @param\t{string}\tconfig\tThe setting in CM.Options that is checked before creating the flash\n */\nfunction Flash(mode, config) {\n\t// The arguments check makes the sound not play upon initialization of the mod\n\tif ((CMOptions[config] === 1 && mode === 3 && isInitializing === false) || mode === 1) {\n\t\tl('CMWhiteScreen').style.opacity = '0.5';\n\t\tif (mode === 3) {\n\t\t\tl('CMWhiteScreen').style.display = 'inline';\n\t\t\tsetTimeout(function () { Flash(2, config); }, 1000 / Game.fps);\n\t\t} else {\n\t\t\tsetTimeout(function () { Flash(0, config); }, 1000 / Game.fps);\n\t\t}\n\t} else if (mode === 2) {\n\t\tl('CMWhiteScreen').style.opacity = '1';\n\t\tsetTimeout(function () { Flash(1, config); }, 1000 / Game.fps);\n\t} else if (mode === 0) l('CMWhiteScreen').style.display = 'none';\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Notifications/Sound.js\n\n\n\n/**\n * This function plays a sound depending on configs. It is called by all functions\n * that check game-events and which have settings for sound (e.g., Golden Cookies appearing, Magic meter being full)\n * @param\t{variable}\turl\t\t\tA variable that gives the url for the sound (e.g., CM.Options.GCSoundURL)\n * @param\t{string}\tsndConfig\tThe setting in CM.Options that is checked before creating the sound\n * @param\t{string}\tvolConfig\tThe setting in CM.Options that is checked to determine volume\n */\nfunction PlaySound(url, sndConfig, volConfig) {\n\t// The arguments check makes the sound not play upon initialization of the mod\n\tif (CMOptions[sndConfig] === 1 && isInitializing === false) {\n\t\tconst sound = new realAudio(url);\n\t\tif (CMOptions.GeneralSound) sound.volume = (CMOptions[volConfig] / 100) * (Game.volume / 100);\n\t\telse sound.volume = (CMOptions[volConfig] / 100);\n\t\tsound.play();\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Main/CheckStates/Garden.js\n\n\n\n\n\n/**\n * This function checks if a garden tick has happened\n */\nfunction CheckGardenTick() {\n\tif (Game.Objects.Farm.minigameLoaded && LastGardenNextStep !== Game.Objects.Farm.minigame.nextStep) {\n\t\tif (LastGardenNextStep !== 0 && LastGardenNextStep < Date.now()) {\n\t\t\tFlash(3, 'GardFlash');\n\t\t\tPlaySound(CMOptions.GardSoundURL, 'GardSound', 'GardVolume');\n\t\t}\n\t\tLastGardenNextStep = Game.Objects.Farm.minigame.nextStep;\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/GoldenCookieTimers/GoldenCookieTimers.js\n/** Section: Functions related to the Golden Cookie Timers */\n\n\n\n/**\n * This function creates a new Golden Cookie Timer and appends it CM.Disp.GCTimers based on the id of the cookie\n * @param\t{object}\tcookie\tA Golden Cookie object\n */\nfunction CreateGCTimer(cookie) {\n\tconst GCTimer = document.createElement('div');\n\tGCTimer.id = `GCTimer${cookie.id}`;\n\tGCTimer.style.width = '96px';\n\tGCTimer.style.height = '96px';\n\tGCTimer.style.position = 'absolute';\n\tGCTimer.style.zIndex = '10000000001';\n\tGCTimer.style.textAlign = 'center';\n\tGCTimer.style.lineHeight = '96px';\n\tGCTimer.style.fontFamily = '\"Kavoon\", Georgia, serif';\n\tGCTimer.style.fontSize = '35px';\n\tGCTimer.style.cursor = 'pointer';\n\tGCTimer.style.display = 'block';\n\tif (CM.Options.GCTimer === 0) GCTimer.style.display = 'none';\n\tGCTimer.style.left = cookie.l.style.left;\n\tGCTimer.style.top = cookie.l.style.top;\n\tGCTimer.onclick = function () { cookie.pop(); };\n\tGCTimer.onmouseover = function () { cookie.l.style.filter = 'brightness(125%) drop-shadow(0px 0px 3px rgba(255,255,255,1))'; cookie.l.style.webkitFilter = 'brightness(125%) drop-shadow(0px 0px 3px rgba(255,255,255,1))'; };\n\tGCTimer.onmouseout = function () { cookie.l.style.filter = ''; cookie.l.style.webkitFilter = ''; };\n\n\tGCTimers[cookie.id] = GCTimer;\n\tl('shimmers').appendChild(GCTimer);\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Notifications/Notification.js\n/** Functions related to the flashes/sound/notifications */\n\n\n\n\n/**\n * This function creates a notifcation depending on configs. It is called by all functions\n * that check game-events and which have settings for notifications (e.g., Golden Cookies appearing, Magic meter being full)\n * @param\t{string}\tnotifyConfig\tThe setting in CM.Options that is checked before creating the notification\n * @param\t{string}\ttitle\t\t\tThe title of the to-be created notifications\n * @param\t{string}\tmessage\t\t\tThe text of the to-be created notifications\n */\nfunction Notification_Notification(notifyConfig, title, message) {\n\t// The arguments check makes the sound not play upon initialization of the mod\n\tif (CMOptions[notifyConfig] === 1 && document.visibilityState === 'hidden' && isInitializing === false) {\n\t\tconst CookieIcon = 'https://orteil.dashnet.org/cookieclicker/favicon.ico';\n\t\tnew Notification_Notification(title, { body: message, badge: CookieIcon });\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Main/CheckStates/GoldenCookie.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n\n\n\n/**\n * This function checks for changes in the amount of Golden Cookies\n * It is called by CM.Main.Loop\n */\nfunction CheckGoldenCookie() {\n\tFindShimmer();\n\tfor (const i of Object.keys(GCTimers)) {\n\t\tif (typeof CacheGoldenShimmersByID[i] === 'undefined') {\n\t\t\tGCTimers[i].parentNode.removeChild(GCTimers[i]);\n\t\t\tdelete GCTimers[i];\n\t\t}\n\t}\n\tif (LastGoldenCookieState !== Game.shimmerTypes.golden.n) {\n\t\tLastGoldenCookieState = Game.shimmerTypes.golden.n;\n\t\tif (LastGoldenCookieState) {\n\t\t\tif (LastSpawnedGoldenCookieState < CurrSpawnedGoldenCookieState) {\n\t\t\t\tFlash(3, 'GCFlash');\n\t\t\t\tPlaySound(CMOptions.GCSoundURL, 'GCSound', 'GCVolume');\n\t\t\t\tNotification_Notification('GCNotification', 'Golden Cookie Spawned', 'A Golden Cookie has spawned. Click it now!');\n\t\t\t}\n\n\t\t\tfor (const i of Object.keys(Game.shimmers)) {\n\t\t\t\tif (typeof GCTimers[Game.shimmers[i].id] === 'undefined') {\n\t\t\t\t\tCreateGCTimer(Game.shimmers[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tUpdateFavicon();\n\t\tLastSpawnedGoldenCookieState = CurrSpawnedGoldenCookieState;\n\t\tif (CurrSpawnedGoldenCookieState === 0) CacheSpawnedGoldenShimmer = 0;\n\t} else if (CMOptions.GCTimer === 1 && LastGoldenCookieState) {\n\t\tfor (const i of Object.keys(GCTimers)) {\n\t\t\tGCTimers[i].style.opacity = CacheGoldenShimmersByID[i].l.style.opacity;\n\t\t\tGCTimers[i].style.transform = CacheGoldenShimmersByID[i].l.style.transform;\n\t\t\tGCTimers[i].textContent = Math.ceil(CacheGoldenShimmersByID[i].life / Game.fps);\n\t\t}\n\t}\n}\n\n/**\n * Auxilirary function that finds all currently spawned shimmers.\n * CM.Cache.spawnedGoldenShimmer stores the non-user spawned cookie to later determine data for the favicon and tab-title\n * It is called by CM.CM.Main.CheckGoldenCookie\n */\nfunction FindShimmer() {\n\tCurrSpawnedGoldenCookieState = 0;\n\tCacheGoldenShimmersByID = {};\n\tfor (const i of Object.keys(Game.shimmers)) {\n\t\tCacheGoldenShimmersByID[Game.shimmers[i].id] = Game.shimmers[i];\n\t\tif (Game.shimmers[i].spawnLead && Game.shimmers[i].type === 'golden') {\n\t\t\tCacheSpawnedGoldenShimmer = Game.shimmers[i];\n\t\t\tCurrSpawnedGoldenCookieState += 1;\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Main/CheckStates/Grimoire.js\n\n\n\n\n\n\n/**\n * This function checks if the magic meter is full\n * It is called by CM.Main.Loop\n */\nfunction CheckMagicMeter() {\n\tif (Game.Objects['Wizard tower'].minigameLoaded && CMOptions.GrimoireBar === 1) {\n\t\tconst minigame = Game.Objects['Wizard tower'].minigame;\n\t\tif (minigame.magic < minigame.magicM) LastMagicBarFull = false;\n\t\telse if (!LastMagicBarFull) {\n\t\t\tLastMagicBarFull = true;\n\t\t\tFlash(3, 'MagicFlash');\n\t\t\tPlaySound(CMOptions.MagicSoundURL, 'MagicSound', 'MagicVolume');\n\t\t\tNotification_Notification('MagicNotification', 'Magic Meter full', 'Your Magic Meter is full. Cast a spell!');\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Main/CheckStates/Season.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n/**\n * This function checks if there is reindeer that has spawned\n * It is called by CM.Main.Loop\n */\nfunction CheckSeasonPopup() {\n\tif (LastSeasonPopupState !== Game.shimmerTypes.reindeer.spawned) {\n\t\tLastSeasonPopupState = Game.shimmerTypes.reindeer.spawned;\n\t\tfor (const i of Object.keys(Game.shimmers)) {\n\t\t\tif (Game.shimmers[i].spawnLead && Game.shimmers[i].type === 'reindeer') {\n\t\t\t\tCacheSeasonPopShimmer = Game.shimmers[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tFlash(3, 'SeaFlash');\n\t\tPlaySound(CMOptions.SeaSoundURL, 'SeaSound', 'SeaVolume');\n\t\tNotification_Notification('SeaNotification', 'Reindeer sighted!', 'A Reindeer has spawned. Click it now!');\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Main/CheckStates/Ticker.js\n\n\n\n\n\n/**\n * This function checks if there is a fortune cookie on the ticker\n * It is called by CM.Main.Loop\n */\nfunction CheckTickerFortune() {\n\tif (LastTickerFortuneState !== (Game.TickerEffect && Game.TickerEffect.type === 'fortune')) {\n\t\tLastTickerFortuneState = (Game.TickerEffect && Game.TickerEffect.type === 'fortune');\n\t\tif (LastTickerFortuneState) {\n\t\t\tFlash(3, 'FortuneFlash');\n\t\t\tPlaySound(CM.Options.FortuneSoundURL, 'FortuneSound', 'FortuneVolume');\n\t\t\tNotification_Notification('FortuneNotification', 'Fortune Cookie found', 'A Fortune Cookie has appeared on the Ticker.');\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Main/CheckStates/Wrinkler.js\n\n\n\n\n\n\n/**\n * This function checks if any new Wrinklers have popped up\n * It is called by CM.Main.Loop\n */\nfunction CheckWrinklerCount() {\n\tif (Game.elderWrath > 0) {\n\t\tlet CurrentWrinklers = 0;\n\t\tfor (const i in Game.wrinklers) {\n\t\t\tif (Game.wrinklers[i].phase === 2) CurrentWrinklers++;\n\t\t}\n\t\tif (CurrentWrinklers > LastWrinklerCount) {\n\t\t\tLastWrinklerCount = CurrentWrinklers;\n\t\t\tif (CurrentWrinklers === Game.getWrinklersMax() && CMOptions.WrinklerMaxFlash) {\n\t\t\t\tFlash(3, 'WrinklerMaxFlash');\n\t\t\t} else {\n\t\t\t\tFlash(3, 'WrinklerFlash');\n\t\t\t}\n\t\t\tif (CurrentWrinklers === Game.getWrinklersMax() && CMOptions.WrinklerMaxSound) {\n\t\t\t\tPlaySound(CMOptions.WrinklerMaxSoundURL, 'WrinklerMaxSound', 'WrinklerMaxVolume');\n\t\t\t} else {\n\t\t\t\tPlaySound(CMOptions.WrinklerSoundURL, 'WrinklerSound', 'WrinklerVolume');\n\t\t\t}\n\t\t\tif (CurrentWrinklers === Game.getWrinklersMax() && CMOptions.WrinklerMaxNotification) {\n\t\t\t\tNotification_Notification('WrinklerMaxNotification', 'Maximum Wrinklers Reached', 'You have reached your maximum ammount of wrinklers');\n\t\t\t} else {\n\t\t\t\tNotification_Notification('WrinklerNotification', 'A Wrinkler appeared', 'A new wrinkler has appeared');\n\t\t\t}\n\t\t} else {\n\t\t\tLastWrinklerCount = CurrentWrinklers;\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Main/Loop.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Main loop of Cookie Monster\n * CM.init registers it to the \"logic\" hook provided by the modding api\n */\nfunction CMLoop() {\n\tif (LastAscendState !== Game.OnAscend) {\n\t\tLastAscendState = Game.OnAscend;\n\t\tUpdateAscendState();\n\t}\n\tif (!Game.OnAscend && Game.AscendTimer === 0) {\n\t\t// Check if any other mods have been loaded\n\t\tif (LastModCount !== Object.keys(Game.mods).length) {\n\t\t\tInitData();\n\t\t\tInitCache();\n\t\t\tLastModCount = Object.keys(Game.mods).length;\n\t\t}\n\n\t\t// CM.Sim.DoSims is set whenever CPS has changed\n\t\tif (SimDoSims) {\n\t\t\tCacheIncome();\n\n\t\t\tCacheNoGoldSwitchCPS(); // Needed first\n\t\t\tCacheGoldenAndWrathCookiesMults();\n\t\t\tCacheStatsCookies();\n\t\t\tCacheAllMissingUpgrades();\n\t\t\tCacheChain();\n\t\t\tCacheDragonCost();\n\n\t\t\tCacheSeasonSpec();\n\t\t\tCacheSellAllForChoEgg();\n\n\t\t\tSimDoSims = 0;\n\t\t}\n\n\t\t// Check for aura change to recalculate buildings prices\n\t\tconst hasBuildAura = Game.auraMult('Fierce Hoarder') > 0;\n\t\tif (!CacheHadBuildAura && hasBuildAura) {\n\t\t\tCacheHadBuildAura = true;\n\t\t\tCacheDoRemakeBuildPrices = 1;\n\t\t} else if (CacheHadBuildAura && !hasBuildAura) {\n\t\t\tCacheHadBuildAura = false;\n\t\t\tCacheDoRemakeBuildPrices = 1;\n\t\t}\n\n\t\tif (CacheDoRemakeBuildPrices) {\n\t\t\tCacheBuildingsPrices();\n\t\t\tCacheDoRemakeBuildPrices = 0;\n\t\t}\n\n\t\tLoopCache();\n\n\t\t// Check all changing minigames and game-states\n\t\tCheckGoldenCookie();\n\t\tCheckTickerFortune();\n\t\tCheckSeasonPopup();\n\t\tCheckGardenTick();\n\t\tCheckMagicMeter();\n\t\tCheckWrinklerCount();\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Config/SaveLoadReload/SaveLoadReloadSettings.js\n\n\n\n\n\n\n/** Functions related to saving, loading and restoring all settings */\n\n/**\n * This function saves the config of CookieMonster without saving any of the other save-data\n * This allows saving in between the autosave intervals\n * It is called by CM.Config.LoadConfig(), CM.Config.RestoreDefault(), CM.Config.ToggleConfig(),\n * CM.ToggleConfigVolume() and changes in options with type \"url\", \"color\" or \"numscale\"\n */\nfunction SaveConfig() {\n\tconst saveString = b64_to_utf8(unescape(localStorage.getItem('CookieClickerGame')).split('!END!')[0]);\n\tconst CookieMonsterSave = saveString.match(/CookieMonster.*(;|$)/);\n\tif (CookieMonsterSave !== null) {\n\t\tconst newSaveString = saveString.replace(CookieMonsterSave[0], `CookieMonster:${save()}`);\n\t\tlocalStorage.setItem('CookieClickerGame', escape(`${utf8_to_b64(newSaveString)}!END!`));\n\t}\n}\n\n/**\n * This function loads the config of CookieMonster saved in localStorage and loads it into CMOptions\n * It is called by CM.Main.DelayInit() and CM.Config.RestoreDefault()\n */\nfunction LoadConfig(settings) {\n\t// This removes cookies left from earlier versions of CookieMonster\n\tif (typeof localStorage.CMConfig !== 'undefined') {\n\t\tdelete localStorage.CMConfig;\n\t}\n\tif (settings !== undefined) {\n\t\tCMOptions = settings;\n\n\t\t// Check values\n\t\tlet mod = false;\n\t\tfor (const i in SettingsDefault) {\n\t\t\tif (typeof CMOptions[i] === 'undefined') {\n\t\t\t\tmod = true;\n\t\t\t\tCMOptions[i] = SettingsDefault[i];\n\t\t\t} else if (i !== 'Header' && i !== 'Colors') {\n\t\t\t\tif (i.indexOf('SoundURL') === -1) {\n\t\t\t\t\tif (!(CMOptions[i] > -1 && CMOptions[i] < SettingsData[i].label.length)) {\n\t\t\t\t\t\tmod = true;\n\t\t\t\t\t\tCMOptions[i] = SettingsDefault[i];\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof CMOptions[i] !== 'string') { // Sound URLs\n\t\t\t\t\tmod = true;\n\t\t\t\t\tCMOptions[i] = SettingsDefault[i];\n\t\t\t\t}\n\t\t\t} else if (i === 'Header') {\n\t\t\t\tfor (const j in SettingsDefault.Header) {\n\t\t\t\t\tif (typeof CMOptions[i][j] === 'undefined' || !(CMOptions[i][j] > -1 && CMOptions[i][j] < 2)) {\n\t\t\t\t\t\tmod = true;\n\t\t\t\t\t\tCMOptions[i][j] = SettingsDefault[i][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else { // Colors\n\t\t\t\tfor (const j in SettingsDefault.Colors) {\n\t\t\t\t\tif (typeof CMOptions[i][j] === 'undefined' || typeof CMOptions[i][j] !== 'string') {\n\t\t\t\t\t\tmod = true;\n\t\t\t\t\t\tCMOptions[i][j] = SettingsDefault[i][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (mod) SaveConfig();\n\t\tCMLoop(); // Do loop once\n\t\tfor (const i in SettingsDefault) {\n\t\t\tif (i !== 'Header' && typeof SettingsData[i].func !== 'undefined') {\n\t\t\t\tSettingsData[i].func();\n\t\t\t}\n\t\t}\n\t} else { // Default values\n\t\tLoadConfig(SettingsDefault);\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/BuildingsUpgrades/UpgradeBar.js\n\n\n/**\n * This function creates the legend for the upgrade bar\n * @returns\t{object}\tlegend\tThe legend-object to be added\n */\nfunction CreateUpgradeBarLegend() {\n\tconst legend = document.createElement('div');\n\tlegend.style.minWidth = '330px';\n\tlegend.style.marginBottom = '4px';\n\tconst title = document.createElement('div');\n\ttitle.className = 'name';\n\ttitle.style.marginBottom = '4px';\n\ttitle.textContent = 'Legend';\n\tlegend.appendChild(title);\n\n\tconst legendLine = function (color, text) {\n\t\tconst div = document.createElement('div');\n\t\tdiv.style.verticalAlign = 'middle';\n\t\tconst span = document.createElement('span');\n\t\tspan.className = ColorBackPre + color;\n\t\tspan.style.display = 'inline-block';\n\t\tspan.style.height = '10px';\n\t\tspan.style.width = '10px';\n\t\tspan.style.marginRight = '4px';\n\t\tdiv.appendChild(span);\n\t\tdiv.appendChild(document.createTextNode(text));\n\t\treturn div;\n\t};\n\n\tlegend.appendChild(legendLine(ColorBlue, 'Better than best PP building'));\n\tlegend.appendChild(legendLine(ColorGreen, 'Same as best PP building'));\n\tlegend.appendChild(legendLine(ColorYellow, 'Between best and worst PP buildings closer to best'));\n\tlegend.appendChild(legendLine(ColorOrange, 'Between best and worst PP buildings closer to worst'));\n\tlegend.appendChild(legendLine(ColorRed, 'Same as worst PP building'));\n\tlegend.appendChild(legendLine(ColorPurple, 'Worse than worst PP building'));\n\tlegend.appendChild(legendLine(ColorGray, 'Negative or infinity PP'));\n\treturn legend;\n}\n\n/**\n * This function creates the upgrade bar above the upgrade-section in the right section of the screen\n */\nfunction CreateUpgradeBar() {\n\tconst UpgradeBar = document.createElement('div');\n\tUpgradeBar.id = 'CMUpgradeBar';\n\tUpgradeBar.style.width = '100%';\n\tUpgradeBar.style.backgroundColor = 'black';\n\tUpgradeBar.style.textAlign = 'center';\n\tUpgradeBar.style.fontWeight = 'bold';\n\tUpgradeBar.style.display = 'none';\n\tUpgradeBar.style.zIndex = '21';\n\tUpgradeBar.onmouseout = function () { Game.tooltip.hide(); };\n\n\tconst placeholder = document.createElement('div');\n\tplaceholder.appendChild(CreateUpgradeBarLegend());\n\tUpgradeBar.onmouseover = function () { Game.tooltip.draw(this, escape(placeholder.innerHTML), 'store'); };\n\n\tconst upgradeNumber = function (id, color) {\n\t\tconst span = document.createElement('span');\n\t\tspan.id = id;\n\t\tspan.className = ColorTextPre + color;\n\t\tspan.style.width = '14.28571428571429%';\n\t\tspan.style.display = 'inline-block';\n\t\tspan.textContent = '0';\n\t\treturn span;\n\t};\n\tUpgradeBar.appendChild(upgradeNumber('CMUpgradeBarBlue', ColorBlue));\n\tUpgradeBar.appendChild(upgradeNumber('CMUpgradeBarGreen', ColorGreen));\n\tUpgradeBar.appendChild(upgradeNumber('CMUpgradeBarYellow', ColorYellow));\n\tUpgradeBar.appendChild(upgradeNumber('CMUpgradeBarOrange', ColorOrange));\n\tUpgradeBar.appendChild(upgradeNumber('CMUpgradeBarRed', ColorRed));\n\tUpgradeBar.appendChild(upgradeNumber('CMUpgradeBarPurple', ColorPurple));\n\tUpgradeBar.appendChild(upgradeNumber('CMUpgradeBarGray', ColorGray));\n\n\tl('upgrades').parentNode.insertBefore(UpgradeBar, l('upgrades').parentNode.childNodes[3]);\n}\n\n;// CONCATENATED MODULE: ./src/Disp/HelperFunctions/PopWrinklers.js\n/**\n * This function pops all normal wrinklers\n * It is called by a click of the 'pop all' button created by CM.Disp.AddMenuStats()\n */\nfunction PopAllNormalWrinklers() {\n\tfor (const i of Object.keys(Game.wrinklers)) {\n\t\tif (Game.wrinklers[i].sucked > 0 && Game.wrinklers[i].type === 0) {\n\t\t\tGame.wrinklers[i].hp = 0;\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Initialization/CreateWrinklerButton.js\n\n\n\n/**\n * This function creates two objects at the bottom of the left column that allowing popping of wrinklers\n */\nfunction CreateWrinklerButtons() {\n\tconst popAllA = document.createElement('a');\n\tpopAllA.id = 'PopAllNormalWrinklerButton';\n\tpopAllA.textContent = 'Pop All Normal';\n\tpopAllA.className = 'option';\n\tpopAllA.onclick = function () { PopAllNormalWrinklers(); };\n\tl('sectionLeftExtra').children[0].append(popAllA);\n\tconst popFattestA = document.createElement('a');\n\tpopFattestA.id = 'PopFattestWrinklerButton';\n\tpopFattestA.textContent = 'Pop Single Fattest';\n\tpopFattestA.className = 'option';\n\tpopFattestA.onclick = function () { if (WrinklersFattest[1] !== null) Game.wrinklers[WrinklersFattest[1]].hp = 0; };\n\tl('sectionLeftExtra').children[0].append(popFattestA);\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Initialization/CssArea.js\n\n\n/**\n * This function creates a CSS style that stores certain standard CSS classes used by CookieMonster\n\n */\nfunction CreateCssArea() {\n\tDispCSS = document.createElement('style');\n\tDispCSS.type = 'text/css';\n\tDispCSS.id = 'CMCSS';\n\n\tdocument.head.appendChild(DispCSS);\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Initialization/UpdateBuildingUpgradeStyle.js\n/**\n * This function updates the style of the building and upgrade sections to make these sortable\n */\nfunction UpdateBuildingUpgradeStyle() {\n\tl('products').style.display = 'grid';\n\tl('storeBulk').style.gridRow = '1/1';\n\n\tl('upgrades').style.display = 'flex';\n\tl('upgrades').style['flex-wrap'] = 'wrap';\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Initialization/WhiteScreen.js\n/**\n * This function creates a white square over the full screen and appends it to l('wrapper')\n */\nfunction CreateWhiteScreen() {\n\tconst WhiteScreen = document.createElement('div');\n\tWhiteScreen.id = 'CMWhiteScreen';\n\tWhiteScreen.style.width = '100%';\n\tWhiteScreen.style.height = '100%';\n\tWhiteScreen.style.backgroundColor = 'white';\n\tWhiteScreen.style.display = 'none';\n\tWhiteScreen.style.zIndex = '9999999999';\n\tWhiteScreen.style.position = 'absolute';\n\tl('wrapper').appendChild(WhiteScreen);\n}\n\n;// CONCATENATED MODULE: ./src/Main/ReplaceGameElements/TooltipGrimoire.js\n\n\n\n/**\n * This function replaces the original .onmouseover functions of the Grimoire minigame\n */\nfunction ReplaceTooltipGrimoire() {\n\tif (Game.Objects['Wizard tower'].minigameLoaded) {\n\t\tfor (const i in Game.Objects['Wizard tower'].minigame.spellsById) {\n\t\t\tif (l(`grimoireSpell${i}`).onmouseover !== null) {\n\t\t\t\tTooltipGrimoireBackup[i] = l(`grimoireSpell${i}`).onmouseover;\n\t\t\t\tl(`grimoireSpell${i}`).onmouseover = function () {\n\t\t\t\t\tGame.tooltip.dynamic = 1;\n\t\t\t\t\tGame.tooltip.draw(this, function () { return CreateTooltip('g', `${i}`); }, 'this');\n\t\t\t\t\tGame.tooltip.wobble();\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Main/ReplaceGameElements/NativeGrimoire.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n/**\n * This function fixes replaces the .launch function of the Grimoire\n */\nfunction ReplaceNativeGrimoireLaunch() {\n\tif (!HasReplaceNativeGrimoireLaunch && Game.Objects['Wizard tower'].minigameLoaded) {\n\t\tconst minigame = Game.Objects['Wizard tower'].minigame;\n\t\tBackupGrimoireLaunch = minigame.launch;\n\t\tBackupGrimoireLaunchMod = minigame.launch.toString().split('=this').join('= Game.Objects[\\'Wizard tower\\'].minigame');\n\t}\n\tGame.Objects['Wizard tower'].minigame.launch = function () {\n\t\tBackupGrimoireLaunchMod();\n\t\tReplaceTooltipGrimoire();\n\t\tHasReplaceNativeGrimoireDraw = false;\n\t\tReplaceNativeGrimoireDraw();\n\t};\n\tHasReplaceNativeGrimoireLaunch = true;\n}\n\n/**\n * This function fixes replaces the .draw function of the Grimoire\n */\nfunction ReplaceNativeGrimoireDraw() {\n\tif (!HasReplaceNativeGrimoireDraw && Game.Objects['Wizard tower'].minigameLoaded) {\n\t\tconst minigame = Game.Objects['Wizard tower'].minigame;\n\t\tBackupGrimoireDraw = minigame.draw;\n\t\tGame.Objects['Wizard tower'].minigame.draw = function () {\n\t\t\tBackupGrimoireDraw();\n\t\t\tif (CMOptions.GrimoireBar === 1 && minigame.magic < minigame.magicM) {\n\t\t\t\tminigame.magicBarTextL.innerHTML += ` (${FormatTime(CalculateGrimoireRefillTime(minigame.magic, minigame.magicM, minigame.magicM))})`;\n\t\t\t}\n\t\t};\n\t\tHasReplaceNativeGrimoireDraw = true;\n\t}\n}\n\n/**\n * This function fixes replaces the Launch and Draw functions of the Grimoire\n */\nfunction ReplaceNativeGrimoire() {\n\tReplaceNativeGrimoireLaunch();\n\tReplaceNativeGrimoireDraw();\n}\n\n;// CONCATENATED MODULE: ./src/Main/ReplaceGameElements/Tooltips.js\n/* eslint-disable no-unused-vars */\n/** Functions related to replacing tooltips */\n\n\n\n\n\n\n/**\n * This function replaces the original .onmouseover functions of buildings\n */\nfunction ReplaceTooltipBuild() {\n\tfor (const i of Object.keys(Game.Objects)) {\n\t\tconst me = Game.Objects[i];\n\t\tif (l(`product${me.id}`).onmouseover !== null) {\n\t\t\tTooltipBuildBackup[i] = l(`product${me.id}`).onmouseover;\n\t\t\tl(`product${me.id}`).onmouseover = function () {\n\t\t\t\tGame.tooltip.dynamic = 1;\n\t\t\t\tGame.tooltip.draw(this, function () { return CreateTooltip('b', `${i}`); }, 'store');\n\t\t\t\tGame.tooltip.wobble();\n\t\t\t};\n\t\t}\n\t}\n}\n\n/**\n * This function replaces the original .onmouseover functions of sugar lumps\n */\nfunction ReplaceTooltipLump() {\n\tif (Game.canLumps()) {\n\t\tTooltipLumpBackup = l('lumps').onmouseover;\n\t\tl('lumps').onmouseover = function () {\n\t\t\tGame.tooltip.dynamic = 1;\n\t\t\tGame.tooltip.draw(this, function () { return CreateTooltip('s', 'Lump'); }, 'this');\n\t\t\tGame.tooltip.wobble();\n\t\t};\n\t}\n}\n\n/**\n * This function replaces the original .onmouseover functions of all garden plants\n */\nfunction ReplaceTooltipGarden() {\n\tif (Game.Objects.Farm.minigameLoaded) {\n\t\tl('gardenTool-1').onmouseover = function () { Game.tooltip.dynamic = 1; Game.tooltip.draw(this, function () { return CreateTooltip('ha', 'HarvestAllButton'); }, 'this'); Game.tooltip.wobble(); };\n\t\tArray.from(l('gardenPlot').children).forEach((child) => {\n\t\t\tconst coords = child.id.slice(-3);\n\t\t\tchild.onmouseover = function () {\n\t\t\t\tGame.tooltip.dynamic = 1;\n\t\t\t\tGame.tooltip.draw(this, function () { return CreateTooltip('p', [`${coords[0]}`, `${coords[2]}`]); }, 'this');\n\t\t\t\tGame.tooltip.wobble();\n\t\t\t};\n\t\t});\n\t}\n}\n\n/**\n * This function call all functions that replace Game-tooltips with Cookie Monster enhanced tooltips\n */\nfunction ReplaceTooltips() {\n\tReplaceTooltipBuild();\n\tReplaceTooltipLump();\n\n\t// Replace Tooltips of Minigames. Nesting it in LoadMinigames makes sure to replace them even if\n\t// they were not loaded initially\n\tLoadMinigames = Game.LoadMinigames;\n\tGame.LoadMinigames = function () {\n\t\tLoadMinigames();\n\t\tReplaceTooltipGarden();\n\t\tReplaceTooltipGrimoire();\n\t\tReplaceNativeGrimoire();\n\t};\n\tLoadMinigames();\n}\n\n;// CONCATENATED MODULE: ./src/Sim/SimulationEvents/AuraChange.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n/**\n * This functions calculates the cps and cost of changing a Dragon Aura\n * It is called by CM.Disp.AddAuraInfo()\n * @param\t{number}\t\t\taura\t\t\t\t\t\t\t\t\t\tThe number of the aura currently selected by the mouse/user\n * @returns {[number, number]} \t[CM.Sim.cookiesPs - Game.cookiesPs, price]\tThe bonus cps and the price of the change\n */\nfunction CalculateChangeAura(aura) {\n\tCopyData();\n\n\t// Check if aura being changed is first or second aura\n\tconst auraToBeChanged = l('promptContent').children[0].innerHTML.includes('secondary');\n\tif (auraToBeChanged) SimDragonAura2 = aura;\n\telse SimDragonAura = aura;\n\n\t// Sell highest building but only if aura is different\n\tlet price = 0;\n\tif (SimDragonAura !== CacheDragonAura || SimDragonAura2 !== CacheDragonAura2) {\n\t\tfor (let i = Game.ObjectsById.length - 1; i > -1; --i) {\n\t\t\tif (Game.ObjectsById[i - 1].amount > 0) {\n\t\t\t\tconst highestBuilding = SimObjects[Game.ObjectsById[i].name].name;\n\t\t\t\tSimObjects[highestBuilding].amount -= 1;\n\t\t\t\tSimBuildingsOwned -= 1;\n\t\t\t\tprice = SimObjects[highestBuilding].basePrice * Game.priceIncrease ** Math.max(0, SimObjects[highestBuilding].amount - 1 - SimObjects[highestBuilding].free);\n\t\t\t\tprice = Game.modifyBuildingPrice(SimObjects[highestBuilding], price);\n\t\t\t\tprice = Math.ceil(price);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst lastAchievementsOwned = SimAchievementsOwned;\n\tCalculateGains();\n\n\tCheckOtherAchiev();\n\tif (lastAchievementsOwned !== SimAchievementsOwned) {\n\t\tCalculateGains();\n\t}\n\treturn [SimCookiesPs - Game.cookiesPs, price];\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Dragon/Dragon.js\n/** Functions related to the Dragon */\n\n\n\n\n\n\n\n/**\n * This functions adds the two extra lines about CPS and time to recover to the aura picker infoscreen\n * @param\t{number}\taura\tThe number of the aura currently selected by the mouse/user\n */\nfunction AddAuraInfo(aura) {\n\tif (CMOptions.DragonAuraInfo === 1) {\n\t\tconst [bonusCPS, priceOfChange] = CalculateChangeAura(aura);\n\t\tconst timeToRecover = FormatTime(priceOfChange / (bonusCPS + Game.cookiesPs));\n\t\tconst bonusCPSPercentage = BeautifyFormatting_Beautify(bonusCPS / Game.cookiesPs);\n\n\t\tl('dragonAuraInfo').style.minHeight = '60px';\n\t\tl('dragonAuraInfo').style.margin = '8px';\n\t\tl('dragonAuraInfo').appendChild(document.createElement('div')).className = 'line';\n\t\tconst div = document.createElement('div');\n\t\tdiv.style.minWidth = '200px';\n\t\tdiv.style.textAlign = 'center';\n\t\tdiv.textContent = `Picking this aura will change CPS by ${BeautifyFormatting_Beautify(bonusCPS)} (${bonusCPSPercentage}% of current CPS).`;\n\t\tl('dragonAuraInfo').appendChild(div);\n\t\tconst div2 = document.createElement('div');\n\t\tdiv2.style.minWidth = '200px';\n\t\tdiv2.style.textAlign = 'center';\n\t\tdiv2.textContent = `It will take ${timeToRecover} to recover the cost.`;\n\t\tl('dragonAuraInfo').appendChild(div2);\n\t}\n}\n\n/**\n * This functions adds a tooltip to the level up button displaying the cost of rebuying all\n * It is called by Game.ToggleSpecialMenu() after CM.Main.ReplaceNative()\n */\nfunction AddDragonLevelUpTooltip() {\n\t// Check if it is the dragon popup that is on screen\n\tif ((l('specialPopup').className.match(/onScreen/) && l('specialPopup').children[0].style.background.match(/dragon/)) !== null) {\n\t\tfor (let i = 0; i < l('specialPopup').childNodes.length; i++) {\n\t\t\tif (l('specialPopup').childNodes[i].className === 'optionBox') {\n\t\t\t\tl('specialPopup').children[i].onmouseover = function () {\n\t\t\t\t\tCacheDragonCost();\n\t\t\t\t\tGame.tooltip.dynamic = 1;\n\t\t\t\t\tGame.tooltip.draw(l('specialPopup'), `<div style=\"min-width:200px;text-align:center;\">${CacheCostDragonUpgrade}</div>`, 'this');\n\t\t\t\t\tGame.tooltip.wobble();\n\t\t\t\t};\n\t\t\t\tl('specialPopup').children[i].onmouseout = function () { Game.tooltip.shouldHide = 1; };\n\t\t\t}\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Sim/SimulationEvents/ResetAscension.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n/**\n * This function calculates the cookies per click difference betwene current and after a ascension\n * It is called by CM.Disp.CreateStatsPrestigeSection()\n * @param\t{number}\tnewHeavenlyChips\tThe total heavenly chips after ascension\n * @returns\t{number}\tResetCPS\t\t\tThe CPS difference after reset\n */\nfunction ResetBonus(newHeavenlyChips) {\n\t// Calculate CPS with all Heavenly upgrades\n\tlet curCPS = Game.cookiesPs;\n\n\tCopyData();\n\n\tif (SimUpgrades[\"Heavenly key\"].bought === 0) {\n\t\tSimUpgrades[\"Heavenly chip secret\"].bought = 1;\n\t\tSimUpgrades[\"Heavenly cookie stand\"].bought = 1;\n\t\tSimUpgrades[\"Heavenly bakery\"].bought = 1;\n\t\tSimUpgrades[\"Heavenly confectionery\"].bought = 1;\n\t\tSimUpgrades[\"Heavenly key\"].bought = 1;\n\n\t\tCalculateGains();\n\n\t\tcurCPS = SimCookiesPs;\n\n\t\tCopyData();\n\t}\n\n\tif (CacheRealCookiesEarned >= 1000000) SimWin('Sacrifice');\n\tif (CacheRealCookiesEarned >= 1000000000) SimWin('Oblivion');\n\tif (CacheRealCookiesEarned >= 1000000000000) SimWin('From scratch');\n\tif (CacheRealCookiesEarned >= 1000000000000000) SimWin('Nihilism');\n\tif (CacheRealCookiesEarned >= 1000000000000000000) SimWin('Dematerialize');\n\tif (CacheRealCookiesEarned >= 1000000000000000000000) SimWin('Nil zero zilch');\n\tif (CacheRealCookiesEarned >= 1000000000000000000000000) SimWin('Transcendence');\n\tif (CacheRealCookiesEarned >= 1000000000000000000000000000) SimWin('Obliterate');\n\tif (CacheRealCookiesEarned >= 1000000000000000000000000000000) SimWin('Negative void');\n\tif (CacheRealCookiesEarned >= 1000000000000000000000000000000000) SimWin('To crumbs, you say?');\n\tif (CacheRealCookiesEarned >= 1000000000000000000000000000000000000) SimWin('You get nothing');\n\tif (CacheRealCookiesEarned >= 1000000000000000000000000000000000000000) SimWin('Humble rebeginnings');\n\tif (CacheRealCookiesEarned >= 1000000000000000000000000000000000000000000) SimWin('The end of the world');\n\tif (CacheRealCookiesEarned >= 1000000000000000000000000000000000000000000000) SimWin('Oh, you\\'re back');\n\tif (CacheRealCookiesEarned >= 1000000000000000000000000000000000000000000000000) SimWin('Lazarus');\n\tif (CacheRealCookiesEarned >= 1000000000000000000000000000000000000000000000000000) SimWin('Smurf account');\n\tif (CacheRealCookiesEarned >= 1000000000000000000000000000000000000000000000000000000) SimWin('If at first you don\\'t succeed');\n\n\tSimUpgrades[\"Heavenly chip secret\"].bought = 1;\n\tSimUpgrades[\"Heavenly cookie stand\"].bought = 1;\n\tSimUpgrades[\"Heavenly bakery\"].bought = 1;\n\tSimUpgrades[\"Heavenly confectionery\"].bought = 1;\n\tSimUpgrades[\"Heavenly key\"].bought = 1;\n\n\tSimPrestige = newHeavenlyChips;\n\n\tconst lastAchievementsOwned = SimAchievementsOwned;\n\n\tCalculateGains();\n\n\tCheckOtherAchiev();\n\n\tif (lastAchievementsOwned !== CM.Sim.AchievementsOwned) {\n\t\tCalculateGains();\n\t}\n\n\tconst ResetCPS = SimCookiesPs - curCPS;\n\n\t// Reset Pretige level after calculation as it is used in CM.Sim.CalculateGains() so can't be local\n\tSimPrestige = Game.prestige;\n\n\treturn ResetCPS;\n}\n\n;// CONCATENATED MODULE: ./src/Config/ToggleSetting.js\n\n\n\n\n/** Functions related to toggling or changing an individual setting */\n\n/** Used to name certain DOM or outside facing elements and refer to them */\nconst ToggleSetting_ConfigPrefix = 'CMConfig';\n\n/**\n * This function toggles options by incrementing them with 1 and handling changes\n * It is called by the onclick event of options of the \"bool\" type\n * @param \t{string}\tconfig\tThe name of the option\n */\nfunction ToggleConfig(config) {\n\tCMOptions[config]++;\n\n\tif (CMOptions[config] === SettingsData[config].label.length) {\n\t\tCMOptions[config] = 0;\n\t\tif (SettingsData[config].toggle) l(ToggleSetting_ConfigPrefix + config).className = 'option off';\n\t} else l(ToggleSetting_ConfigPrefix + config).className = 'option';\n\n\tif (typeof SettingsData[config].func !== 'undefined') {\n\t\tSettingsData[config].func();\n\t}\n\n\tl(ToggleSetting_ConfigPrefix + config).innerHTML = SettingsData[config].label[CMOptions[config]];\n\tSaveConfig();\n}\n\n/**\n * This function sets the value of the specified volume-option and updates the display in the options menu\n * It is called by the oninput and onchange event of \"vol\" type options\n * @param \t{string}\tconfig\tThe name of the option\n */\nfunction ToggleConfigVolume(config) {\n\tif (l(`slider${config}`) !== null) {\n\t\tl(`slider${config}right`).innerHTML = `${l(`slider${config}`).value}%`;\n\t\tCMOptions[config] = Math.round(l(`slider${config}`).value);\n\t}\n\tSaveConfig();\n}\n\n/**\n * This function toggles header options by incrementing them with 1 and handling changes\n * It is called by the onclick event of the +/- next to headers\n * @param \t{string}\tconfig\tThe name of the header\n */\nfunction ToggleHeader(config) {\n\tCMOptions.Header[config]++;\n\tif (CMOptions.Header[config] > 1) CMOptions.Header[config] = 0;\n\tSaveConfig();\n}\n\n;// CONCATENATED MODULE: ./src/Disp/MenuSections/CreateDOMElements.js\n/** Section: Functions related to the creation of basic DOM elements page */\n\n\n\n\n\n/**\n * This function creates a header-object for the stats page\n * It is called by CM.Disp.AddMenuStats()\n * @param \t{string}\t\tconfig\tThe name of the Config-group\n * @param \t{string}\t\ttext\tThe to-be displayed name of the header\n * @returns\t{object}\t\tdiv\t\tThe header object\n */\nfunction StatsHeader(text, config) {\n\tconst div = document.createElement('div');\n\tdiv.className = 'title';\n\tdiv.style.padding = '0px 16px';\n\tdiv.style.opacity = '0.7';\n\tdiv.style.fontSize = '17px';\n\tdiv.style.fontFamily = '\"Kavoon\", Georgia, serif';\n\tdiv.appendChild(document.createTextNode(`${text} `));\n\tconst span = document.createElement('span');\n\tspan.style.cursor = 'pointer';\n\tspan.style.display = 'inline-block';\n\tspan.style.height = '14px';\n\tspan.style.width = '14px';\n\tspan.style.borderRadius = '7px';\n\tspan.style.textAlign = 'center';\n\tspan.style.backgroundColor = '#C0C0C0';\n\tspan.style.color = 'black';\n\tspan.style.fontSize = '13px';\n\tspan.style.verticalAlign = 'middle';\n\tspan.textContent = CMOptions.Header[config] ? '-' : '+';\n\tspan.onclick = function () { ToggleHeader(config); Game.UpdateMenu(); };\n\tdiv.appendChild(span);\n\treturn div;\n}\n\n/**\n * This function creates an stats-listing-object for the stats page\n * It is called by CM.Disp.AddMenuStats()\n * @param \t{string}\t\ttype\t\tThe type fo the listing\n * @param \t{string}\t\tname\t\tThe name of the option\n * @param \t{object}\t\ttext\t\tThe text-object of the option\n * @param \t{string}\t\tplaceholder\tThe id of the to-be displayed tooltip if applicable\n * @returns\t{object}\t\tdiv\t\t\tThe option object\n */\nfunction StatsListing(type, name, text, placeholder) {\n\tconst div = document.createElement('div');\n\tdiv.className = 'listing';\n\n\tconst listingName = document.createElement('b');\n\tlistingName.textContent = name;\n\tdiv.appendChild(listingName);\n\tif (type === 'withTooltip') {\n\t\tdiv.className = 'listing';\n\t\tdiv.appendChild(document.createTextNode(' '));\n\n\t\tconst tooltip = document.createElement('span');\n\t\ttooltip.onmouseout = function () { Game.tooltip.hide(); };\n\t\ttooltip.onmouseover = function () { Game.tooltip.draw(this, escape(TooltipText[placeholder].innerHTML)); };\n\t\ttooltip.style.cursor = 'default';\n\t\ttooltip.style.display = 'inline-block';\n\t\ttooltip.style.height = '10px';\n\t\ttooltip.style.width = '10px';\n\t\ttooltip.style.borderRadius = '5px';\n\t\ttooltip.style.textAlign = 'center';\n\t\ttooltip.style.backgroundColor = '#C0C0C0';\n\t\ttooltip.style.color = 'black';\n\t\ttooltip.style.fontSize = '9px';\n\t\ttooltip.style.verticalAlign = 'bottom';\n\t\ttooltip.textContent = '?';\n\t\tdiv.appendChild(tooltip);\n\t}\n\tdiv.appendChild(document.createTextNode(': '));\n\tdiv.appendChild(text);\n\treturn div;\n}\n\n/**\n * This function creates a tooltip containing all missing holiday items contained in the list theMissDisp\n * @param \t{list}\t\t\ttheMissDisp\t\tA list of the missing holiday items\n * @returns\t{object}\t\tfrag\t\t\tThe tooltip object\n */\nfunction StatsMissDisp(theMissDisp) {\n\tconst frag = document.createDocumentFragment();\n\tfrag.appendChild(document.createTextNode(`${theMissDisp.length} `));\n\tconst span = document.createElement('span');\n\tspan.onmouseout = function () { Game.tooltip.hide(); };\n\tconst placeholder = document.createElement('div');\n\tconst missing = document.createElement('div');\n\tmissing.style.minWidth = '140px';\n\tmissing.style.marginBottom = '4px';\n\tconst title = document.createElement('div');\n\ttitle.className = 'name';\n\ttitle.style.marginBottom = '4px';\n\ttitle.style.textAlign = 'center';\n\ttitle.textContent = 'Missing';\n\tmissing.appendChild(title);\n\tfor (const i of Object.keys(theMissDisp)) {\n\t\tconst div = document.createElement('div');\n\t\tdiv.style.textAlign = 'center';\n\t\tdiv.appendChild(document.createTextNode(theMissDisp[i]));\n\t\tmissing.appendChild(div);\n\t}\n\tplaceholder.appendChild(missing);\n\tspan.onmouseover = function () { Game.tooltip.draw(this, escape(placeholder.innerHTML)); };\n\tspan.style.cursor = 'default';\n\tspan.style.display = 'inline-block';\n\tspan.style.height = '10px';\n\tspan.style.width = '10px';\n\tspan.style.borderRadius = '5px';\n\tspan.style.textAlign = 'center';\n\tspan.style.backgroundColor = '#C0C0C0';\n\tspan.style.color = 'black';\n\tspan.style.fontSize = '9px';\n\tspan.style.verticalAlign = 'bottom';\n\tspan.textContent = '?';\n\tfrag.appendChild(span);\n\treturn frag;\n}\n\n;// CONCATENATED MODULE: ./src/Disp/MenuSections/CreateStatsSections.js\n/** Functions to create the individual sections of the Statistics page */\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * This function creates the \"Lucky\" section of the stats page\n * @returns\t{object}\tsection\t\tThe object contating the Lucky section\n */\nfunction LuckySection() {\n\t// This sets which tooltip to display for certain stats\n\tconst goldCookTooltip = Game.auraMult('Dragon\\'s Fortune') ? 'GoldCookDragonsFortuneTooltipPlaceholder' : 'GoldCookTooltipPlaceholder';\n\n\tconst section = document.createElement('div');\n\tsection.className = 'CMStatsLuckySection';\n\n\tconst luckyColor = ((Game.cookies + GetWrinkConfigBank()) < CacheLucky) ? ColorRed : ColorGreen;\n\tconst luckyTime = ((Game.cookies + GetWrinkConfigBank()) < CacheLucky) ? FormatTime((CacheLucky - (Game.cookies + GetWrinkConfigBank())) / GetCPS()) : '';\n\tconst luckyReqFrag = document.createDocumentFragment();\n\tconst luckyReqSpan = document.createElement('span');\n\tluckyReqSpan.style.fontWeight = 'bold';\n\tluckyReqSpan.className = ColorTextPre + luckyColor;\n\tluckyReqSpan.textContent = BeautifyFormatting_Beautify(CacheLucky);\n\tluckyReqFrag.appendChild(luckyReqSpan);\n\tif (luckyTime !== '') {\n\t\tconst luckyReqSmall = document.createElement('small');\n\t\tluckyReqSmall.textContent = ` (${luckyTime})`;\n\t\tluckyReqFrag.appendChild(luckyReqSmall);\n\t}\n\tsection.appendChild(StatsListing('withTooltip', '\"Lucky!\" Cookies Required', luckyReqFrag, goldCookTooltip));\n\n\tconst luckyColorFrenzy = ((Game.cookies + GetWrinkConfigBank()) < CacheLuckyFrenzy) ? ColorRed : ColorGreen;\n\tconst luckyTimeFrenzy = ((Game.cookies + GetWrinkConfigBank()) < CacheLuckyFrenzy) ? FormatTime((CacheLuckyFrenzy - (Game.cookies + GetWrinkConfigBank())) / GetCPS()) : '';\n\tconst luckyReqFrenFrag = document.createDocumentFragment();\n\tconst luckyReqFrenSpan = document.createElement('span');\n\tluckyReqFrenSpan.style.fontWeight = 'bold';\n\tluckyReqFrenSpan.className = ColorTextPre + luckyColorFrenzy;\n\tluckyReqFrenSpan.textContent = BeautifyFormatting_Beautify(CacheLuckyFrenzy);\n\tluckyReqFrenFrag.appendChild(luckyReqFrenSpan);\n\tif (luckyTimeFrenzy !== '') {\n\t\tconst luckyReqFrenSmall = document.createElement('small');\n\t\tluckyReqFrenSmall.textContent = ` (${luckyTimeFrenzy})`;\n\t\tluckyReqFrenFrag.appendChild(luckyReqFrenSmall);\n\t}\n\tsection.appendChild(StatsListing('withTooltip', '\"Lucky!\" Cookies Required (Frenzy)', luckyReqFrenFrag, goldCookTooltip));\n\n\tconst luckySplit = CacheLuckyReward !== CacheLuckyWrathReward;\n\n\tconst luckyRewardMaxSpan = document.createElement('span');\n\tluckyRewardMaxSpan.style.fontWeight = 'bold';\n\tluckyRewardMaxSpan.className = ColorTextPre + CacheLuckyReward;\n\tluckyRewardMaxSpan.textContent = BeautifyFormatting_Beautify(CacheLuckyReward) + (luckySplit ? (` / ${BeautifyFormatting_Beautify(CacheLuckyWrathReward)}`) : '');\n\tsection.appendChild(StatsListing('withTooltip', `\"Lucky!\" Reward (MAX)${luckySplit ? ' (Golden / Wrath)' : ''}`, luckyRewardMaxSpan, goldCookTooltip));\n\n\tconst luckyRewardFrenzyMaxSpan = document.createElement('span');\n\tluckyRewardFrenzyMaxSpan.style.fontWeight = 'bold';\n\tluckyRewardFrenzyMaxSpan.className = ColorTextPre + luckyRewardFrenzyMaxSpan;\n\tluckyRewardFrenzyMaxSpan.textContent = BeautifyFormatting_Beautify(CacheLuckyRewardFrenzy) + (luckySplit ? (` / ${BeautifyFormatting_Beautify(CacheLuckyWrathRewardFrenzy)}`) : '');\n\tsection.appendChild(StatsListing('withTooltip', `\"Lucky!\" Reward (MAX) (Frenzy)${luckySplit ? ' (Golden / Wrath)' : ''}`, luckyRewardFrenzyMaxSpan, goldCookTooltip));\n\n\tconst luckyCurBase = Math.min((Game.cookies + GetWrinkConfigBank()) * 0.15, CacheNoGoldSwitchCookiesPS * CacheDragonsFortuneMultAdjustment * 60 * 15) + 13;\n\tconst luckyCurSpan = document.createElement('span');\n\tluckyCurSpan.style.fontWeight = 'bold';\n\tluckyCurSpan.className = ColorTextPre + luckyCurSpan;\n\tluckyCurSpan.textContent = BeautifyFormatting_Beautify(CacheGoldenCookiesMult * luckyCurBase) + (luckySplit ? (` / ${BeautifyFormatting_Beautify(CacheWrathCookiesMult * luckyCurBase)}`) : '');\n\tsection.appendChild(StatsListing('withTooltip', `\"Lucky!\" Reward (CUR)${luckySplit ? ' (Golden / Wrath)' : ''}`, luckyCurSpan, goldCookTooltip));\n\treturn section;\n}\n\n/**\n * This function creates the \"Chain\" section of the stats page\n * @returns\t{object}\tsection\t\tThe object contating the Chain section\n */\nfunction ChainSection() {\n\t// This sets which tooltip to display for certain stats\n\tconst goldCookTooltip = Game.auraMult('Dragon\\'s Fortune') ? 'GoldCookDragonsFortuneTooltipPlaceholder' : 'GoldCookTooltipPlaceholder';\n\n\tconst section = document.createElement('div');\n\tsection.className = 'CMStatsChainSection';\n\n\tconst chainColor = ((Game.cookies + GetWrinkConfigBank()) < CacheChainRequired) ? ColorRed : ColorGreen;\n\tconst chainTime = ((Game.cookies + GetWrinkConfigBank()) < CacheChainRequired) ? FormatTime((CacheChainRequired - (Game.cookies + GetWrinkConfigBank())) / GetCPS()) : '';\n\tconst chainReqFrag = document.createDocumentFragment();\n\tconst chainReqSpan = document.createElement('span');\n\tchainReqSpan.style.fontWeight = 'bold';\n\tchainReqSpan.className = ColorTextPre + chainColor;\n\tchainReqSpan.textContent = BeautifyFormatting_Beautify(CacheChainRequired);\n\tchainReqFrag.appendChild(chainReqSpan);\n\tif (chainTime !== '') {\n\t\tconst chainReqSmall = document.createElement('small');\n\t\tchainReqSmall.textContent = ` (${chainTime})`;\n\t\tchainReqFrag.appendChild(chainReqSmall);\n\t}\n\tsection.appendChild(StatsListing('withTooltip', '\"Chain\" Cookies Required', chainReqFrag, goldCookTooltip));\n\n\tconst chainWrathColor = ((Game.cookies + GetWrinkConfigBank()) < CacheChainWrathRequired) ? ColorRed : ColorGreen;\n\tconst chainWrathTime = ((Game.cookies + GetWrinkConfigBank()) < CacheChainWrathRequired) ? FormatTime((CacheChainWrathRequired - (Game.cookies + GetWrinkConfigBank())) / GetCPS()) : '';\n\tconst chainWrathReqFrag = document.createDocumentFragment();\n\tconst chainWrathReqSpan = document.createElement('span');\n\tchainWrathReqSpan.style.fontWeight = 'bold';\n\tchainWrathReqSpan.className = ColorTextPre + chainWrathColor;\n\tchainWrathReqSpan.textContent = BeautifyFormatting_Beautify(CacheChainWrathRequired);\n\tchainWrathReqFrag.appendChild(chainWrathReqSpan);\n\tif (chainWrathTime !== '') {\n\t\tconst chainWrathReqSmall = document.createElement('small');\n\t\tchainWrathReqSmall.textContent = ` (${chainWrathTime})`;\n\t\tchainWrathReqFrag.appendChild(chainWrathReqSmall);\n\t}\n\tsection.appendChild(StatsListing('withTooltip', '\"Chain\" Cookies Required (Wrath)', chainWrathReqFrag, goldCookTooltip));\n\n\tconst chainColorFrenzy = ((Game.cookies + GetWrinkConfigBank()) < CacheChainFrenzyRequired) ? ColorRed : ColorGreen;\n\tconst chainTimeFrenzy = ((Game.cookies + GetWrinkConfigBank()) < CacheChainFrenzyRequired) ? FormatTime((CacheChainFrenzyRequired - (Game.cookies + GetWrinkConfigBank())) / GetCPS()) : '';\n\tconst chainReqFrenFrag = document.createDocumentFragment();\n\tconst chainReqFrenSpan = document.createElement('span');\n\tchainReqFrenSpan.style.fontWeight = 'bold';\n\tchainReqFrenSpan.className = ColorTextPre + chainColorFrenzy;\n\tchainReqFrenSpan.textContent = BeautifyFormatting_Beautify(CacheChainFrenzyRequired);\n\tchainReqFrenFrag.appendChild(chainReqFrenSpan);\n\tif (chainTimeFrenzy !== '') {\n\t\tconst chainReqFrenSmall = document.createElement('small');\n\t\tchainReqFrenSmall.textContent = ` (${chainTimeFrenzy})`;\n\t\tchainReqFrenFrag.appendChild(chainReqFrenSmall);\n\t}\n\tsection.appendChild(StatsListing('withTooltip', '\"Chain\" Cookies Required (Frenzy)', chainReqFrenFrag, goldCookTooltip));\n\n\tconst chainWrathColorFrenzy = ((Game.cookies + GetWrinkConfigBank()) < CacheChainFrenzyWrathRequired) ? ColorRed : ColorGreen;\n\tconst chainWrathTimeFrenzy = ((Game.cookies + GetWrinkConfigBank()) < CacheChainFrenzyWrathRequired) ? FormatTime((CacheChainFrenzyWrathRequired - (Game.cookies + GetWrinkConfigBank())) / GetCPS()) : '';\n\tconst chainWrathReqFrenFrag = document.createDocumentFragment();\n\tconst chainWrathReqFrenSpan = document.createElement('span');\n\tchainWrathReqFrenSpan.style.fontWeight = 'bold';\n\tchainWrathReqFrenSpan.className = ColorTextPre + chainWrathColorFrenzy;\n\tchainWrathReqFrenSpan.textContent = BeautifyFormatting_Beautify(CacheChainFrenzyWrathRequired);\n\tchainWrathReqFrenFrag.appendChild(chainWrathReqFrenSpan);\n\tif (chainWrathTimeFrenzy !== '') {\n\t\tconst chainWrathReqFrenSmall = document.createElement('small');\n\t\tchainWrathReqFrenSmall.textContent = ` (${chainWrathTimeFrenzy})`;\n\t\tchainWrathReqFrenFrag.appendChild(chainWrathReqFrenSmall);\n\t}\n\tsection.appendChild(StatsListing('withTooltip', '\"Chain\" Cookies Required (Frenzy) (Wrath)', chainWrathReqFrenFrag, goldCookTooltip));\n\n\tsection.appendChild(StatsListing('withTooltip', '\"Chain\" Reward (MAX) (Golden / Wrath)', document.createTextNode(`${BeautifyFormatting_Beautify(CacheChainMaxReward[0])} / ${BeautifyFormatting_Beautify(CacheChainWrathMaxReward[0])}`), goldCookTooltip));\n\n\tsection.appendChild(StatsListing('withTooltip', '\"Chain\" Reward (MAX) (Frenzy) (Golden / Wrath)', document.createTextNode((`${BeautifyFormatting_Beautify(CacheChainFrenzyMaxReward[0])} / ${BeautifyFormatting_Beautify(CacheChainFrenzyMaxReward[0])}`)), goldCookTooltip));\n\n\tconst chainCurMax = Math.min(Game.cookiesPs * 60 * 60 * 6 * CacheDragonsFortuneMultAdjustment, Game.cookies * 0.5);\n\tconst chainCur = MaxChainCookieReward(7, chainCurMax, CacheGoldenCookiesMult)[0];\n\tconst chainCurWrath = MaxChainCookieReward(6, chainCurMax, CacheWrathCookiesMult)[0];\n\tsection.appendChild(StatsListing('withTooltip', '\"Chain\" Reward (CUR) (Golden / Wrath)', document.createTextNode((`${BeautifyFormatting_Beautify(chainCur)} / ${BeautifyFormatting_Beautify(chainCurWrath)}`)), goldCookTooltip));\n\n\tsection.appendChild(StatsListing('withTooltip', 'CPS Needed For Next Level (G / W)', document.createTextNode((`${BeautifyFormatting_Beautify(CacheChainRequiredNext)} / ${BeautifyFormatting_Beautify(CacheChainWrathRequiredNext)}`)), 'ChainNextLevelPlaceholder'));\n\tsection.appendChild(StatsListing('withTooltip', 'CPS Needed For Next Level (Frenzy) (G / W)', document.createTextNode((`${BeautifyFormatting_Beautify(CacheChainFrenzyRequiredNext)} / ${BeautifyFormatting_Beautify(CacheChainFrenzyWrathRequiredNext)}`)), 'ChainNextLevelPlaceholder'));\n\treturn section;\n}\n\n/**\n * This function creates the \"Spells\" section of the stats page\n * @returns\t{object}\tsection\t\tThe object contating the Spells section\n */\nfunction SpellsSection() {\n\tconst section = document.createElement('div');\n\tsection.className = 'CMStatsSpellsSection';\n\n\tconst conjureColor = ((Game.cookies + GetWrinkConfigBank()) < CacheConjure) ? ColorRed : ColorGreen;\n\tconst conjureTime = ((Game.cookies + GetWrinkConfigBank()) < CacheConjure) ? FormatTime((CacheConjure - (Game.cookies + GetWrinkConfigBank())) / GetCPS()) : '';\n\n\tconst conjureReqFrag = document.createDocumentFragment();\n\tconst conjureReqSpan = document.createElement('span');\n\tconjureReqSpan.style.fontWeight = 'bold';\n\tconjureReqSpan.className = ColorTextPre + conjureColor;\n\tconjureReqSpan.textContent = BeautifyFormatting_Beautify(CacheConjure);\n\tconjureReqFrag.appendChild(conjureReqSpan);\n\tif (conjureTime !== '') {\n\t\tconst conjureReqSmall = document.createElement('small');\n\t\tconjureReqSmall.textContent = ` (${conjureTime})`;\n\t\tconjureReqFrag.appendChild(conjureReqSmall);\n\t}\n\tsection.appendChild(StatsListing('withTooltip', '\"Conjure Baked Goods\" Cookies Required', conjureReqFrag, 'GoldCookTooltipPlaceholder'));\n\tsection.appendChild(StatsListing('withTooltip', '\"Conjure Baked Goods\" Reward (MAX)', document.createTextNode(BeautifyFormatting_Beautify(CacheConjureReward)), 'GoldCookTooltipPlaceholder'));\n\n\tconst conjureFrenzyColor = ((Game.cookies + GetWrinkConfigBank()) < CacheConjure * 7) ? ColorRed : ColorGreen;\n\tconst conjureFrenzyCur = Math.min((Game.cookies + GetWrinkConfigBank()) * 0.15, CacheNoGoldSwitchCookiesPS * 60 * 30);\n\tconst conjureFrenzyTime = ((Game.cookies + GetWrinkConfigBank()) < CacheConjure * 7) ? FormatTime((CacheConjure * 7 - (Game.cookies + GetWrinkConfigBank())) / GetCPS()) : '';\n\n\tconst conjureFrenzyReqFrag = document.createDocumentFragment();\n\tconst conjureFrenzyReqSpan = document.createElement('span');\n\tconjureFrenzyReqSpan.style.fontWeight = 'bold';\n\tconjureFrenzyReqSpan.className = ColorTextPre + conjureFrenzyColor;\n\tconjureFrenzyReqSpan.textContent = BeautifyFormatting_Beautify(CacheConjure * 7);\n\tconjureFrenzyReqFrag.appendChild(conjureFrenzyReqSpan);\n\tif (conjureFrenzyTime !== '') {\n\t\tconst conjureFrenzyReqSmall = document.createElement('small');\n\t\tconjureFrenzyReqSmall.textContent = ` (${conjureFrenzyTime})`;\n\t\tconjureFrenzyReqFrag.appendChild(conjureFrenzyReqSmall);\n\t}\n\tsection.appendChild(StatsListing('withTooltip', '\"Conjure Baked Goods\" Cookies Required (Frenzy)', conjureFrenzyReqFrag, 'GoldCookTooltipPlaceholder'));\n\tsection.appendChild(StatsListing('withTooltip', '\"Conjure Baked Goods\" Reward (MAX) (Frenzy)', document.createTextNode(BeautifyFormatting_Beautify(CacheConjureReward * 7)), 'GoldCookTooltipPlaceholder'));\n\tsection.appendChild(StatsListing('withTooltip', '\"Conjure Baked Goods\" Reward (CUR)', document.createTextNode(BeautifyFormatting_Beautify(conjureFrenzyCur)), 'GoldCookTooltipPlaceholder'));\n\tif (CacheEdifice) {\n\t\tsection.appendChild(StatsListing('withTooltip', '\"Spontaneous Edifice\" Cookies Required (most expensive building)', document.createTextNode(`${BeautifyFormatting_Beautify(CacheEdifice)} (${CacheEdificeBuilding})`), 'GoldCookTooltipPlaceholder'));\n\t}\n\treturn section;\n}\n\n/**\n * This function creates the \"Garden\" section of the stats page\n * @returns\t{object}\tsection\t\tThe object contating the Spells section\n */\nfunction GardenSection() {\n\tconst section = document.createElement('div');\n\tsection.className = 'CMStatsGardenSection';\n\n\tconst bakeberryColor = (Game.cookies < Game.cookiesPs * 60 * 30) ? ColorRed : ColorGreen;\n\tconst bakeberryFrag = document.createElement('span');\n\tbakeberryFrag.style.fontWeight = 'bold';\n\tbakeberryFrag.className = ColorTextPre + bakeberryColor;\n\tbakeberryFrag.textContent = BeautifyFormatting_Beautify(Game.cookiesPs * 60 * 30);\n\tsection.appendChild(StatsListing('basic', 'Cookies required for max reward of Bakeberry: ', bakeberryFrag));\n\n\tconst chocorootColor = (Game.cookies < Game.cookiesPs * 60 * 3) ? ColorRed : ColorGreen;\n\tconst chocorootFrag = document.createElement('span');\n\tchocorootFrag.style.fontWeight = 'bold';\n\tchocorootFrag.className = ColorTextPre + chocorootColor;\n\tchocorootFrag.textContent = BeautifyFormatting_Beautify(Game.cookiesPs * 60 * 3);\n\tsection.appendChild(StatsListing('basic', 'Cookies required for max reward of Chocoroot: ', chocorootFrag));\n\n\tconst queenbeetColor = (Game.cookies < Game.cookiesPs * 60 * 60) ? ColorRed : ColorGreen;\n\tconst queenbeetFrag = document.createElement('span');\n\tqueenbeetFrag.style.fontWeight = 'bold';\n\tqueenbeetFrag.className = ColorTextPre + queenbeetColor;\n\tqueenbeetFrag.textContent = BeautifyFormatting_Beautify(Game.cookiesPs * 60 * 60);\n\tsection.appendChild(StatsListing('basic', 'Cookies required for max reward of Queenbeet: ', queenbeetFrag));\n\n\tconst duketaterColor = (Game.cookies < Game.cookiesPs * 60 * 120) ? ColorRed : ColorGreen;\n\tconst duketaterFrag = document.createElement('span');\n\tduketaterFrag.style.fontWeight = 'bold';\n\tduketaterFrag.className = ColorTextPre + duketaterColor;\n\tduketaterFrag.textContent = BeautifyFormatting_Beautify(Game.cookiesPs * 60 * 120);\n\tsection.appendChild(StatsListing('basic', 'Cookies required for max reward of Duketater: ', duketaterFrag));\n\treturn section;\n}\n\n/**\n * This function creates the \"Prestige\" section of the stats page\n * @returns\t{object}\tsection\t\tThe object contating the Prestige section\n */\nfunction PrestigeSection() {\n\tconst section = document.createElement('div');\n\tsection.className = 'CMStatsPrestigeSection';\n\n\tconst possiblePresMax = Math.floor(Game.HowMuchPrestige(CacheRealCookiesEarned\n\t\t+ Game.cookiesReset + CacheWrinklersTotal\n\t\t+ (Game.HasUnlocked('Chocolate egg') && !Game.Has('Chocolate egg') ? CacheLastChoEgg : 0)));\n\tsection.appendChild(StatsListing('withTooltip', 'Prestige Level (CUR / MAX)', document.createTextNode(`${BeautifyFormatting_Beautify(Game.prestige)} / ${BeautifyFormatting_Beautify(possiblePresMax)}`), 'PrestMaxTooltipPlaceholder'));\n\n\tconst neededCook = Game.HowManyCookiesReset(possiblePresMax + 1) - (CacheRealCookiesEarned + Game.cookiesReset + CacheWrinklersTotal + ((Game.HasUnlocked('Chocolate egg') && !Game.Has('Chocolate egg') ? CacheLastChoEgg : 0) ? CacheLastChoEgg : 0));\n\tconst cookiesNextFrag = document.createDocumentFragment();\n\tcookiesNextFrag.appendChild(document.createTextNode(BeautifyFormatting_Beautify(neededCook)));\n\tconst cookiesNextSmall = document.createElement('small');\n\tcookiesNextSmall.textContent = ` (${FormatTime(neededCook / CacheAvgCPSWithChoEgg, 1)})`;\n\tcookiesNextFrag.appendChild(cookiesNextSmall);\n\tsection.appendChild(StatsListing('withTooltip', 'Cookies To Next Level', cookiesNextFrag, 'NextPrestTooltipPlaceholder'));\n\n\tsection.appendChild(StatsListing('withTooltip', 'Heavenly Chips (CUR / MAX)', document.createTextNode(`${BeautifyFormatting_Beautify(Game.heavenlyChips)} / ${BeautifyFormatting_Beautify((possiblePresMax - Game.prestige) + Game.heavenlyChips)}`), 'HeavenChipMaxTooltipPlaceholder'));\n\n\tsection.appendChild(StatsListing('basic', 'Heavenly Chips Per Second (last 5 seconds)', document.createTextNode(BeautifyFormatting_Beautify(CacheHCPerSecond, 2))));\n\n\tconst HCTarget = Number(CMOptions.HeavenlyChipsTarget);\n\tif (!isNaN(HCTarget)) {\n\t\tconst CookiesTillTarget = HCTarget - Math.floor(Game.HowMuchPrestige(Game.cookiesReset + Game.cookiesEarned));\n\t\tif (CookiesTillTarget > 0) {\n\t\t\tsection.appendChild(StatsListing('basic', 'Heavenly Chips To Target Set In Settings (CUR)', document.createTextNode(BeautifyFormatting_Beautify(CookiesTillTarget))));\n\t\t\tsection.appendChild(StatsListing('basic', 'Time To Target (CUR, Current 5 Second Average)', document.createTextNode(FormatTime(CookiesTillTarget / CacheHCPerSecond))));\n\t\t}\n\t}\n\n\tconst resetBonus = ResetBonus(possiblePresMax);\n\tconst resetFrag = document.createDocumentFragment();\n\tresetFrag.appendChild(document.createTextNode(BeautifyFormatting_Beautify(resetBonus)));\n\tconst increase = Math.round(resetBonus / Game.cookiesPs * 10000);\n\tif (isFinite(increase) && increase !== 0) {\n\t\tconst resetSmall = document.createElement('small');\n\t\tresetSmall.textContent = ` (${increase / 100}% of income)`;\n\t\tresetFrag.appendChild(resetSmall);\n\t}\n\tsection.appendChild(StatsListing('withTooltip', 'Reset Bonus Income', resetFrag, 'ResetTooltipPlaceholder'));\n\n\tconst currentPrestige = Math.floor(Game.HowMuchPrestige(Game.cookiesReset));\n\tconst willHave = Math.floor(Game.HowMuchPrestige(Game.cookiesReset + Game.cookiesEarned));\n\tconst willGet = willHave - currentPrestige;\n\tif (!Game.Has('Lucky digit')) {\n\t\tlet delta7 = 7 - (willHave % 10);\n\t\tif (delta7 < 0) delta7 += 10;\n\t\tconst next7Reset = willGet + delta7;\n\t\tconst next7Total = willHave + delta7;\n\t\tconst frag7 = document.createDocumentFragment();\n\t\tfrag7.appendChild(document.createTextNode(`${next7Total.toLocaleString()} / ${next7Reset.toLocaleString()} (+${delta7})`));\n\t\tsection.appendChild(StatsListing('basic', 'Next \"Lucky Digit\" (total / reset)', frag7));\n\t}\n\n\tif (!Game.Has('Lucky number')) {\n\t\tlet delta777 = 777 - (willHave % 1000);\n\t\tif (delta777 < 0) delta777 += 1000;\n\t\tconst next777Reset = willGet + delta777;\n\t\tconst next777Total = willHave + delta777;\n\t\tconst frag777 = document.createDocumentFragment();\n\t\tfrag777.appendChild(document.createTextNode(`${next777Total.toLocaleString()} / ${next777Reset.toLocaleString()} (+${delta777})`));\n\t\tsection.appendChild(StatsListing('basic', 'Next \"Lucky Number\" (total / reset)', frag777));\n\t}\n\n\tif (!Game.Has('Lucky payout')) {\n\t\tlet delta777777 = 777777 - (willHave % 1000000);\n\t\tif (delta777777 < 0) delta777777 += 1000000;\n\t\tconst next777777Reset = willGet + delta777777;\n\t\tconst next777777Total = willHave + delta777777;\n\t\tconst frag777777 = document.createDocumentFragment();\n\t\tfrag777777.appendChild(document.createTextNode(`${next777777Total.toLocaleString()} / ${next777777Reset.toLocaleString()} (+${delta777777})`));\n\t\tsection.appendChild(StatsListing('basic', 'Next \"Lucky Payout\" (total / reset)', frag777777));\n\t}\n\n\treturn section;\n}\n\n;// CONCATENATED MODULE: ./src/Disp/MenuSections/AddStatsPage.js\n/** Main function to create the sections of Cookie Monster on the Statistics page */\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * This function adds stats created by CookieMonster to the stats page\n * It is called by CM.Disp.AddMenu\n * @param {object} title\tOn object that includes the title of the menu\n */\nfunction AddMenuStats(title) {\n\tconst stats = document.createElement('div');\n\tstats.className = 'subsection';\n\tstats.appendChild(title);\n\n\tstats.appendChild(StatsHeader('Lucky Cookies', 'Lucky'));\n\tif (CMOptions.Header.Lucky) {\n\t\tstats.appendChild(LuckySection());\n\t}\n\n\tstats.appendChild(StatsHeader('Chain Cookies', 'Chain'));\n\tif (CMOptions.Header.Chain) {\n\t\tstats.appendChild(ChainSection());\n\t}\n\n\tif (Game.Objects['Wizard tower'].minigameLoaded) {\n\t\tstats.appendChild(StatsHeader('Spells', 'Spells'));\n\t\tif (CMOptions.Header.Spells) {\n\t\t\tstats.appendChild(SpellsSection());\n\t\t}\n\t}\n\n\tif (Game.Objects.Farm.minigameLoaded) {\n\t\tstats.appendChild(StatsHeader('Garden', 'Garden'));\n\t\tif (CMOptions.Header.Garden) {\n\t\t\tstats.appendChild(GardenSection());\n\t\t}\n\t}\n\n\tstats.appendChild(StatsHeader('Prestige', 'Prestige'));\n\tif (CMOptions.Header.Prestige) {\n\t\tstats.appendChild(PrestigeSection());\n\t}\n\n\tif (Game.cpsSucked > 0) {\n\t\tstats.appendChild(StatsHeader('Wrinklers', 'Wrink'));\n\t\tif (CMOptions.Header.Wrink) {\n\t\t\tconst popAllFrag = document.createDocumentFragment();\n\t\t\tpopAllFrag.appendChild(document.createTextNode(`${BeautifyFormatting_Beautify(CacheWrinklersTotal)} / ${BeautifyFormatting_Beautify(CacheWrinklersNormal)} `));\n\t\t\tconst popAllA = document.createElement('a');\n\t\t\tpopAllA.textContent = 'Pop All Normal';\n\t\t\tpopAllA.className = 'option';\n\t\t\tpopAllA.onclick = function () { PopAllNormalWrinklers(); };\n\t\t\tpopAllFrag.appendChild(popAllA);\n\t\t\tstats.appendChild(StatsListing('basic', 'Rewards of Popping (All/Normal)', popAllFrag));\n\t\t\tconst popFattestFrag = document.createDocumentFragment();\n\t\t\tpopFattestFrag.appendChild(document.createTextNode(`${BeautifyFormatting_Beautify(CacheWrinklersFattest[0])} `));\n\t\t\tconst popFattestA = document.createElement('a');\n\t\t\tpopFattestA.textContent = 'Pop Single Fattest';\n\t\t\tpopFattestA.className = 'option';\n\t\t\tpopFattestA.onclick = function () { if (CacheWrinklersFattest[1] !== null) Game.wrinklers[CacheWrinklersFattest[1]].hp = 0; };\n\t\t\tpopFattestFrag.appendChild(popFattestA);\n\t\t\tstats.appendChild(StatsListing('basic', `Rewards of Popping Single Fattest Non-Shiny Wrinkler (id: ${CacheWrinklersFattest[1] !== null ? CacheWrinklersFattest[1] : 'None'})`, popFattestFrag));\n\t\t}\n\t}\n\n\tlet specDisp = false;\n\tconst missingHalloweenCookies = [];\n\tfor (const i of Object.keys(HalloCookies)) {\n\t\tif (!Game.Has(HalloCookies[i])) {\n\t\t\tmissingHalloweenCookies.push(HalloCookies[i]);\n\t\t\tspecDisp = true;\n\t\t}\n\t}\n\tconst missingChristmasCookies = [];\n\tfor (const i of Object.keys(ChristCookies)) {\n\t\tif (!Game.Has(ChristCookies[i])) {\n\t\t\tmissingChristmasCookies.push(ChristCookies[i]);\n\t\t\tspecDisp = true;\n\t\t}\n\t}\n\tconst missingValentineCookies = [];\n\tfor (const i of Object.keys(ValCookies)) {\n\t\tif (!Game.Has(ValCookies[i])) {\n\t\t\tmissingValentineCookies.push(ValCookies[i]);\n\t\t\tspecDisp = true;\n\t\t}\n\t}\n\tconst missingNormalEggs = [];\n\tfor (const i of Object.keys(Game.eggDrops)) {\n\t\tif (!Game.HasUnlocked(Game.eggDrops[i])) {\n\t\t\tmissingNormalEggs.push(Game.eggDrops[i]);\n\t\t\tspecDisp = true;\n\t\t}\n\t}\n\tconst missingRareEggs = [];\n\tfor (const i of Object.keys(Game.rareEggDrops)) {\n\t\tif (!Game.HasUnlocked(Game.rareEggDrops[i])) {\n\t\t\tmissingRareEggs.push(Game.rareEggDrops[i]);\n\t\t\tspecDisp = true;\n\t\t}\n\t}\n\tconst missingPlantDrops = [];\n\tfor (const i of Object.keys(PlantDrops)) {\n\t\tif (!Game.HasUnlocked(PlantDrops[i])) {\n\t\t\tmissingPlantDrops.push(PlantDrops[i]);\n\t\t\tspecDisp = true;\n\t\t}\n\t}\n\tconst choEgg = (Game.HasUnlocked('Chocolate egg') && !Game.Has('Chocolate egg'));\n\tconst centEgg = Game.Has('Century egg');\n\n\tif (Game.season === 'christmas' || specDisp || choEgg || centEgg) {\n\t\tstats.appendChild(StatsHeader('Season Specials', 'Sea'));\n\t\tif (CMOptions.Header.Sea) {\n\t\t\tif (missingHalloweenCookies.length !== 0) stats.appendChild(StatsListing('basic', 'Halloween Cookies Left to Buy', StatsMissDisp(missingHalloweenCookies)));\n\t\t\tif (missingChristmasCookies.length !== 0) stats.appendChild(StatsListing('basic', 'Christmas Cookies Left to Buy', StatsMissDisp(missingChristmasCookies)));\n\t\t\tif (missingValentineCookies.length !== 0) stats.appendChild(StatsListing('basic', 'Valentine Cookies Left to Buy', StatsMissDisp(missingValentineCookies)));\n\t\t\tif (missingNormalEggs.length !== 0) stats.appendChild(StatsListing('basic', 'Normal Easter Eggs Left to Unlock', StatsMissDisp(missingNormalEggs)));\n\t\t\tif (missingRareEggs.length !== 0) stats.appendChild(StatsListing('basic', 'Rare Easter Eggs Left to Unlock', StatsMissDisp(missingRareEggs)));\n\t\t\tif (missingPlantDrops.length !== 0) stats.appendChild(StatsListing('basic', 'Rare Plant Drops Left to Unlock', StatsMissDisp(missingPlantDrops)));\n\n\t\t\tif (Game.season === 'christmas') stats.appendChild(StatsListing('basic', 'Reindeer Reward', document.createTextNode(BeautifyFormatting_Beautify(CacheSeaSpec))));\n\t\t\tif (choEgg) {\n\t\t\t\tstats.appendChild(StatsListing('withTooltip', 'Chocolate Egg Cookies', document.createTextNode(BeautifyFormatting_Beautify(CacheLastChoEgg)), 'ChoEggTooltipPlaceholder'));\n\t\t\t}\n\t\t\tif (centEgg) {\n\t\t\t\tstats.appendChild(StatsListing('basic', 'Century Egg Multiplier', document.createTextNode(`${Math.round((CacheCentEgg - 1) * 10000) / 100}%`)));\n\t\t\t}\n\t\t}\n\t}\n\n\tstats.appendChild(StatsHeader('Miscellaneous', 'Misc'));\n\tif (CMOptions.Header.Misc) {\n\t\tstats.appendChild(StatsListing('basic',\n\t\t\t`Average Cookies Per Second (Past ${CookieTimes[CMOptions.AvgCPSHist] < 60 ? (`${CookieTimes[CMOptions.AvgCPSHist]} seconds`) : ((CookieTimes[CMOptions.AvgCPSHist] / 60) + (CMOptions.AvgCPSHist === 3 ? ' minute' : ' minutes'))})`,\n\t\t\tdocument.createTextNode(BeautifyFormatting_Beautify(GetCPS(), 3))));\n\t\tstats.appendChild(StatsListing('basic', `Average Cookie Clicks Per Second (Past ${ClickTimes[CMOptions.AvgClicksHist]}${CMOptions.AvgClicksHist === 0 ? ' second' : ' seconds'})`, document.createTextNode(BeautifyFormatting_Beautify(CacheAverageClicks, 1))));\n\t\tif (Game.Has('Fortune cookies')) {\n\t\t\tconst fortunes = [];\n\t\t\tfor (const i of Object.keys(Fortunes)) {\n\t\t\t\tif (!Game.Has(Fortunes[i])) {\n\t\t\t\t\tfortunes.push(Fortunes[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (fortunes.length !== 0) stats.appendChild(StatsListing('basic', 'Fortune Upgrades Left to Buy', StatsMissDisp(fortunes)));\n\t\t}\n\t\tif (CMOptions.ShowMissedGC) {\n\t\t\tstats.appendChild(StatsListing('basic', 'Missed Golden Cookies', document.createTextNode(BeautifyFormatting_Beautify(Game.missedGoldenClicks))));\n\t\t}\n\t\tif (Game.prefs.autosave) {\n\t\t\tconst timer = document.createElement('span');\n\t\t\ttimer.id = 'CMStatsAutosaveTimer';\n\t\t\ttimer.innerText = Game.sayTime(Game.fps * 60 - (Game.OnAscend ? 0 : (Game.T % (Game.fps * 60))), 4);\n\t\t\tstats.appendChild(StatsListing('basic', 'Time till autosave', timer));\n\t\t}\n\t}\n\n\tl('menu').insertBefore(stats, l('menu').childNodes[2]);\n\n\tif (CMOptions.MissingUpgrades) {\n\t\tAddMissingUpgrades();\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/MenuSections/InfoPage.js\n/** Functions related to the Stats page */\n\n\n\n\n\n/**\n * This function adds stats created by CookieMonster to the stats page\n * @param {object} title\tOn object that includes the title of the menu\n */\nfunction AddMenuInfo(title) {\n\tconst info = document.createElement('div');\n\tinfo.className = 'subsection';\n\n\tconst span = document.createElement('span');\n\tspan.style.cursor = 'pointer';\n\tspan.style.display = 'inline-block';\n\tspan.style.height = '14px';\n\tspan.style.width = '14px';\n\tspan.style.borderRadius = '7px';\n\tspan.style.textAlign = 'center';\n\tspan.style.backgroundColor = '#C0C0C0';\n\tspan.style.color = 'black';\n\tspan.style.fontSize = '13px';\n\tspan.style.verticalAlign = 'middle';\n\tspan.textContent = CMOptions.Header.InfoTab ? '-' : '+';\n\tspan.onclick = function () { ToggleHeader('InfoTab'); Game.UpdateMenu(); };\n\ttitle.appendChild(span);\n\tinfo.appendChild(title);\n\n\tif (CMOptions.Header.InfoTab) {\n\t\tconst description = document.createElement('div');\n\t\tdescription.innerHTML = ModDescription;\n\t\tinfo.appendChild(description);\n\t\tconst notes = document.createElement('div');\n\t\tnotes.innerHTML = LatestReleaseNotes;\n\t\tinfo.appendChild(notes);\n\t}\n\n\tconst menu = l('menu').children[1];\n\tmenu.insertBefore(info, menu.children[1]);\n}\n\n;// CONCATENATED MODULE: ./src/Data/Sectionheaders.js\n/** Data related to the display titles of certain sections in menu screens */\n\n/** Display titles of the headers of the Cookie Monster settings section */\nconst ConfigGroups = {\n\tBarsColors: 'Bars/Colors',\n\tCalculation: 'Calculation',\n\tNotification: 'Notification',\n\tTooltip: 'Tooltips and additional insights',\n\tStatistics: 'Statistics',\n\tNotation: 'Notation',\n\tMiscellaneous: 'Miscellaneous',\n};\n\n/** Display titles of the headers of the notification section of the Cookie Monster settings */\nconst ConfigGroupsNotification = {\n\tNotificationGeneral: 'General Notifications',\n\tNotificationGC: 'Golden Cookie',\n\tNotificationFC: 'Fortune Cookie',\n\tNotificationSea: 'Season Special',\n\tNotificationGard: 'Garden Tick',\n\tNotificationMagi: 'Full Magic Bar',\n\tNotificationWrink: 'Wrinkler',\n\tNotificationWrinkMax: 'Maximum Wrinklers',\n};\n\n;// CONCATENATED MODULE: ./src/Disp/MenuSections/SettingsPage.js\n/** Functions related to the Options/Preferences page */\n\n\n\n\n\n\n\n\n\n\n\n/**\n * This function adds the options/settings of CookieMonster to the options page\n * It is called by CM.Disp.AddMenu\n * @param {object} title\tOn object that includes the title of the menu\n */\nfunction AddMenuPref(title) {\n\tconst frag = document.createDocumentFragment();\n\tfrag.appendChild(title);\n\n\tfor (const group of Object.keys(ConfigGroups)) {\n\t\tconst groupObject = CreatePrefHeader(group, ConfigGroups[group]); // (group, display-name of group)\n\t\tfrag.appendChild(groupObject);\n\t\tif (CMOptions.Header[group]) { // 0 is show, 1 is collapsed\n\t\t\t// Make sub-sections of Notification section\n\t\t\tif (group === 'Notification') {\n\t\t\t\tfor (const subGroup of Object.keys(ConfigGroupsNotification)) {\n\t\t\t\t\tconst subGroupObject = CreatePrefHeader(subGroup, ConfigGroupsNotification[subGroup]); // (group, display-name of group)\n\t\t\t\t\tsubGroupObject.style.fontSize = '15px';\n\t\t\t\t\tsubGroupObject.style.opacity = '0.5';\n\t\t\t\t\tfrag.appendChild(subGroupObject);\n\t\t\t\t\tif (CMOptions.Header[subGroup]) {\n\t\t\t\t\t\tfor (const option in SettingsData) {\n\t\t\t\t\t\t\tif (SettingsData[option].group === subGroup) frag.appendChild(CreatePrefOption(option));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (const option of Object.keys(SettingsData)) {\n\t\t\t\t\tif (SettingsData[option].group === group) frag.appendChild(CreatePrefOption(option));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tconst resDef = document.createElement('div');\n\tresDef.className = 'listing';\n\tconst resDefBut = document.createElement('a');\n\tresDefBut.className = 'option';\n\tresDefBut.onclick = function () { LoadConfig(SettingsDefault); };\n\tresDefBut.textContent = 'Restore Default';\n\tresDef.appendChild(resDefBut);\n\tfrag.appendChild(resDef);\n\n\tl('menu').childNodes[2].insertBefore(frag, l('menu').childNodes[2].childNodes[l('menu').childNodes[2].childNodes.length - 1]);\n}\n\n/**\n * This function creates a header-object for the options page\n * @param \t{string}\t\tconfig\tThe name of the Config-group\n * @param \t{string}\t\ttext\tThe to-be displayed name of the header\n * @returns\t{object}\t\tdiv\t\tThe header object\n */\nfunction CreatePrefHeader(config, text) {\n\tconst div = document.createElement('div');\n\tdiv.className = 'title';\n\n\tdiv.style.opacity = '0.7';\n\tdiv.style.fontSize = '17px';\n\tdiv.appendChild(document.createTextNode(`${text} `));\n\tconst span = document.createElement('span'); // Creates the +/- button\n\tspan.style.cursor = 'pointer';\n\tspan.style.display = 'inline-block';\n\tspan.style.height = '14px';\n\tspan.style.width = '14px';\n\tspan.style.borderRadius = '7px';\n\tspan.style.textAlign = 'center';\n\tspan.style.backgroundColor = '#C0C0C0';\n\tspan.style.color = 'black';\n\tspan.style.fontSize = '13px';\n\tspan.style.verticalAlign = 'middle';\n\tspan.textContent = CMOptions.Header[config] ? '-' : '+';\n\tspan.onclick = function () { ToggleHeader(config); Game.UpdateMenu(); };\n\tdiv.appendChild(span);\n\treturn div;\n}\n\n/**\n * This function creates an option-object for the options page\n * @param \t{string}\t\tconfig\tThe name of the option\n * @returns\t{object}\t\tdiv\t\tThe option object\n */\nfunction CreatePrefOption(config) {\n\tconst div = document.createElement('div');\n\tdiv.className = 'listing';\n\tif (SettingsData[config].type === 'bool') {\n\t\tconst a = document.createElement('a');\n\t\tif (SettingsData[config].toggle && CMOptions[config] === 0) {\n\t\t\ta.className = 'option off';\n\t\t} else {\n\t\t\ta.className = 'option';\n\t\t}\n\t\ta.id = ToggleSetting_ConfigPrefix + config;\n\t\ta.onclick = function () { ToggleConfig(config); };\n\t\ta.textContent = SettingsData[config].label[CMOptions[config]];\n\t\tdiv.appendChild(a);\n\t\tconst label = document.createElement('label');\n\t\tlabel.textContent = SettingsData[config].desc;\n\t\tdiv.appendChild(label);\n\t\treturn div;\n\t} else if (SettingsData[config].type === 'vol') {\n\t\tconst volume = document.createElement('div');\n\t\tvolume.className = 'sliderBox';\n\t\tconst title = document.createElement('div');\n\t\ttitle.style.float = 'left';\n\t\ttitle.innerHTML = SettingsData[config].desc;\n\t\tvolume.appendChild(title);\n\t\tconst percent = document.createElement('div');\n\t\tpercent.id = `slider${config}right`;\n\t\tpercent.style.float = 'right';\n\t\tpercent.innerHTML = `${CMOptions[config]}%`;\n\t\tvolume.appendChild(percent);\n\t\tconst slider = document.createElement('input');\n\t\tslider.className = 'slider';\n\t\tslider.id = `slider${config}`;\n\t\tslider.style.clear = 'both';\n\t\tslider.type = 'range';\n\t\tslider.min = '0';\n\t\tslider.max = '100';\n\t\tslider.step = '1';\n\t\tslider.value = CMOptions[config];\n\t\tslider.oninput = function () { ToggleConfigVolume(config); };\n\t\tslider.onchange = function () { ToggleConfigVolume(config); };\n\t\tvolume.appendChild(slider);\n\t\tdiv.appendChild(volume);\n\t\treturn div;\n\t} else if (SettingsData[config].type === 'url') {\n\t\tconst span = document.createElement('span');\n\t\tspan.className = 'option';\n\t\tspan.textContent = `${SettingsData[config].label} `;\n\t\tdiv.appendChild(span);\n\t\tconst input = document.createElement('input');\n\t\tinput.id = ToggleSetting_ConfigPrefix + config;\n\t\tinput.className = 'option';\n\t\tinput.type = 'text';\n\t\tinput.readOnly = true;\n\t\tinput.setAttribute('value', CMOptions[config]);\n\t\tinput.style.width = '300px';\n\t\tdiv.appendChild(input);\n\t\tdiv.appendChild(document.createTextNode(' '));\n\t\tconst inputPrompt = document.createElement('input');\n\t\tinputPrompt.id = `${ToggleSetting_ConfigPrefix + config}Prompt`;\n\t\tinputPrompt.className = 'option';\n\t\tinputPrompt.type = 'text';\n\t\tinputPrompt.setAttribute('value', CMOptions[config]);\n\t\tconst a = document.createElement('a');\n\t\ta.className = 'option';\n\t\ta.onclick = function () {\n\t\t\tGame.Prompt(inputPrompt.outerHTML, [['Save', function () { CMOptions[`${config}`] = l(`${ToggleSetting_ConfigPrefix}${config}Prompt`).value; SaveConfig(); Game.ClosePrompt(); Game.UpdateMenu(); }], 'Cancel']);\n\t\t};\n\t\ta.textContent = 'Edit';\n\t\tdiv.appendChild(a);\n\t\tconst label = document.createElement('label');\n\t\tlabel.textContent = SettingsData[config].desc;\n\t\tdiv.appendChild(label);\n\t\treturn div;\n\t} else if (SettingsData[config].type === 'color') {\n\t\tdiv.className = '';\n\t\tfor (let i = 0; i < Colors; i++) {\n\t\t\tconst innerDiv = document.createElement('div');\n\t\t\tinnerDiv.className = 'listing';\n\t\t\tconst input = document.createElement('input');\n\t\t\tinput.id = Colors[i];\n\t\t\tinput.style.width = '65px';\n\t\t\tinput.setAttribute('value', CMOptions.Colors[Colors[i]]);\n\t\t\tinnerDiv.appendChild(input);\n\t\t\tconst change = function () {\n\t\t\t\tCMOptions.Colors[this.targetElement.id] = this.toHEXString();\n\t\t\t\tUpdateColors();\n\t\t\t\tSaveConfig();\n\t\t\t\tGame.UpdateMenu();\n\t\t\t};\n\t\t\tnew JSColor(input, { hash: true, position: 'right', onInput: change });\n\t\t\tconst label = document.createElement('label');\n\t\t\tlabel.textContent = SettingsData.Colors.desc[Colors[i]];\n\t\t\tinnerDiv.appendChild(label);\n\t\t\tdiv.appendChild(innerDiv);\n\t\t}\n\t\treturn div;\n\t} else if (SettingsData[config].type === 'numscale') {\n\t\tconst span = document.createElement('span');\n\t\tspan.className = 'option';\n\t\tspan.textContent = `${SettingsData[config].label} `;\n\t\tdiv.appendChild(span);\n\t\tconst input = document.createElement('input');\n\t\tinput.id = ToggleSetting_ConfigPrefix + config;\n\t\tinput.className = 'option';\n\t\tinput.type = 'number';\n\t\tinput.value = (CMOptions[config]);\n\t\tinput.min = SettingsData[config].min;\n\t\tinput.max = SettingsData[config].max;\n\t\tinput.oninput = function () {\n\t\t\tif (this.value > this.max) console.log('TEST');\n\t\t\tCMOptions[config] = this.value;\n\t\t\tSaveConfig();\n\t\t\tRefreshScale();\n\t\t};\n\t\tdiv.appendChild(input);\n\t\tdiv.appendChild(document.createTextNode(' '));\n\t\tconst label = document.createElement('label');\n\t\tlabel.textContent = SettingsData[config].desc;\n\t\tdiv.appendChild(label);\n\t\treturn div;\n\t}\n\treturn div;\n}\n\n;// CONCATENATED MODULE: ./src/Disp/MenuSections/AddMenus.js\n\n\n\n\n\n/**\n * This function adds the calll the functions to add extra info to the stats and options pages\n */\nfunction AddMenu() {\n\tconst title = document.createElement('div');\n\ttitle.className = 'title';\n\n\tif (Game.onMenu === 'prefs') {\n\t\ttitle.textContent = 'Cookie Monster Settings';\n\t\tAddMenuPref(title);\n\t} else if (Game.onMenu === 'stats') {\n\t\tif (CMOptions.Stats) {\n\t\t\ttitle.textContent = 'Cookie Monster Statistics';\n\t\t\tAddMenuStats(title);\n\t\t}\n\t} else if (Game.onMenu === 'log') {\n\t\ttitle.textContent = 'Cookie Monster '; // To create space between name and button\n\t\tAddMenuInfo(title);\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/TabTitle/TabTitle.js\n/** Functions related to updating the tab in the browser's tab-bar */\n\n\n\n\n\n\n/**\n * This function updates the tab title\n * It is called on every loop by Game.Logic() which also sets CM.Disp.Title to Game.cookies\n */\nfunction UpdateTitle() {\n\tif (Game.OnAscend || CMOptions.Title === 0) {\n\t\tdocument.title = Title;\n\t} else if (CMOptions.Title === 1) {\n\t\tlet addFC = false;\n\t\tlet addSP = false;\n\t\tlet titleGC;\n\t\tlet titleFC;\n\t\tlet titleSP;\n\n\t\tif (CacheSpawnedGoldenShimmer) {\n\t\t\tif (CacheSpawnedGoldenShimmer.wrath) titleGC = `[W${Math.ceil(CacheSpawnedGoldenShimmer.life / Game.fps)}]`;\n\t\t\telse titleGC = `[G${Math.ceil(CacheSpawnedGoldenShimmer.life / Game.fps)}]`;\n\t\t} else if (!Game.Has('Golden switch [off]')) {\n\t\t\ttitleGC = `[${Number(l('CMTimerBarGCMinBar').textContent) < 0 ? '!' : ''}${Math.ceil((Game.shimmerTypes.golden.maxTime - Game.shimmerTypes.golden.time) / Game.fps)}]`;\n\t\t} else titleGC = '[GS]';\n\n\t\tif (LastTickerFortuneState) {\n\t\t\taddFC = true;\n\t\t\ttitleFC = '[F]';\n\t\t}\n\n\t\tif (Game.season === 'christmas') {\n\t\t\taddSP = true;\n\t\t\tif (LastSeasonPopupState) titleSP = `[R${Math.ceil(CacheSeasonPopShimmer.life / Game.fps)}]`;\n\t\t\telse {\n\t\t\t\ttitleSP = `[${Number(l('CMTimerBarRenMinBar').textContent) < 0 ? '!' : ''}${Math.ceil((Game.shimmerTypes.reindeer.maxTime - Game.shimmerTypes.reindeer.time) / Game.fps)}]`;\n\t\t\t}\n\t\t}\n\n\t\t// Remove previous timers and add current cookies\n\t\tlet str = Title;\n\t\tif (str.charAt(0) === '[') {\n\t\t\tstr = str.substring(str.lastIndexOf(']') + 1);\n\t\t}\n\t\tdocument.title = `${titleGC + (addFC ? titleFC : '') + (addSP ? titleSP : '')} ${str}`;\n\t} else if (CMOptions.Title === 2) {\n\t\tlet str = '';\n\t\tlet spawn = false;\n\t\tif (CacheSpawnedGoldenShimmer) {\n\t\t\tspawn = true;\n\t\t\tif (CacheSpawnedGoldenShimmer.wrath) str += `[W${Math.ceil(CacheSpawnedGoldenShimmer.life / Game.fps)}]`;\n\t\t\telse str += `[G${Math.ceil(CacheSpawnedGoldenShimmer.life / Game.fps)}]`;\n\t\t}\n\t\tif (LastTickerFortuneState) {\n\t\t\tspawn = true;\n\t\t\tstr += '[F]';\n\t\t}\n\t\tif (Game.season === 'christmas' && LastSeasonPopupState) {\n\t\t\tstr += `[R${Math.ceil(CacheSeasonPopShimmer.life / Game.fps)}]`;\n\t\t\tspawn = true;\n\t\t}\n\t\tif (spawn) str += ' - ';\n\t\tlet title = 'Cookie Clicker';\n\t\tif (Game.season === 'fools') title = 'Cookie Baker';\n\t\tstr += title;\n\t\tdocument.title = str;\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Disp/Tooltips/PositionLocation.js\n\n\n/**\n * This function updates the location of the tooltip\n * It is called by Game.tooltip.update() because of CM.Main.ReplaceNative()\n */\nfunction UpdateTooltipLocation() {\n\tif (Game.tooltip.origin === 'store') {\n\t\tlet warnOffset = 0;\n\t\tif (CMOptions.ToolWarnLucky === 1 && CMOptions.ToolWarnPos === 1 && l('CMDispTooltipWarningParent') !== null) {\n\t\t\twarnOffset = l('CMDispTooltipWarningParent').clientHeight - 4;\n\t\t}\n\t\tGame.tooltip.tta.style.top = `${Math.min(parseInt(Game.tooltip.tta.style.top), (l('game').clientHeight + l('topBar').clientHeight) - Game.tooltip.tt.clientHeight - warnOffset - 46)}px`;\n\t}\n\t// Kept for future possible use if the code changes again\n\t/* else if (!Game.onCrate && !Game.OnAscend && CM.Options.TimerBar === 1 && CM.Options.TimerBarPos === 0) {\n\t\tGame.tooltip.tta.style.top = (parseInt(Game.tooltip.tta.style.top) + parseInt(CM.Disp.TimerBar.style.height)) + 'px';\n\t} */\n}\n\n;// CONCATENATED MODULE: ./src/Main/ReplaceGameElements/TooltipUpgrades.js\n\n\n\n/**\n * This function replaces the original .onmouseover functions of upgrades so that it calls CM.Disp.Tooltip()\n * CM.Disp.Tooltip() sets the tooltip type to 'u'\n * It is called by Game.RebuildUpgrades() through CM.Main.ReplaceNative() and is therefore not permanent like the other ReplaceTooltip functions\n */\nfunction ReplaceTooltipUpgrade() {\n\tTooltipUpgradeBackup = [];\n\tfor (const i of Object.keys(Game.UpgradesInStore)) {\n\t\tif (l(`upgrade${i}`).onmouseover !== null) {\n\t\t\tTooltipUpgradeBackup[i] = l(`upgrade${i}`).onmouseover;\n\t\t\tl(`upgrade${i}`).onmouseover = function () {\n\t\t\t\tif (!Game.mouseDown) {\n\t\t\t\t\tGame.setOnCrate(this);\n\t\t\t\t\tGame.tooltip.dynamic = 1;\n\t\t\t\t\tGame.tooltip.draw(this, function () {\n\t\t\t\t\t\treturn CreateTooltip('u', `${i}`);\n\t\t\t\t\t}, 'store');\n\t\t\t\t\tGame.tooltip.wobble();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Main/ReplaceGameFunctions/FixMouse.js\n\n\n/**\n * This function fixes Game.mouseY as a result of bars that are added by CookieMonster\n * It is called by Game.UpdateWrinklers(), Game.UpdateSpecial() and the .onmousover of the BigCookie\n * before execution of their actual function\n */\nfunction FixMouseY(target) {\n\tif (CMOptions.TimerBar === 1 && CMOptions.TimerBarPos === 0) {\n\t\tconst timerBarHeight = parseInt(l('CMTimerBar').style.height);\n\t\tGame.mouseY -= timerBarHeight;\n\t\ttarget();\n\t\tGame.mouseY += timerBarHeight;\n\t} else {\n\t\ttarget();\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/Main/ReplaceGameFunctions/ReplaceNative.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * This function replaces certain native (from the base-game) functions\n */\nfunction ReplaceNative() {\n\t// eslint-disable-next-line no-undef\n\tBackupFunctions.Beautify = Beautify;\n\t// eslint-disable-next-line no-undef\n\tBeautify = BeautifyFormatting_Beautify;\n\n\tBackupFunctions.CalculateGains = Game.CalculateGains;\n\tGame.CalculateGains = function () {\n\t\tBackupFunctions.CalculateGains();\n\t\tSimDoSims = 1;\n\t\tSimDateAges = Date.now();\n\t\tSimDateCentury = Date.now();\n\t};\n\n\tBackupFunctions.tooltip = {};\n\tBackupFunctions.tooltip.draw = Game.tooltip.draw;\n\tBackupFunctions.tooltip.drawMod = new Function(`return ${Game.tooltip.draw.toString().split('this').join('Game.tooltip')}`)();\n\tGame.tooltip.draw = function (from, text, origin) {\n\t\tBackupFunctions.tooltip.drawMod(from, text, origin);\n\t};\n\n\tBackupFunctions.tooltip.update = Game.tooltip.update;\n\tBackupFunctions.tooltip.updateMod = new Function(`return ${Game.tooltip.update.toString().split('this.').join('Game.tooltip.')}`)();\n\tGame.tooltip.update = function () {\n\t\tBackupFunctions.tooltip.updateMod();\n\t\tUpdateTooltipLocation();\n\t};\n\n\tBackupFunctions.UpdateWrinklers = Game.UpdateWrinklers;\n\tGame.UpdateWrinklers = function () {\n\t\tFixMouseY(BackupFunctions.UpdateWrinklers);\n\t};\n\n\tBackupFunctions.UpdateSpecial = Game.UpdateSpecial;\n\tGame.UpdateSpecial = function () {\n\t\tFixMouseY(BackupFunctions.UpdateSpecial);\n\t};\n\n\t// Assumes newer browsers\n\tl('bigCookie').removeEventListener('click', Game.ClickCookie, false);\n\tl('bigCookie').addEventListener('click', function () { FixMouseY(Game.ClickCookie); }, false);\n\n\tBackupFunctions.RebuildUpgrades = Game.RebuildUpgrades;\n\tGame.RebuildUpgrades = function () {\n\t\tBackupFunctions.RebuildUpgrades();\n\t\tReplaceTooltipUpgrade();\n\t\tGame.CalculateGains();\n\t};\n\n\tBackupFunctions.ClickProduct = Game.ClickProduct;\n\t/**\n\t * This function adds a check to the purchase of a building to allow BulkBuyBlock to work.\n\t * If the options is 1 (on) bulkPrice is under cookies you can't buy the building.\n\t */\n\tGame.ClickProduct = function (what) {\n\t\tif (!CMOptions.BulkBuyBlock || (Game.ObjectsById[what].bulkPrice < Game.cookies || Game.buyMode === -1)) {\n\t\t\tBackupFunctions.ClickProduct(what);\n\t\t}\n\t};\n\n\tBackupFunctions.DescribeDragonAura = Game.DescribeDragonAura;\n\t/**\n\t * This function adds the function CM.Disp.AddAuraInfo() to Game.DescribeDragonAura()\n\t * This adds information about CPS differences and costs to the aura choosing interface\n\t * @param\t{number}\taura\tThe number of the aura currently selected by the mouse/user\n\t */\n\tGame.DescribeDragonAura = function (aura) {\n\t\tBackupFunctions.DescribeDragonAura(aura);\n\t\tAddAuraInfo(aura);\n\t};\n\n\tBackupFunctions.ToggleSpecialMenu = Game.ToggleSpecialMenu;\n\t/**\n\t * This function adds the code to display the tooltips for the levelUp button of the dragon\n\t */\n\tGame.ToggleSpecialMenu = function (on) {\n\t\tBackupFunctions.ToggleSpecialMenu(on);\n\t\tAddDragonLevelUpTooltip();\n\t};\n\n\tBackupFunctions.UpdateMenu = Game.UpdateMenu;\n\tGame.UpdateMenu = function () {\n\t\tif (typeof jscolor.picker === 'undefined' || typeof jscolor.picker.owner === 'undefined') {\n\t\t\tBackupFunctions.UpdateMenu();\n\t\t\tAddMenu();\n\t\t}\n\t};\n\n\tBackupFunctions.sayTime = Game.sayTime;\n\tCMSayTime = function (time, detail) {\n\t\tif (Number.isNaN(time) || time <= 0) return BackupFunctions.sayTime(time, detail);\n\t\telse return FormatTime(time / Game.fps, 1);\n\t};\n\n\tBackupFunctions.Logic = Game.Logic;\n\tGame.Logic = function () {\n\t\tBackupFunctions.Logic();\n\n\t\t// Update tab title\n\t\tlet title = 'Cookie Clicker';\n\t\tif (Game.season === 'fools') title = 'Cookie Baker';\n\t\tTitle = `${(Game.OnAscend ? 'Ascending! ' : '')}${BeautifyFormatting_Beautify(Game.cookies)} ${(Game.cookies === 1 ? 'cookie' : 'cookies')} - ${title}`;\n\t\tUpdateTitle();\n\n\t\t// Since the Ascend Tooltip is not actually a tooltip we need to add our additional info here...\n\t\tl('ascendTooltip').innerHTML += `${CMOptions.TooltipAscendButton ? `<div class='line'></div>It takes ${CacheTimeTillNextPrestige} to reach the next level and you are making ${BeautifyFormatting_Beautify(CacheHCPerSecond, 2)} chips on average in the last 5 seconds.<br>` : ''}`;\n\t};\n}\n\n;// CONCATENATED MODULE: ./src/Main/WrinklerArea/AddDetectArea.js\n/* eslint-disable no-unused-vars */\n\n\n/**\n * This function creates .onmouseover/out events that determine if the mouse is hovering-over a Wrinkler\n * As wrinklers are not appended to the DOM we us a different system than for other tooltips\n */\nfunction AddWrinklerAreaDetect() {\n\tl('backgroundLeftCanvas').onmouseover = function () { TooltipWrinklerArea = 1; };\n\tl('backgroundLeftCanvas').onmouseout = function () {\n\t\tTooltipWrinklerArea = 0;\n\t\tGame.tooltip.hide();\n\t\tfor (const i of Object.keys(Game.wrinklers)) {\n\t\t\tTooltipWrinklerBeingShown[i] = 0;\n\t\t}\n\t};\n}\n\n;// CONCATENATED MODULE: ./src/Main/Initialization.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Initialization loop of Cookie Monster\n */\nfunction InitializeCookieMonster() {\n\tInitData();\n\tCacheStatsCookies();\n\tInitCache();\n\n\t// Stored to check if we need to re-initiliaze data\n\tLastModCount = Object.keys(Game.mods).length;\n\n\t// Creating visual elements\n\tCreateCssArea();\n\tCreateBotBar();\n\tCreateTimerBar();\n\tCreateUpgradeBar();\n\tCreateWhiteScreen();\n\tCreateFavicon();\n\tfor (const i of Object.keys(TooltipText)) {\n\t\tCreateSimpleTooltip(TooltipText[i][0], TooltipText[i][1], TooltipText[i][2]);\n\t}\n\tCreateWrinklerButtons();\n\tUpdateBuildingUpgradeStyle();\n\n\tReplaceTooltips();\n\tAddWrinklerAreaDetect();\n\n\t// Replace native functions\n\tReplaceNative();\n\tReplaceNativeGrimoire();\n\tGame.CalculateGains();\n\n\tLoadConfig(); // Must be after all things are created!\n\tCMLastAscendState = Game.OnAscend;\n\n\tif (Game.prefs.popups) Game.Popup(`Cookie Monster version ${VersionMajor}.${VersionMinor} loaded!`);\n\telse Game.Notify(`Cookie Monster version ${VersionMajor}.${VersionMinor} loaded!`, '', '', 1, 1);\n\n\tGame.Win('Third-party');\n}\n\n;// CONCATENATED MODULE: ./src/InitSaveLoad/init.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n/**\n  * This creates a init function for the CM object. Per Game code/comments:\n  * \"this function is called as soon as the mod is registered\n  * declare hooks here\"\n  * It starts the further initialization of CookieMonster and registers hooks\n  */\nfunction init() {\n\tisInitializing = true;\n\tlet proceed = true;\n\tif (Game.version !== Number(VersionMajor)) {\n\t\tproceed = confirm(`Cookie Monster version ${VersionMajor}.${VersionMinor} is meant for Game version ${VersionMajor}.  Loading a different version may cause errors.  Do you still want to load Cookie Monster?`);\n\t}\n\tif (proceed) {\n\t\tInitializeCookieMonster();\n\t\tGame.registerHook('draw', Draw);\n\t\tGame.registerHook('logic', CMLoop);\n\t\tisInitializing = false;\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/InitSaveLoad/load.js\n\n\n\n\n/**\n * This creates a load function to the CM object. Per Game code/comments:\n * \"do stuff with the string data you saved previously\"\n */\nfunction load(str) {\n\tconst save = JSON.parse(str);\n\tInitData();\n\tLoadConfig(save.settings);\n\tif (save.version !== `${VersionMajor}.${VersionMinor}`) {\n\t\tif (Game.prefs.popups) Game.Popup('A new version of Cookie Monster has been loaded, check out the release notes in the info tab!');\n\t\telse Game.Notify('A new version of Cookie Monster has been loaded, check out the release notes in the info tab!', '', '', 0, 1);\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/CookieMonster.js\n/* eslint-disable no-unused-vars */\n\n\n\n\nconst CookieMonster_CM = {\n\tinit: init,\n\tload: load,\n\tsave: save,\n};\n\n/**\n * Section: Functions related to the initialization of CookieMonster */\n\n/**\n * This functions loads an external script (on the same repository) that creates the\n * functionality needed to dynamiccaly change colours\n * It is called by the last function in the footer\n */\nfunction AddJscolor() {\n\tconst Jscolor = document.createElement('script');\n\tJscolor.type = 'text/javascript';\n\tJscolor.setAttribute('src', 'https://aktanusa.github.io/CookieMonster/jscolor/jscolor.js');\n\tdocument.head.appendChild(Jscolor);\n}\n\n/**\n * This functions starts the initizialization and register CookieMonster\n * It is called as the last function in this script's execution\n */\nAddJscolor();\nconst delay = setInterval(function () {\n\tif (typeof jscolor !== 'undefined') {\n\t\tjscolor.init();\n\t\tGame.registerMod('CookieMonster', CookieMonster_CM);\n\t\tclearInterval(delay);\n\t}\n}, 500);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///992\n")}},__webpack_exports__={};__webpack_modules__[992]()})();